
One_Pulse_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008288  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008418  08008418  00018418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008824  08008824  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008824  08008824  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008824  08008824  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800882c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001ac  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3b8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1b  00000000  00000000  0002d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210c8  00000000  00000000  00030ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef42  00000000  00000000  00051db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c752e  00000000  00000000  00060cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00128220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043f8  00000000  00000000  00128270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008400 	.word	0x08008400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008400 	.word	0x08008400

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fdda 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f81e 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 face 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb8:	f000 faae 	bl	8001118 <MX_DMA_Init>
  MX_TIM2_Init();
 8000bbc:	f000 f9a0 	bl	8000f00 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bc0:	f000 f8e8 	bl	8000d94 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bc4:	f000 f9ea 	bl	8000f9c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000bc8:	f000 f874 	bl	8000cb4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <main+0x3c>)
 8000bce:	f003 fb05 	bl	80041dc <HAL_TIM_Base_Start>
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <main+0x40>)
 8000bd6:	f003 fc71 	bl	80044bc <HAL_TIM_OnePulse_Start>
  // HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
  HAL_TIM_OnePulse_Start(&htim3, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <main+0x44>)
 8000bde:	f003 fc6d 	bl	80044bc <HAL_TIM_OnePulse_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <main+0x3a>
 8000be4:	200002d8 	.word	0x200002d8
 8000be8:	2000028c 	.word	0x2000028c
 8000bec:	20000324 	.word	0x20000324

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bfa:	2228      	movs	r2, #40	; 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fede 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000c30:	2303      	movs	r3, #3
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 ff13 	bl	8002a78 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000c58:	f000 fae6 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 ff3a 	bl	8003af4 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c86:	f000 facf 	bl	8001228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000c8a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c8e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f90f 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ca8:	f000 fabe 	bl	8001228 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3758      	adds	r7, #88	; 0x58
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000cd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d20:	2204      	movs	r2, #4
 8000d22:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d32:	f000 fd7d 	bl	8001830 <HAL_ADC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f000 fa74 	bl	8001228 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d4c:	f001 f9c2 	bl	80020d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d56:	f000 fa67 	bl	8001228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_ADC1_Init+0xdc>)
 8000d78:	f000 feec 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d82:	f000 fa51 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001f8 	.word	0x200001f8

08000d94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09a      	sub	sp, #104	; 0x68
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000daa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	222c      	movs	r2, #44	; 0x2c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fdf5 	bl	80059c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <MX_TIM1_Init+0x168>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000ddc:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000dde:	221f      	movs	r2, #31
 8000de0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8000de8:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000dea:	2213      	movs	r2, #19
 8000dec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df4:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e00:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e02:	f003 f993 	bl	800412c <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f000 fa0c 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e10:	4839      	ldr	r0, [pc, #228]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e12:	f003 fa37 	bl	8004284 <HAL_TIM_OC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e1c:	f000 fa04 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e20:	2108      	movs	r1, #8
 8000e22:	4835      	ldr	r0, [pc, #212]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e24:	f003 faf0 	bl	8004408 <HAL_TIM_OnePulse_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e2e:	f000 f9fb 	bl	8001228 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e32:	2306      	movs	r3, #6
 8000e34:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e36:	2310      	movs	r3, #16
 8000e38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482d      	ldr	r0, [pc, #180]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e42:	f003 feaa 	bl	8004b9a <HAL_TIM_SlaveConfigSynchro>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000e4c:	f000 f9ec 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e60:	4619      	mov	r1, r3
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e64:	f004 fc7e 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000e6e:	f000 f9db 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e72:	2370      	movs	r3, #112	; 0x70
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 10-1;
 8000e76:	2309      	movs	r3, #9
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000e98:	f003 fca0 	bl	80047dc <HAL_TIM_OC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000ea2:	f000 f9c1 	bl	8001228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ecc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000edc:	f004 fcb0 	bl	8005840 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000ee6:	f000 f99f 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);            // Enable Timer 1 Update Event interrupt
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);               // Enable Timer 1 Channel 1 interrupt
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <MX_TIM1_Init+0x164>)
 8000eec:	f000 fa9e 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000ef0:	bf00      	nop
 8000ef2:	3768      	adds	r7, #104	; 0x68
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000028c 	.word	0x2000028c
 8000efc:	40012c00 	.word	0x40012c00

08000f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f28:	221f      	movs	r2, #31
 8000f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f34:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f48:	f003 f8f0 	bl	800412c <HAL_TIM_Base_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f52:	f000 f969 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f64:	f003 fd50 	bl	8004a08 <HAL_TIM_ConfigClockSource>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f6e:	f000 f95b 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f72:	2320      	movs	r3, #32
 8000f74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_TIM2_Init+0x98>)
 8000f80:	f004 fbf0 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f8a:	f000 f94d 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002d8 	.word	0x200002d8

08000f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <MX_TIM3_Init+0x174>)
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <MX_TIM3_Init+0x178>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <MX_TIM3_Init+0x174>)
 8000fe6:	221f      	movs	r2, #31
 8000fe8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <MX_TIM3_Init+0x174>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3010-1;
 8000ff0:	4b47      	ldr	r3, [pc, #284]	; (8001110 <MX_TIM3_Init+0x174>)
 8000ff2:	f640 32c1 	movw	r2, #3009	; 0xbc1
 8000ff6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <MX_TIM3_Init+0x174>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b44      	ldr	r3, [pc, #272]	; (8001110 <MX_TIM3_Init+0x174>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001004:	4842      	ldr	r0, [pc, #264]	; (8001110 <MX_TIM3_Init+0x174>)
 8001006:	f003 f891 	bl	800412c <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001010:	f000 f90a 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001014:	483e      	ldr	r0, [pc, #248]	; (8001110 <MX_TIM3_Init+0x174>)
 8001016:	f003 f935 	bl	8004284 <HAL_TIM_OC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001020:	f000 f902 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001024:	483a      	ldr	r0, [pc, #232]	; (8001110 <MX_TIM3_Init+0x174>)
 8001026:	f003 f98e 	bl	8004346 <HAL_TIM_IC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001030:	f000 f8fa 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001034:	2108      	movs	r1, #8
 8001036:	4836      	ldr	r0, [pc, #216]	; (8001110 <MX_TIM3_Init+0x174>)
 8001038:	f003 f9e6 	bl	8004408 <HAL_TIM_OnePulse_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001042:	f000 f8f1 	bl	8001228 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001046:	2306      	movs	r3, #6
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800104a:	2310      	movs	r3, #16
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800104e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001052:	4619      	mov	r1, r3
 8001054:	482e      	ldr	r0, [pc, #184]	; (8001110 <MX_TIM3_Init+0x174>)
 8001056:	f003 fda0 	bl	8004b9a <HAL_TIM_SlaveConfigSynchro>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001060:	f000 f8e2 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001070:	4619      	mov	r1, r3
 8001072:	4827      	ldr	r0, [pc, #156]	; (8001110 <MX_TIM3_Init+0x174>)
 8001074:	f004 fb76 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800107e:	f000 f8d3 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001082:	2370      	movs	r3, #112	; 0x70
 8001084:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 3000-1;
 8001086:	f640 33b7 	movw	r3, #2999	; 0xbb7
 800108a:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	481c      	ldr	r0, [pc, #112]	; (8001110 <MX_TIM3_Init+0x174>)
 800109e:	f003 fb9d 	bl	80047dc <HAL_TIM_OC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 80010a8:	f000 f8be 	bl	8001228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2204      	movs	r2, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_TIM3_Init+0x174>)
 80010c4:	f003 fc04 	bl	80048d0 <HAL_TIM_IC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x136>
  {
    Error_Handler();
 80010ce:	f000 f8ab 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */


  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);            // Enable Timer 3 Update Event interrupt for elapsedPeriodCallback
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_TIM3_Init+0x174>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_TIM3_Init+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);               // Enable Timer 3 Channel 1 interrupt
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_TIM3_Init+0x174>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_TIM3_Init+0x174>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0202 	orr.w	r2, r2, #2
 80010f0:	60da      	str	r2, [r3, #12]


  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	201d      	movs	r0, #29
 80010f8:	f001 f9f3 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010fc:	201d      	movs	r0, #29
 80010fe:	f001 fa0c 	bl	800251a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM3_Init+0x174>)
 8001104:	f000 f992 	bl	800142c <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3750      	adds	r7, #80	; 0x50
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000324 	.word	0x20000324
 8001114:	40000400 	.word	0x40000400

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_DMA_Init+0x38>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_DMA_Init+0x38>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_DMA_Init+0x38>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200b      	movs	r0, #11
 800113c:	f001 f9d1 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001140:	200b      	movs	r0, #11
 8001142:	f001 f9ea 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_GPIO_Init+0x90>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <MX_GPIO_Init+0x90>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_GPIO_Init+0x90>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_GPIO_Init+0x90>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x90>)
 8001188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_GPIO_Init+0x90>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_GPIO_Init+0x90>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <MX_GPIO_Init+0x90>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_GPIO_Init+0x90>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f001 fc45 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011be:	2320      	movs	r3, #32
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f001 fac4 	bl	8002764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim3){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if (htim3->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d105      	bne.n	8001204 <HAL_TIM_IC_CaptureCallback+0x1c>
        // TIM3 reached the CCR selected value-- We get the rising edge
    	HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f001 fc22 	bl	8002a48 <HAL_GPIO_WritePin>

    }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

    	HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2120      	movs	r1, #32
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f001 fc14 	bl	8002a48 <HAL_GPIO_WritePin>
        // TIM1 reached the ARR value, and will reset

}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x44>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6193      	str	r3, [r2, #24]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x44>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x44>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x44>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	d14c      	bne.n	8001338 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_ADC_MspInit+0xc4>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ce:	2302      	movs	r3, #2
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f001 fa3e 	bl	8002764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_ADC_MspInit+0xcc>)
 80012ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 800130a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800130e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 8001312:	2220      	movs	r2, #32
 8001314:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 800131e:	f001 f916 	bl	800254e <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001328:	f7ff ff7e 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_ADC_MspInit+0xc8>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	20000248 	.word	0x20000248
 8001348:	40020008 	.word	0x40020008

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_TIM_Base_MspInit+0xd4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10c      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 8001374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001386:	e047      	b.n	8001418 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d10c      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
}
 80013aa:	e035      	b.n	8001418 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_TIM_Base_MspInit+0xdc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d130      	bne.n	8001418 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_TIM_Base_MspInit+0xd8>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e6:	2310      	movs	r3, #16
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f001 f9ae 	bl	8002764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	201d      	movs	r0, #29
 800140e:	f001 f868 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001412:	201d      	movs	r0, #29
 8001414:	f001 f881 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40012c00 	.word	0x40012c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40000400 	.word	0x40000400

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_TIM_MspPostInit+0xa8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11c      	bne.n	8001488 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 8001454:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001458:	6153      	str	r3, [r2, #20]
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001476:	2302      	movs	r3, #2
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4816      	ldr	r0, [pc, #88]	; (80014dc <HAL_TIM_MspPostInit+0xb0>)
 8001482:	f001 f96f 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001486:	e021      	b.n	80014cc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_TIM_MspPostInit+0xb4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d11c      	bne.n	80014cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_TIM_MspPostInit+0xac>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ba:	2302      	movs	r3, #2
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c8:	f001 f94c 	bl	8002764 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40012c00 	.word	0x40012c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000800 	.word	0x48000800
 80014e0:	40000400 	.word	0x40000400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 f95e 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel1_IRQHandler+0x10>)
 800153e:	f001 f84d 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000248 	.word	0x20000248

0800154c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <TIM3_IRQHandler+0x10>)
 8001552:	f003 f823 	bl	800459c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000324 	.word	0x20000324

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f004 f9f7 	bl	800596c <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
  }

  return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e009      	b.n	8001604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf1      	blt.n	80015f0 <_write+0x12>
  }
  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	605a      	str	r2, [r3, #4]
  return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f004 f95c 	bl	800596c <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20003000 	.word	0x20003000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000370 	.word	0x20000370
 80016e8:	20000388 	.word	0x20000388

080016ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001714:	f7ff ffea 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <LoopForever+0x6>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <LoopForever+0xe>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <LoopForever+0x16>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f004 f91b 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001742:	f7ff fa31 	bl	8000ba8 <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001748:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001754:	0800882c 	.word	0x0800882c
  ldr r2, =_sbss
 8001758:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800175c:	20000388 	.word	0x20000388

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x28>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fea9 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fd58 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fec1 	bl	8002536 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 fe89 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20000374 	.word	0x20000374

08001818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;  
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000374 	.word	0x20000374

08001830 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b09a      	sub	sp, #104	; 0x68
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e172      	b.n	8001b36 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d176      	bne.n	8001950 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d152      	bne.n	8001910 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fcf9 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d13b      	bne.n	8001910 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fce1 	bl	8002260 <ADC_Disable>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d12f      	bne.n	8001910 <HAL_ADC_Init+0xe0>
 80018b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d12b      	bne.n	8001910 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c0:	f023 0302 	bic.w	r3, r3, #2
 80018c4:	f043 0202 	orr.w	r2, r3, #2
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ec:	4b94      	ldr	r3, [pc, #592]	; (8001b40 <HAL_ADC_Init+0x310>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <HAL_ADC_Init+0x314>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9a      	lsrs	r2, r3, #18
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001902:	e002      	b.n	800190a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3b01      	subs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f9      	bne.n	8001904 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800192c:	d110      	bne.n	8001950 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f023 0312 	bic.w	r3, r3, #18
 8001936:	f043 0210 	orr.w	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 80df 	bne.w	8001b1c <HAL_ADC_Init+0x2ec>
 800195e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 80da 	bne.w	8001b1c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80d2 	bne.w	8001b1c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001980:	f043 0202 	orr.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_ADC_Init+0x318>)
 800198a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001994:	d102      	bne.n	800199c <HAL_ADC_Init+0x16c>
 8001996:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_ADC_Init+0x31c>)
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Init+0x172>
 800199c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_ADC_Init+0x192>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x192>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_ADC_Init+0x194>
 80019c2:	2300      	movs	r3, #0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11c      	bne.n	8001a02 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_ADC_Init+0x1ba>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x1ba>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_ADC_Init+0x1bc>
 80019ea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d108      	bne.n	8001a02 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80019f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e5b      	ldrb	r3, [r3, #25]
 8001a06:	035b      	lsls	r3, r3, #13
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a0c:	2a01      	cmp	r2, #1
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Init+0x1e6>
 8001a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_Init+0x1e8>
 8001a16:	2200      	movs	r2, #0
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11b      	bne.n	8001a6e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7e5b      	ldrb	r3, [r3, #25]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	3b01      	subs	r3, #1
 8001a44:	045a      	lsls	r2, r3, #17
 8001a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001a50:	e00d      	b.n	8001a6e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d007      	beq.n	8001a86 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a82:	4313      	orrs	r3, r2
 8001a84:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d114      	bne.n	8001abe <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa2:	f023 0302 	bic.w	r3, r3, #2
 8001aa6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	039a      	lsls	r2, r3, #14
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aba:	4313      	orrs	r3, r2
 8001abc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_ADC_Init+0x320>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10c      	bne.n	8001af4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f023 010f 	bic.w	r1, r3, #15
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
 8001af2:	e007      	b.n	8001b04 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020f 	bic.w	r2, r2, #15
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
 8001b1a:	e00a      	b.n	8001b32 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f023 0312 	bic.w	r3, r3, #18
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3768      	adds	r7, #104	; 0x68
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83
 8001b48:	50000300 	.word	0x50000300
 8001b4c:	50000100 	.word	0x50000100
 8001b50:	fff0c007 	.word	0xfff0c007

08001b54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b09b      	sub	sp, #108	; 0x6c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x22>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e2a4      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x56c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 8288 	bne.w	800209e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d81c      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	231f      	movs	r3, #31
 8001bac:	4093      	lsls	r3, r2
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4019      	ands	r1, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bce:	e063      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	d81e      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	3b1e      	subs	r3, #30
 8001bec:	221f      	movs	r2, #31
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4019      	ands	r1, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	3b1e      	subs	r3, #30
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34
 8001c14:	e040      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b0e      	cmp	r3, #14
 8001c1c:	d81e      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	3b3c      	subs	r3, #60	; 0x3c
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4019      	ands	r1, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	3b3c      	subs	r3, #60	; 0x3c
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5a:	e01d      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	3b5a      	subs	r3, #90	; 0x5a
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	3b5a      	subs	r3, #90	; 0x5a
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 80e5 	bne.w	8001e72 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d91c      	bls.n	8001cea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6999      	ldr	r1, [r3, #24]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b1e      	subs	r3, #30
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	619a      	str	r2, [r3, #24]
 8001ce8:	e019      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6959      	ldr	r1, [r3, #20]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6898      	ldr	r0, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	fa00 f203 	lsl.w	r2, r0, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d84f      	bhi.n	8001de0 <HAL_ADC_ConfigChannel+0x28c>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <HAL_ADC_ConfigChannel+0x1f4>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d7b 	.word	0x08001d7b
 8001d50:	08001d9d 	.word	0x08001d9d
 8001d54:	08001dbf 	.word	0x08001dbf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d5e:	4b94      	ldr	r3, [pc, #592]	; (8001fb0 <HAL_ADC_ConfigChannel+0x45c>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	0691      	lsls	r1, r2, #26
 8001d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d76:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d78:	e07e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d80:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <HAL_ADC_ConfigChannel+0x45c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	0691      	lsls	r1, r2, #26
 8001d8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d98:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d9a:	e06d      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001da2:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <HAL_ADC_ConfigChannel+0x45c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	0691      	lsls	r1, r2, #26
 8001dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dae:	430a      	orrs	r2, r1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dbc:	e05c      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dc4:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <HAL_ADC_ConfigChannel+0x45c>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	0691      	lsls	r1, r2, #26
 8001dce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ddc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dde:	e04b      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e26:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	069b      	lsls	r3, r3, #26
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e4a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d10a      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e6e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e70:	e001      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e76:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x344>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x344>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x346>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 810a 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d00f      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ec6:	e049      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d91c      	bls.n	8001f24 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6999      	ldr	r1, [r3, #24]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1b      	subs	r3, #27
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4019      	ands	r1, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6898      	ldr	r0, [r3, #8]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	3b1b      	subs	r3, #27
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	e01b      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6959      	ldr	r1, [r3, #20]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	2207      	movs	r2, #7
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4019      	ands	r1, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_ADC_ConfigChannel+0x460>)
 8001f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	f040 8091 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 808a 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa8:	d108      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x468>
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_ADC_ConfigChannel+0x464>)
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e008      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x46e>
 8001fb0:	83fff000 	.word	0x83fff000
 8001fb4:	50000300 	.word	0x50000300
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fc0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x48e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x48e>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x490>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d150      	bne.n	800208a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4b6>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4b6>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x4b8>
 800200a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13c      	bne.n	800208a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11d      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x500>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002020:	d118      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_ADC_ConfigChannel+0x578>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_ADC_ConfigChannel+0x57c>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9a      	lsrs	r2, r3, #18
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002044:	e002      	b.n	800204c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002052:	e02e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b11      	cmp	r3, #17
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x520>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d106      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800206e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002070:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002072:	e01e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b12      	cmp	r3, #18
 800207a:	d11a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800207c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002086:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002088:	e013      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800209c:	e00a      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	376c      	adds	r7, #108	; 0x6c
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20000000 	.word	0x20000000
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b099      	sub	sp, #100	; 0x64
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ec:	d102      	bne.n	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	e002      	b.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80020f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0a2      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800210e:	2302      	movs	r3, #2
 8002110:	e09b      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d17f      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d179      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002136:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d040      	beq.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002152:	035b      	lsls	r3, r3, #13
 8002154:	430b      	orrs	r3, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d15c      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800219e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d14b      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021ac:	f023 030f 	bic.w	r3, r3, #15
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	6811      	ldr	r1, [r2, #0]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021c0:	e03c      	b.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d108      	bne.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d123      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002210:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d112      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800221e:	f023 030f 	bic.w	r3, r3, #15
 8002222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002224:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002226:	e009      	b.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800223a:	e000      	b.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800223c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800224a:	4618      	mov	r0, r3
 800224c:	3764      	adds	r7, #100	; 0x64
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	50000100 	.word	0x50000100
 800225c:	50000300 	.word	0x50000300

08002260 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <ADC_Disable+0x2c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <ADC_Disable+0x2c>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <ADC_Disable+0x2e>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d047      	beq.n	8002322 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030d 	and.w	r3, r3, #13
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10f      	bne.n	80022c0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0202 	orr.w	r2, r2, #2
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2203      	movs	r2, #3
 80022b6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022b8:	f7ff faae 	bl	8001818 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022be:	e029      	b.n	8002314 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0210 	orr.w	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e023      	b.n	8002324 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022dc:	f7ff fa9c 	bl	8001818 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d914      	bls.n	8002314 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10d      	bne.n	8002314 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d0dc      	beq.n	80022dc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e037      	b.n	80025d4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800257a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800257e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8b4 	bl	8002724 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}  
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2204      	movs	r2, #4
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d024      	beq.n	800264e <HAL_DMA_IRQHandler+0x72>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01f      	beq.n	800264e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	2104      	movs	r1, #4
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06a      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800264c:	e065      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2202      	movs	r2, #2
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xdc>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d027      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 020a 	bic.w	r2, r2, #10
 8002684:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2102      	movs	r1, #2
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d035      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80026b6:	e030      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2208      	movs	r2, #8
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d028      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d023      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    }
  }
}  
 8002718:	e7ff      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <DMA_CalcBaseAndBitshift+0x34>)
 8002734:	4413      	add	r3, r2
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <DMA_CalcBaseAndBitshift+0x38>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <DMA_CalcBaseAndBitshift+0x3c>)
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	bffdfff8 	.word	0xbffdfff8
 800275c:	cccccccd 	.word	0xcccccccd
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	e14e      	b.n	8002a12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8140 	beq.w	8002a0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_GPIO_Init+0x40>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d130      	bne.n	8002806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027da:	2201      	movs	r2, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0201 	and.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d017      	beq.n	8002842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 809a 	beq.w	8002a0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d8:	4b55      	ldr	r3, [pc, #340]	; (8002a30 <HAL_GPIO_Init+0x2cc>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a54      	ldr	r2, [pc, #336]	; (8002a30 <HAL_GPIO_Init+0x2cc>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_GPIO_Init+0x2cc>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291a:	d013      	beq.n	8002944 <HAL_GPIO_Init+0x1e0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <HAL_GPIO_Init+0x2d4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00d      	beq.n	8002940 <HAL_GPIO_Init+0x1dc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <HAL_GPIO_Init+0x2d8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <HAL_GPIO_Init+0x1d8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <HAL_GPIO_Init+0x2dc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_GPIO_Init+0x1d4>
 8002934:	2303      	movs	r3, #3
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x1e2>
 8002938:	2305      	movs	r3, #5
 800293a:	e004      	b.n	8002946 <HAL_GPIO_Init+0x1e2>
 800293c:	2302      	movs	r3, #2
 800293e:	e002      	b.n	8002946 <HAL_GPIO_Init+0x1e2>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_GPIO_Init+0x1e2>
 8002944:	2300      	movs	r3, #0
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	f002 0203 	and.w	r2, r2, #3
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	4093      	lsls	r3, r2
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002956:	4937      	ldr	r1, [pc, #220]	; (8002a34 <HAL_GPIO_Init+0x2d0>)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002964:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002988:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b2:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a06:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_GPIO_Init+0x2e0>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f aea9 	bne.w	8002774 <HAL_GPIO_Init+0x10>
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010000 	.word	0x40010000
 8002a38:	48000400 	.word	0x48000400
 8002a3c:	48000800 	.word	0x48000800
 8002a40:	48000c00 	.word	0x48000c00
 8002a44:	40010400 	.word	0x40010400

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f001 b823 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 817d 	beq.w	8002dae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ab4:	4bbc      	ldr	r3, [pc, #752]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00c      	beq.n	8002ada <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac0:	4bb9      	ldr	r3, [pc, #740]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d15c      	bne.n	8002b86 <HAL_RCC_OscConfig+0x10e>
 8002acc:	4bb6      	ldr	r3, [pc, #728]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d155      	bne.n	8002b86 <HAL_RCC_OscConfig+0x10e>
 8002ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ade:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_OscConfig+0x94>
 8002b06:	4ba8      	ldr	r3, [pc, #672]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e015      	b.n	8002b38 <HAL_RCC_OscConfig+0xc0>
 8002b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b34:	4b9c      	ldr	r3, [pc, #624]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 811f 	beq.w	8002dac <HAL_RCC_OscConfig+0x334>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 8116 	bne.w	8002dac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f000 bfaf 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12e>
 8002b98:	4b83      	ldr	r3, [pc, #524]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a82      	ldr	r2, [pc, #520]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e036      	b.n	8002c14 <HAL_RCC_OscConfig+0x19c>
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x158>
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a78      	ldr	r2, [pc, #480]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e021      	b.n	8002c14 <HAL_RCC_OscConfig+0x19c>
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x184>
 8002be2:	4b71      	ldr	r3, [pc, #452]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a70      	ldr	r2, [pc, #448]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6e      	ldr	r3, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6d      	ldr	r2, [pc, #436]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x19c>
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a69      	ldr	r2, [pc, #420]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c14:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f023 020f 	bic.w	r2, r3, #15
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	495f      	ldr	r1, [pc, #380]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d059      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fdeb 	bl	8001818 <HAL_GetTick>
 8002c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fde6 	bl	8001818 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d902      	bls.n	8002c5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f000 bf43 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x218>
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_OscConfig+0x244>
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cc4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002cd0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ab      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1d0>
 8002cf0:	e05d      	b.n	8002dae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fd91 	bl	8001818 <HAL_GetTick>
 8002cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fd8c 	bl	8001818 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f000 bee9 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 8002d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2cc>
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e015      	b.n	8002d70 <HAL_RCC_OscConfig+0x2f8>
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ab      	bne.n	8002cfc <HAL_RCC_OscConfig+0x284>
 8002da4:	e003      	b.n	8002dae <HAL_RCC_OscConfig+0x336>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 817d 	beq.w	80030be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002dc4:	4ba6      	ldr	r3, [pc, #664]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dd0:	4ba3      	ldr	r3, [pc, #652]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d172      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x44a>
 8002ddc:	4ba0      	ldr	r3, [pc, #640]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d16c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x44a>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002dfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x3a0>
 8002e12:	4b93      	ldr	r3, [pc, #588]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e013      	b.n	8002e40 <HAL_RCC_OscConfig+0x3c8>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e3c:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2202      	movs	r2, #2
 8002e42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCC_OscConfig+0x410>
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f000 be2e 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	21f8      	movs	r1, #248	; 0xf8
 8002e9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ea6:	fa91 f1a1 	rbit	r1, r1
 8002eaa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002eae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002eb2:	fab1 f181 	clz	r1, r1
 8002eb6:	b2c9      	uxtb	r1, r1
 8002eb8:	408b      	lsls	r3, r1
 8002eba:	4969      	ldr	r1, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec0:	e0fd      	b.n	80030be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8088 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x56c>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ee6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	2301      	movs	r3, #1
 8002efe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fc8a 	bl	8001818 <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fc85 	bl	8001818 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f000 bde2 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4d8>
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e013      	b.n	8002f78 <HAL_RCC_OscConfig+0x500>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f74:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f8e:	fab2 f282 	clz	r2, r2
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	f042 0220 	orr.w	r2, r2, #32
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f002 021f 	and.w	r2, r2, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0af      	beq.n	8002f0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	21f8      	movs	r1, #248	; 0xf8
 8002fc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fc8:	fa91 f1a1 	rbit	r1, r1
 8002fcc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fd4:	fab1 f181 	clz	r1, r1
 8002fd8:	b2c9      	uxtb	r1, r1
 8002fda:	408b      	lsls	r3, r1
 8002fdc:	4920      	ldr	r1, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
 8002fe2:	e06c      	b.n	80030be <HAL_RCC_OscConfig+0x646>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fc02 	bl	8001818 <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe fbfd 	bl	8001818 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	f000 bd5a 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d104      	bne.n	8003064 <HAL_RCC_OscConfig+0x5ec>
 800305a:	4b01      	ldr	r3, [pc, #4]	; (8003060 <HAL_RCC_OscConfig+0x5e8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e015      	b.n	800308c <HAL_RCC_OscConfig+0x614>
 8003060:	40021000 	.word	0x40021000
 8003064:	2302      	movs	r3, #2
 8003066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800307c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003088:	4bc8      	ldr	r3, [pc, #800]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2202      	movs	r2, #2
 800308e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003092:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003096:	fa92 f2a2 	rbit	r2, r2
 800309a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800309e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030a2:	fab2 f282 	clz	r2, r2
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	f042 0220 	orr.w	r2, r2, #32
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f002 021f 	and.w	r2, r2, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f202 	lsl.w	r2, r1, r2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ad      	bne.n	800301a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8110 	beq.w	80032f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d079      	beq.n	80031d8 <HAL_RCC_OscConfig+0x760>
 80030e4:	2301      	movs	r3, #1
 80030e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	4bab      	ldr	r3, [pc, #684]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fe fb83 	bl	8001818 <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe fb7e 	bl	8001818 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	f000 bcdb 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003148:	2202      	movs	r2, #2
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	fa93 f2a3 	rbit	r2, r3
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800316c:	2202      	movs	r2, #2
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003186:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	4b88      	ldr	r3, [pc, #544]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003194:	2102      	movs	r1, #2
 8003196:	6019      	str	r1, [r3, #0]
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	fa93 f1a3 	rbit	r1, r3
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031ae:	6019      	str	r1, [r3, #0]
  return result;
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0a0      	beq.n	8003118 <HAL_RCC_OscConfig+0x6a0>
 80031d6:	e08d      	b.n	80032f4 <HAL_RCC_OscConfig+0x87c>
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031fa:	601a      	str	r2, [r3, #0]
  return result;
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003204:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_OscConfig+0x938>)
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	461a      	mov	r2, r3
 8003216:	2300      	movs	r3, #0
 8003218:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fafd 	bl	8001818 <HAL_GetTick>
 800321e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe faf8 	bl	8001818 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d902      	bls.n	800323a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	f000 bc55 	b.w	8003ae4 <HAL_RCC_OscConfig+0x106c>
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003242:	2202      	movs	r2, #2
 8003244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003266:	2202      	movs	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 80032a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032b2:	2102      	movs	r1, #2
 80032b4:	6019      	str	r1, [r3, #0]
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f1a3 	rbit	r1, r3
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032cc:	6019      	str	r1, [r3, #0]
  return result;
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d197      	bne.n	8003224 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 81a1 	beq.w	800364c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003310:	4b26      	ldr	r3, [pc, #152]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d116      	bne.n	800334a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003342:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCC_OscConfig+0x93c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11a      	bne.n	800338c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_RCC_OscConfig+0x93c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_RCC_OscConfig+0x93c>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe fa59 	bl	8001818 <HAL_GetTick>
 8003366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e009      	b.n	8003380 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe fa54 	bl	8001818 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e3b1      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCC_OscConfig+0x93c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10d      	bne.n	80033b8 <HAL_RCC_OscConfig+0x940>
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a02      	ldr	r2, [pc, #8]	; (80033ac <HAL_RCC_OscConfig+0x934>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e03c      	b.n	8003424 <HAL_RCC_OscConfig+0x9ac>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	10908120 	.word	0x10908120
 80033b4:	40007000 	.word	0x40007000
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x96a>
 80033c8:	4bc1      	ldr	r3, [pc, #772]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4ac0      	ldr	r2, [pc, #768]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	4bbe      	ldr	r3, [pc, #760]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4abd      	ldr	r2, [pc, #756]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033da:	f023 0304 	bic.w	r3, r3, #4
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	e020      	b.n	8003424 <HAL_RCC_OscConfig+0x9ac>
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x994>
 80033f2:	4bb7      	ldr	r3, [pc, #732]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4ab6      	ldr	r2, [pc, #728]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4bb4      	ldr	r3, [pc, #720]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4ab3      	ldr	r2, [pc, #716]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0x9ac>
 800340c:	4bb0      	ldr	r3, [pc, #704]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4aaf      	ldr	r2, [pc, #700]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	4bad      	ldr	r3, [pc, #692]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4aac      	ldr	r2, [pc, #688]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 800341e:	f023 0304 	bic.w	r3, r3, #4
 8003422:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8081 	beq.w	8003538 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe f9ef 	bl	8001818 <HAL_GetTick>
 800343a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe f9ea 	bl	8001818 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e345      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003460:	2202      	movs	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800349e:	601a      	str	r2, [r3, #0]
  return result;
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80034a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d102      	bne.n	80034c4 <HAL_RCC_OscConfig+0xa4c>
 80034be:	4b84      	ldr	r3, [pc, #528]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	e013      	b.n	80034ec <HAL_RCC_OscConfig+0xa74>
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034cc:	2202      	movs	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034f4:	2102      	movs	r1, #2
 80034f6:	6011      	str	r1, [r2, #0]
 80034f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	fa92 f1a2 	rbit	r1, r2
 8003506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800350e:	6011      	str	r1, [r2, #0]
  return result;
 8003510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003514:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f002 021f 	and.w	r2, r2, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f202 	lsl.w	r2, r1, r2
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d084      	beq.n	8003440 <HAL_RCC_OscConfig+0x9c8>
 8003536:	e07f      	b.n	8003638 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe f96e 	bl	8001818 <HAL_GetTick>
 800353c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe f969 	bl	8001818 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e2c4      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
 800355a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003562:	2202      	movs	r2, #2
 8003564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035a0:	601a      	str	r2, [r3, #0]
  return result;
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80035aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0xb4e>
 80035c0:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	e013      	b.n	80035ee <HAL_RCC_OscConfig+0xb76>
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035ce:	2202      	movs	r2, #2
 80035d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035f6:	2102      	movs	r1, #2
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	fa92 f1a2 	rbit	r1, r2
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003610:	6011      	str	r1, [r2, #0]
  return result;
 8003612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003616:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fab2 f282 	clz	r2, r2
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f002 021f 	and.w	r2, r2, #31
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f202 	lsl.w	r2, r1, r2
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d184      	bne.n	8003542 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003638:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8242 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_RCC_OscConfig+0xc58>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	f000 8213 	beq.w	8003a92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b02      	cmp	r3, #2
 800367a:	f040 8162 	bne.w	8003942 <HAL_RCC_OscConfig+0xeca>
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036a2:	601a      	str	r2, [r3, #0]
  return result;
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe f8a8 	bl	8001818 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	e00c      	b.n	80036e8 <HAL_RCC_OscConfig+0xc70>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe f8a0 	bl	8001818 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1fd      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f2a3 	rbit	r2, r3
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800370c:	601a      	str	r2, [r3, #0]
  return result;
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003716:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_RCC_OscConfig+0xcba>
 800372c:	4bb0      	ldr	r3, [pc, #704]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	e027      	b.n	8003782 <HAL_RCC_OscConfig+0xd0a>
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800373a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fa93 f2a3 	rbit	r2, r3
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	4b9c      	ldr	r3, [pc, #624]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003786:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800378a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800378e:	6011      	str	r1, [r2, #0]
 8003790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003794:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	fa92 f1a2 	rbit	r1, r2
 800379e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037a6:	6011      	str	r1, [r2, #0]
  return result;
 80037a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d182      	bne.n	80036d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ce:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	430b      	orrs	r3, r1
 80037f0:	497f      	ldr	r1, [pc, #508]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800381a:	601a      	str	r2, [r3, #0]
  return result;
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003824:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	461a      	mov	r2, r3
 8003838:	2301      	movs	r3, #1
 800383a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fd ffec 	bl	8001818 <HAL_GetTick>
 8003840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003844:	e009      	b.n	800385a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd ffe7 	bl	8001818 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e144      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	fa93 f2a3 	rbit	r2, r3
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800387e:	601a      	str	r2, [r3, #0]
  return result;
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003888:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_OscConfig+0xe2c>
 800389e:	4b54      	ldr	r3, [pc, #336]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	e027      	b.n	80038f4 <HAL_RCC_OscConfig+0xe7c>
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003906:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	fa92 f1a2 	rbit	r1, r2
 8003910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003914:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003918:	6011      	str	r1, [r2, #0]
  return result;
 800391a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	fab2 f282 	clz	r2, r2
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	f042 0220 	orr.w	r2, r2, #32
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f002 021f 	and.w	r2, r2, #31
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d082      	beq.n	8003846 <HAL_RCC_OscConfig+0xdce>
 8003940:	e0cf      	b.n	8003ae2 <HAL_RCC_OscConfig+0x106a>
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800394a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800394e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003966:	601a      	str	r2, [r3, #0]
  return result;
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003970:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800397c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	461a      	mov	r2, r3
 8003984:	2300      	movs	r3, #0
 8003986:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd ff46 	bl	8001818 <HAL_GetTick>
 800398c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003990:	e009      	b.n	80039a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd ff41 	bl	8001818 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e09e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039ca:	601a      	str	r2, [r3, #0]
  return result;
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d104      	bne.n	80039f4 <HAL_RCC_OscConfig+0xf7c>
 80039ea:	4b01      	ldr	r3, [pc, #4]	; (80039f0 <HAL_RCC_OscConfig+0xf78>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e029      	b.n	8003a44 <HAL_RCC_OscConfig+0xfcc>
 80039f0:	40021000 	.word	0x40021000
 80039f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f2a3 	rbit	r2, r3
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_OscConfig+0x1078>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	fa92 f1a2 	rbit	r1, r2
 8003a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a68:	6011      	str	r1, [r2, #0]
  return result;
 8003a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fab2 f282 	clz	r2, r2
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f002 021f 	and.w	r2, r2, #31
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d180      	bne.n	8003992 <HAL_RCC_OscConfig+0xf1a>
 8003a90:	e027      	b.n	8003ae2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_OscConfig+0x1078>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ab2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b09e      	sub	sp, #120	; 0x78
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e162      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b90      	ldr	r3, [pc, #576]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b8d      	ldr	r3, [pc, #564]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	498b      	ldr	r1, [pc, #556]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e14a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b82      	ldr	r3, [pc, #520]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	497f      	ldr	r1, [pc, #508]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80dc 	beq.w	8003d20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d13c      	bne.n	8003bea <HAL_RCC_ClockConfig+0xf6>
 8003b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xa6>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	e00f      	b.n	8003bba <HAL_RCC_ClockConfig+0xc6>
 8003b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bac:	663b      	str	r3, [r7, #96]	; 0x60
 8003bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc2:	fa92 f2a2 	rbit	r2, r2
 8003bc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bca:	fab2 f282 	clz	r2, r2
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f042 0220 	orr.w	r2, r2, #32
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f002 021f 	and.w	r2, r2, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d17b      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f3      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d13c      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x178>
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x128>
 8003c16:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	e00f      	b.n	8003c3c <HAL_RCC_ClockConfig+0x148>
 8003c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c38:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	f042 0220 	orr.w	r2, r2, #32
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13a      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b2      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x1a0>
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1bc>
 8003c94:	2302      	movs	r3, #2
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	61ba      	str	r2, [r7, #24]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	617a      	str	r2, [r7, #20]
  return result;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fab2 f282 	clz	r2, r2
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f042 0220 	orr.w	r2, r2, #32
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e079      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	491a      	ldr	r1, [pc, #104]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd fd92 	bl	8001818 <HAL_GetTick>
 8003cf4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf8:	f7fd fd8e 	bl	8001818 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e061      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 020c 	and.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1eb      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d214      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	4906      	ldr	r1, [pc, #24]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e040      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	491a      	ldr	r1, [pc, #104]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d96:	f000 f829 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	22f0      	movs	r2, #240	; 0xf0
 8003da6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	fa92 f2a2 	rbit	r2, r2
 8003dae:	60fa      	str	r2, [r7, #12]
  return result;
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	40d3      	lsrs	r3, r2
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x2ec>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_RCC_ClockConfig+0x2f0>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_RCC_ClockConfig+0x2f4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fce0 	bl	8001790 <HAL_InitTick>
  
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3778      	adds	r7, #120	; 0x78
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08008418 	.word	0x08008418
 8003de4:	20000000 	.word	0x20000000
 8003de8:	20000004 	.word	0x20000004

08003dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b08b      	sub	sp, #44	; 0x2c
 8003df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x30>
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x36>
 8003e1a:	e03c      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e1e:	623b      	str	r3, [r7, #32]
      break;
 8003e20:	e03c      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	fa92 f2a2 	rbit	r2, r2
 8003e34:	607a      	str	r2, [r7, #4]
  return result;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	fab2 f282 	clz	r2, r2
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	40d3      	lsrs	r3, r2
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	220f      	movs	r2, #15
 8003e50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	fa92 f2a2 	rbit	r2, r2
 8003e58:	60fa      	str	r2, [r7, #12]
  return result;
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	40d3      	lsrs	r3, r2
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e74:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	623b      	str	r3, [r7, #32]
      break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e98:	623b      	str	r3, [r7, #32]
      break;
 8003e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	372c      	adds	r7, #44	; 0x2c
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	007a1200 	.word	0x007a1200
 8003eb4:	08008428 	.word	0x08008428
 8003eb8:	08008438 	.word	0x08008438
 8003ebc:	003d0900 	.word	0x003d0900

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b092      	sub	sp, #72	; 0x48
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80cd 	beq.w	800407e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee4:	4b8e      	ldr	r3, [pc, #568]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	4a8a      	ldr	r2, [pc, #552]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	61d3      	str	r3, [r2, #28]
 8003efc:	4b88      	ldr	r3, [pc, #544]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d118      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	4b82      	ldr	r3, [pc, #520]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a81      	ldr	r2, [pc, #516]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f26:	f7fd fc77 	bl	8001818 <HAL_GetTick>
 8003f2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fd fc73 	bl	8001818 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0ea      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	4b78      	ldr	r3, [pc, #480]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4c:	4b74      	ldr	r3, [pc, #464]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d07d      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d076      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	461a      	mov	r2, r3
 8003f94:	2301      	movs	r3, #1
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fbc:	4a58      	ldr	r2, [pc, #352]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d045      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fc24 	bl	8001818 <HAL_GetTick>
 8003fd0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fc20 	bl	8001818 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e095      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003fea:	2302      	movs	r3, #2
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	61fb      	str	r3, [r7, #28]
  return result;
 8004002:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d102      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	e007      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800401e:	2302      	movs	r3, #2
 8004020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2202      	movs	r2, #2
 8004030:	613a      	str	r2, [r7, #16]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	60fa      	str	r2, [r7, #12]
  return result;
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	fab2 f282 	clz	r2, r2
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f002 021f 	and.w	r2, r2, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f202 	lsl.w	r2, r1, r2
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0bd      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	492e      	ldr	r1, [pc, #184]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	4313      	orrs	r3, r2
 8004068:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800406a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800406e:	2b01      	cmp	r3, #1
 8004070:	d105      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004072:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800408a:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4922      	ldr	r1, [pc, #136]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004098:	4313      	orrs	r3, r2
 800409a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f023 0210 	bic.w	r2, r3, #16
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	491a      	ldr	r1, [pc, #104]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4913      	ldr	r1, [pc, #76]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	490b      	ldr	r1, [pc, #44]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	4313      	orrs	r3, r2
 8004112:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3748      	adds	r7, #72	; 0x48
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
 8004128:	10908100 	.word	0x10908100

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd f8fa 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fd76 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e038      	b.n	8004266 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_Base_Start+0x98>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_Base_Start+0x9c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_Base_Start+0x48>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_TIM_Base_Start+0xa0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d115      	bne.n	8004250 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_TIM_Base_Start+0xa4>)
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d015      	beq.n	8004262 <HAL_TIM_Base_Start+0x86>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d011      	beq.n	8004262 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e008      	b.n	8004262 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e000      	b.n	8004264 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40014000 	.word	0x40014000
 8004280:	00010007 	.word	0x00010007

08004284 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e049      	b.n	800432a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f841 	bl	8004332 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fcca 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e049      	b.n	80043ec <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f841 	bl	80043f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fc69 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e041      	b.n	80044a0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f839 	bl	80044a8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 fc07 	bl	8004c5c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0208 	bic.w	r2, r2, #8
 800445c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d108      	bne.n	80044fe <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ec:	7bbb      	ldrb	r3, [r7, #14]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044f2:	7b7b      	ldrb	r3, [r7, #13]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f8:	7b3b      	ldrb	r3, [r7, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03f      	b.n	8004582 <HAL_TIM_OnePulse_Start+0xc6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f8f4 	bl	8005718 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	2104      	movs	r1, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f8ed 	bl	8005718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_TIM_OnePulse_Start+0xd0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_TIM_OnePulse_Start+0xaa>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_TIM_OnePulse_Start+0xd4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_TIM_OnePulse_Start+0xaa>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <HAL_TIM_OnePulse_Start+0xd8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_TIM_OnePulse_Start+0xaa>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <HAL_TIM_OnePulse_Start+0xdc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_TIM_OnePulse_Start+0xae>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_TIM_OnePulse_Start+0xb0>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <HAL_TIM_OnePulse_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800

0800459c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d122      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d11b      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0202 	mvn.w	r2, #2
 80045c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fe02 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb19 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb20 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d122      	bne.n	800464c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0204 	mvn.w	r2, #4
 800461c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc fdd8 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 faef 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 faf6 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b08      	cmp	r3, #8
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0208 	mvn.w	r2, #8
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2204      	movs	r2, #4
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fdae 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fac5 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 facc 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0210 	mvn.w	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2208      	movs	r2, #8
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fd84 	bl	80011e8 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa9b 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 faa2 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0201 	mvn.w	r2, #1
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fd76 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d10e      	bne.n	800474c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d107      	bne.n	800474c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 f8fc 	bl	8005944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d10e      	bne.n	800477a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b80      	cmp	r3, #128	; 0x80
 8004768:	d107      	bne.n	800477a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 f8ef 	bl	8005958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800479e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fa50 	bl	8004c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d10e      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d107      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0220 	mvn.w	r2, #32
 80047ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 f8af 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e066      	b.n	80048c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b14      	cmp	r3, #20
 8004806:	d857      	bhi.n	80048b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004808:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <HAL_TIM_OC_ConfigChannel+0x34>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004865 	.word	0x08004865
 8004814:	080048b9 	.word	0x080048b9
 8004818:	080048b9 	.word	0x080048b9
 800481c:	080048b9 	.word	0x080048b9
 8004820:	08004873 	.word	0x08004873
 8004824:	080048b9 	.word	0x080048b9
 8004828:	080048b9 	.word	0x080048b9
 800482c:	080048b9 	.word	0x080048b9
 8004830:	08004881 	.word	0x08004881
 8004834:	080048b9 	.word	0x080048b9
 8004838:	080048b9 	.word	0x080048b9
 800483c:	080048b9 	.word	0x080048b9
 8004840:	0800488f 	.word	0x0800488f
 8004844:	080048b9 	.word	0x080048b9
 8004848:	080048b9 	.word	0x080048b9
 800484c:	080048b9 	.word	0x080048b9
 8004850:	0800489d 	.word	0x0800489d
 8004854:	080048b9 	.word	0x080048b9
 8004858:	080048b9 	.word	0x080048b9
 800485c:	080048b9 	.word	0x080048b9
 8004860:	080048ab 	.word	0x080048ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fa6e 	bl	8004d4c <TIM_OC1_SetConfig>
      break;
 8004870:	e025      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 faed 	bl	8004e58 <TIM_OC2_SetConfig>
      break;
 800487e:	e01e      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fb66 	bl	8004f58 <TIM_OC3_SetConfig>
      break;
 800488c:	e017      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fbdd 	bl	8005054 <TIM_OC4_SetConfig>
      break;
 800489a:	e010      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fc3a 	bl	800511c <TIM_OC5_SetConfig>
      break;
 80048a8:	e009      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fc91 	bl	80051d8 <TIM_OC6_SetConfig>
      break;
 80048b6:	e002      	b.n	80048be <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      break;
 80048bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e088      	b.n	8004a00 <HAL_TIM_IC_ConfigChannel+0x130>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f000 fd58 	bl	80053c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020c 	bic.w	r2, r2, #12
 800491e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	619a      	str	r2, [r3, #24]
 8004932:	e060      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d11c      	bne.n	8004974 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f000 fdc4 	bl	80054d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800495c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	e040      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f000 fe11 	bl	80055b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 020c 	bic.w	r2, r2, #12
 800499c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
 80049b0:	e021      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d11c      	bne.n	80049f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f000 fe2e 	bl	8005628 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69d9      	ldr	r1, [r3, #28]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	61da      	str	r2, [r3, #28]
 80049f0:	e001      	b.n	80049f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0b6      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x18a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd8>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	f000 8086 	beq.w	8004b7e <HAL_TIM_ConfigClockSource+0x176>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xaa>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x11e>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xfe>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x13e>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 fe09 	bl	80056d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04f      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fdf2 	bl	80056d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fcb0 	bl	8005478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	; 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fdbf 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fd0c 	bl	8005550 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	; 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fdaf 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fc90 	bl	8005478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fd9f 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fd96 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e031      	b.n	8004c16 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb67 	bl	8005298 <TIM_SlaveTimer_SetConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e018      	b.n	8004c16 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c02:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <TIM_Base_SetConfig+0xdc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_Base_SetConfig+0x28>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0x28>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <TIM_Base_SetConfig+0xe0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d108      	bne.n	8004c96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <TIM_Base_SetConfig+0xdc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <TIM_Base_SetConfig+0x6a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_Base_SetConfig+0x6a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <TIM_Base_SetConfig+0xe0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_Base_SetConfig+0x6a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_Base_SetConfig+0xe4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0x6a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <TIM_Base_SetConfig+0xe8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x6a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_Base_SetConfig+0xec>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <TIM_Base_SetConfig+0xdc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0xc0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0xc0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <TIM_Base_SetConfig+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0xc0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <TIM_Base_SetConfig+0xec>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	615a      	str	r2, [r3, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <TIM_OC1_SetConfig+0xfc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x78>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <TIM_OC1_SetConfig+0x100>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x78>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <TIM_OC1_SetConfig+0x104>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x78>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a25      	ldr	r2, [pc, #148]	; (8004e54 <TIM_OC1_SetConfig+0x108>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <TIM_OC1_SetConfig+0xfc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <TIM_OC1_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <TIM_OC1_SetConfig+0x100>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d007      	beq.n	8004dfe <TIM_OC1_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <TIM_OC1_SetConfig+0x104>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_OC1_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <TIM_OC1_SetConfig+0x108>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d111      	bne.n	8004e22 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	621a      	str	r2, [r3, #32]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800

08004e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0210 	bic.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <TIM_OC2_SetConfig+0xf0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10d      	bne.n	8004ed8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <TIM_OC2_SetConfig+0xf0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_OC2_SetConfig+0xa0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <TIM_OC2_SetConfig+0xf4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_OC2_SetConfig+0xa0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a19      	ldr	r2, [pc, #100]	; (8004f50 <TIM_OC2_SetConfig+0xf8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC2_SetConfig+0xa0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <TIM_OC2_SetConfig+0xfc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d113      	bne.n	8004f20 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f06:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_OC3_SetConfig+0xec>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10d      	bne.n	8004fd6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <TIM_OC3_SetConfig+0xec>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x9e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <TIM_OC3_SetConfig+0xf0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x9e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <TIM_OC3_SetConfig+0xf4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC3_SetConfig+0x9e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a17      	ldr	r2, [pc, #92]	; (8005050 <TIM_OC3_SetConfig+0xf8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d113      	bne.n	800501e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	031b      	lsls	r3, r3, #12
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a16      	ldr	r2, [pc, #88]	; (800510c <TIM_OC4_SetConfig+0xb8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_OC4_SetConfig+0x7c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <TIM_OC4_SetConfig+0xbc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_OC4_SetConfig+0x7c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a14      	ldr	r2, [pc, #80]	; (8005114 <TIM_OC4_SetConfig+0xc0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC4_SetConfig+0x7c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <TIM_OC4_SetConfig+0xc4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC5_SetConfig+0xac>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_OC5_SetConfig+0x72>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TIM_OC5_SetConfig+0xb0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC5_SetConfig+0x72>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <TIM_OC5_SetConfig+0xb4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC5_SetConfig+0x72>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <TIM_OC5_SetConfig+0xb8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d109      	bne.n	80051a2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800521e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	051b      	lsls	r3, r3, #20
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a16      	ldr	r2, [pc, #88]	; (8005288 <TIM_OC6_SetConfig+0xb0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC6_SetConfig+0x74>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <TIM_OC6_SetConfig+0xb4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC6_SetConfig+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <TIM_OC6_SetConfig+0xb8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC6_SetConfig+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <TIM_OC6_SetConfig+0xbc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d109      	bne.n	8005260 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b70      	cmp	r3, #112	; 0x70
 80052e4:	d01a      	beq.n	800531c <TIM_SlaveTimer_SetConfig+0x84>
 80052e6:	2b70      	cmp	r3, #112	; 0x70
 80052e8:	d860      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 80052ea:	2b60      	cmp	r3, #96	; 0x60
 80052ec:	d054      	beq.n	8005398 <TIM_SlaveTimer_SetConfig+0x100>
 80052ee:	2b60      	cmp	r3, #96	; 0x60
 80052f0:	d85c      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 80052f2:	2b50      	cmp	r3, #80	; 0x50
 80052f4:	d046      	beq.n	8005384 <TIM_SlaveTimer_SetConfig+0xec>
 80052f6:	2b50      	cmp	r3, #80	; 0x50
 80052f8:	d858      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d019      	beq.n	8005332 <TIM_SlaveTimer_SetConfig+0x9a>
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d854      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 8005302:	2b30      	cmp	r3, #48	; 0x30
 8005304:	d055      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005306:	2b30      	cmp	r3, #48	; 0x30
 8005308:	d850      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 800530a:	2b20      	cmp	r3, #32
 800530c:	d051      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x11a>
 800530e:	2b20      	cmp	r3, #32
 8005310:	d84c      	bhi.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d04d      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d04b      	beq.n	80053b2 <TIM_SlaveTimer_SetConfig+0x11a>
 800531a:	e047      	b.n	80053ac <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68d9      	ldr	r1, [r3, #12]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f000 f9d4 	bl	80056d8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005330:	e040      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b05      	cmp	r3, #5
 8005338:	d101      	bne.n	800533e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e03b      	b.n	80053b6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005364:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
      break;
 8005382:	e017      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	461a      	mov	r2, r3
 8005392:	f000 f871 	bl	8005478 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005396:	e00d      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	461a      	mov	r2, r3
 80053a6:	f000 f8d3 	bl	8005550 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80053aa:	e003      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
      break;
 80053b0:	e000      	b.n	80053b4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80053b2:	bf00      	nop
  }

  return status;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a20      	ldr	r2, [pc, #128]	; (800546c <TIM_TI1_SetConfig+0xac>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_TI1_SetConfig+0x46>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f4:	d007      	beq.n	8005406 <TIM_TI1_SetConfig+0x46>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_TI1_SetConfig+0xb0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_TI1_SetConfig+0x46>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <TIM_TI1_SetConfig+0xb4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <TIM_TI1_SetConfig+0x4a>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <TIM_TI1_SetConfig+0x4c>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e003      	b.n	800542a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	b2db      	uxtb	r3, r3
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f023 030a 	bic.w	r3, r3, #10
 8005444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 030a 	and.w	r3, r3, #10
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40000400 	.word	0x40000400
 8005474:	40014000 	.word	0x40014000

08005478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f023 0201 	bic.w	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 030a 	bic.w	r3, r3, #10
 80054b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0210 	bic.w	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	b29b      	uxth	r3, r3
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005528:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 0210 	bic.w	r2, r3, #16
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	031b      	lsls	r3, r3, #12
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 0303 	bic.w	r3, r3, #3
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005600:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005666:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	031b      	lsls	r3, r3, #12
 800566c:	b29b      	uxth	r3, r3
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800567a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	031b      	lsls	r3, r3, #12
 8005680:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f043 0307 	orr.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	43db      	mvns	r3, r3
 800573a:	401a      	ands	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e054      	b.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00e      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d009      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d004      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a11      	ldr	r2, [pc, #68]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10c      	bne.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	4313      	orrs	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e060      	b.n	800591e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a14      	ldr	r2, [pc, #80]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d115      	bne.n	800590c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	051b      	lsls	r3, r3, #20
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <__errno>:
 800596c:	4b01      	ldr	r3, [pc, #4]	; (8005974 <__errno+0x8>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000000c 	.word	0x2000000c

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	4d0d      	ldr	r5, [pc, #52]	; (80059b0 <__libc_init_array+0x38>)
 800597c:	4c0d      	ldr	r4, [pc, #52]	; (80059b4 <__libc_init_array+0x3c>)
 800597e:	1b64      	subs	r4, r4, r5
 8005980:	10a4      	asrs	r4, r4, #2
 8005982:	2600      	movs	r6, #0
 8005984:	42a6      	cmp	r6, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	4d0b      	ldr	r5, [pc, #44]	; (80059b8 <__libc_init_array+0x40>)
 800598a:	4c0c      	ldr	r4, [pc, #48]	; (80059bc <__libc_init_array+0x44>)
 800598c:	f002 fd38 	bl	8008400 <_init>
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	2600      	movs	r6, #0
 8005996:	42a6      	cmp	r6, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a0:	4798      	blx	r3
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	4798      	blx	r3
 80059ac:	3601      	adds	r6, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	08008824 	.word	0x08008824
 80059b4:	08008824 	.word	0x08008824
 80059b8:	08008824 	.word	0x08008824
 80059bc:	08008828 	.word	0x08008828

080059c0 <memset>:
 80059c0:	4402      	add	r2, r0
 80059c2:	4603      	mov	r3, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <__cvt>:
 80059d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	ec55 4b10 	vmov	r4, r5, d0
 80059d8:	2d00      	cmp	r5, #0
 80059da:	460e      	mov	r6, r1
 80059dc:	4619      	mov	r1, r3
 80059de:	462b      	mov	r3, r5
 80059e0:	bfbb      	ittet	lt
 80059e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059e6:	461d      	movlt	r5, r3
 80059e8:	2300      	movge	r3, #0
 80059ea:	232d      	movlt	r3, #45	; 0x2d
 80059ec:	700b      	strb	r3, [r1, #0]
 80059ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059f4:	4691      	mov	r9, r2
 80059f6:	f023 0820 	bic.w	r8, r3, #32
 80059fa:	bfbc      	itt	lt
 80059fc:	4622      	movlt	r2, r4
 80059fe:	4614      	movlt	r4, r2
 8005a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a04:	d005      	beq.n	8005a12 <__cvt+0x42>
 8005a06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a0a:	d100      	bne.n	8005a0e <__cvt+0x3e>
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	2102      	movs	r1, #2
 8005a10:	e000      	b.n	8005a14 <__cvt+0x44>
 8005a12:	2103      	movs	r1, #3
 8005a14:	ab03      	add	r3, sp, #12
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	ab02      	add	r3, sp, #8
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	ec45 4b10 	vmov	d0, r4, r5
 8005a20:	4653      	mov	r3, sl
 8005a22:	4632      	mov	r2, r6
 8005a24:	f000 fccc 	bl	80063c0 <_dtoa_r>
 8005a28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	d102      	bne.n	8005a36 <__cvt+0x66>
 8005a30:	f019 0f01 	tst.w	r9, #1
 8005a34:	d022      	beq.n	8005a7c <__cvt+0xac>
 8005a36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a3a:	eb07 0906 	add.w	r9, r7, r6
 8005a3e:	d110      	bne.n	8005a62 <__cvt+0x92>
 8005a40:	783b      	ldrb	r3, [r7, #0]
 8005a42:	2b30      	cmp	r3, #48	; 0x30
 8005a44:	d10a      	bne.n	8005a5c <__cvt+0x8c>
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fb f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a52:	b918      	cbnz	r0, 8005a5c <__cvt+0x8c>
 8005a54:	f1c6 0601 	rsb	r6, r6, #1
 8005a58:	f8ca 6000 	str.w	r6, [sl]
 8005a5c:	f8da 3000 	ldr.w	r3, [sl]
 8005a60:	4499      	add	r9, r3
 8005a62:	2200      	movs	r2, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fb f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a6e:	b108      	cbz	r0, 8005a74 <__cvt+0xa4>
 8005a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a74:	2230      	movs	r2, #48	; 0x30
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	454b      	cmp	r3, r9
 8005a7a:	d307      	bcc.n	8005a8c <__cvt+0xbc>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a80:	1bdb      	subs	r3, r3, r7
 8005a82:	4638      	mov	r0, r7
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	9103      	str	r1, [sp, #12]
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e7f0      	b.n	8005a76 <__cvt+0xa6>

08005a94 <__exponent>:
 8005a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a96:	4603      	mov	r3, r0
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	4249      	neglt	r1, r1
 8005a9e:	f803 2b02 	strb.w	r2, [r3], #2
 8005aa2:	bfb4      	ite	lt
 8005aa4:	222d      	movlt	r2, #45	; 0x2d
 8005aa6:	222b      	movge	r2, #43	; 0x2b
 8005aa8:	2909      	cmp	r1, #9
 8005aaa:	7042      	strb	r2, [r0, #1]
 8005aac:	dd2a      	ble.n	8005b04 <__exponent+0x70>
 8005aae:	f10d 0407 	add.w	r4, sp, #7
 8005ab2:	46a4      	mov	ip, r4
 8005ab4:	270a      	movs	r7, #10
 8005ab6:	46a6      	mov	lr, r4
 8005ab8:	460a      	mov	r2, r1
 8005aba:	fb91 f6f7 	sdiv	r6, r1, r7
 8005abe:	fb07 1516 	mls	r5, r7, r6, r1
 8005ac2:	3530      	adds	r5, #48	; 0x30
 8005ac4:	2a63      	cmp	r2, #99	; 0x63
 8005ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ace:	4631      	mov	r1, r6
 8005ad0:	dcf1      	bgt.n	8005ab6 <__exponent+0x22>
 8005ad2:	3130      	adds	r1, #48	; 0x30
 8005ad4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005adc:	1c44      	adds	r4, r0, #1
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4561      	cmp	r1, ip
 8005ae2:	d30a      	bcc.n	8005afa <__exponent+0x66>
 8005ae4:	f10d 0209 	add.w	r2, sp, #9
 8005ae8:	eba2 020e 	sub.w	r2, r2, lr
 8005aec:	4565      	cmp	r5, ip
 8005aee:	bf88      	it	hi
 8005af0:	2200      	movhi	r2, #0
 8005af2:	4413      	add	r3, r2
 8005af4:	1a18      	subs	r0, r3, r0
 8005af6:	b003      	add	sp, #12
 8005af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005afe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b02:	e7ed      	b.n	8005ae0 <__exponent+0x4c>
 8005b04:	2330      	movs	r3, #48	; 0x30
 8005b06:	3130      	adds	r1, #48	; 0x30
 8005b08:	7083      	strb	r3, [r0, #2]
 8005b0a:	70c1      	strb	r1, [r0, #3]
 8005b0c:	1d03      	adds	r3, r0, #4
 8005b0e:	e7f1      	b.n	8005af4 <__exponent+0x60>

08005b10 <_printf_float>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ed2d 8b02 	vpush	{d8}
 8005b18:	b08d      	sub	sp, #52	; 0x34
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b20:	4616      	mov	r6, r2
 8005b22:	461f      	mov	r7, r3
 8005b24:	4605      	mov	r5, r0
 8005b26:	f001 fa39 	bl	8006f9c <_localeconv_r>
 8005b2a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f7fa fb4e 	bl	80001d0 <strlen>
 8005b34:	2300      	movs	r3, #0
 8005b36:	930a      	str	r3, [sp, #40]	; 0x28
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b44:	3307      	adds	r3, #7
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	f103 0208 	add.w	r2, r3, #8
 8005b4e:	f8c8 2000 	str.w	r2, [r8]
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b68:	ee08 0a10 	vmov	s16, r0
 8005b6c:	4b9f      	ldr	r3, [pc, #636]	; (8005dec <_printf_float+0x2dc>)
 8005b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	f7fa ffd9 	bl	8000b2c <__aeabi_dcmpun>
 8005b7a:	bb88      	cbnz	r0, 8005be0 <_printf_float+0xd0>
 8005b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b80:	4b9a      	ldr	r3, [pc, #616]	; (8005dec <_printf_float+0x2dc>)
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	f7fa ffb3 	bl	8000af0 <__aeabi_dcmple>
 8005b8a:	bb48      	cbnz	r0, 8005be0 <_printf_float+0xd0>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4640      	mov	r0, r8
 8005b92:	4649      	mov	r1, r9
 8005b94:	f7fa ffa2 	bl	8000adc <__aeabi_dcmplt>
 8005b98:	b110      	cbz	r0, 8005ba0 <_printf_float+0x90>
 8005b9a:	232d      	movs	r3, #45	; 0x2d
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	4b93      	ldr	r3, [pc, #588]	; (8005df0 <_printf_float+0x2e0>)
 8005ba2:	4894      	ldr	r0, [pc, #592]	; (8005df4 <_printf_float+0x2e4>)
 8005ba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ba8:	bf94      	ite	ls
 8005baa:	4698      	movls	r8, r3
 8005bac:	4680      	movhi	r8, r0
 8005bae:	2303      	movs	r3, #3
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	f023 0204 	bic.w	r2, r3, #4
 8005bb8:	6022      	str	r2, [r4, #0]
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	9700      	str	r7, [sp, #0]
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f9d8 	bl	8005f7c <_printf_common>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f040 8090 	bne.w	8005cf2 <_printf_float+0x1e2>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	b00d      	add	sp, #52	; 0x34
 8005bd8:	ecbd 8b02 	vpop	{d8}
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa ffa0 	bl	8000b2c <__aeabi_dcmpun>
 8005bec:	b140      	cbz	r0, 8005c00 <_printf_float+0xf0>
 8005bee:	464b      	mov	r3, r9
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bfbc      	itt	lt
 8005bf4:	232d      	movlt	r3, #45	; 0x2d
 8005bf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bfa:	487f      	ldr	r0, [pc, #508]	; (8005df8 <_printf_float+0x2e8>)
 8005bfc:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <_printf_float+0x2ec>)
 8005bfe:	e7d1      	b.n	8005ba4 <_printf_float+0x94>
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c06:	9206      	str	r2, [sp, #24]
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	d13f      	bne.n	8005c8c <_printf_float+0x17c>
 8005c0c:	2306      	movs	r3, #6
 8005c0e:	6063      	str	r3, [r4, #4]
 8005c10:	9b05      	ldr	r3, [sp, #20]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9303      	str	r3, [sp, #12]
 8005c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c22:	ab09      	add	r3, sp, #36	; 0x24
 8005c24:	ec49 8b10 	vmov	d0, r8, r9
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fecd 	bl	80059d0 <__cvt>
 8005c36:	9b06      	ldr	r3, [sp, #24]
 8005c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c3a:	2b47      	cmp	r3, #71	; 0x47
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	d108      	bne.n	8005c52 <_printf_float+0x142>
 8005c40:	1cc8      	adds	r0, r1, #3
 8005c42:	db02      	blt.n	8005c4a <_printf_float+0x13a>
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	4299      	cmp	r1, r3
 8005c48:	dd41      	ble.n	8005cce <_printf_float+0x1be>
 8005c4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c4e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c56:	d820      	bhi.n	8005c9a <_printf_float+0x18a>
 8005c58:	3901      	subs	r1, #1
 8005c5a:	465a      	mov	r2, fp
 8005c5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c60:	9109      	str	r1, [sp, #36]	; 0x24
 8005c62:	f7ff ff17 	bl	8005a94 <__exponent>
 8005c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c68:	1813      	adds	r3, r2, r0
 8005c6a:	2a01      	cmp	r2, #1
 8005c6c:	4681      	mov	r9, r0
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	dc02      	bgt.n	8005c78 <_printf_float+0x168>
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	07d2      	lsls	r2, r2, #31
 8005c76:	d501      	bpl.n	8005c7c <_printf_float+0x16c>
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6123      	str	r3, [r4, #16]
 8005c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d09c      	beq.n	8005bbe <_printf_float+0xae>
 8005c84:	232d      	movs	r3, #45	; 0x2d
 8005c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8a:	e798      	b.n	8005bbe <_printf_float+0xae>
 8005c8c:	9a06      	ldr	r2, [sp, #24]
 8005c8e:	2a47      	cmp	r2, #71	; 0x47
 8005c90:	d1be      	bne.n	8005c10 <_printf_float+0x100>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1bc      	bne.n	8005c10 <_printf_float+0x100>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e7b9      	b.n	8005c0e <_printf_float+0xfe>
 8005c9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c9e:	d118      	bne.n	8005cd2 <_printf_float+0x1c2>
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	dd0b      	ble.n	8005cbe <_printf_float+0x1ae>
 8005ca6:	6121      	str	r1, [r4, #16]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_printf_float+0x1a0>
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	07d0      	lsls	r0, r2, #31
 8005cae:	d502      	bpl.n	8005cb6 <_printf_float+0x1a6>
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	440b      	add	r3, r1
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cb8:	f04f 0900 	mov.w	r9, #0
 8005cbc:	e7de      	b.n	8005c7c <_printf_float+0x16c>
 8005cbe:	b913      	cbnz	r3, 8005cc6 <_printf_float+0x1b6>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	07d2      	lsls	r2, r2, #31
 8005cc4:	d501      	bpl.n	8005cca <_printf_float+0x1ba>
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	e7f4      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7f2      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	db05      	blt.n	8005ce4 <_printf_float+0x1d4>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6121      	str	r1, [r4, #16]
 8005cdc:	07d8      	lsls	r0, r3, #31
 8005cde:	d5ea      	bpl.n	8005cb6 <_printf_float+0x1a6>
 8005ce0:	1c4b      	adds	r3, r1, #1
 8005ce2:	e7e7      	b.n	8005cb4 <_printf_float+0x1a4>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	bfd4      	ite	le
 8005ce8:	f1c1 0202 	rsble	r2, r1, #2
 8005cec:	2201      	movgt	r2, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	e7e0      	b.n	8005cb4 <_printf_float+0x1a4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	055a      	lsls	r2, r3, #21
 8005cf6:	d407      	bmi.n	8005d08 <_printf_float+0x1f8>
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	d12c      	bne.n	8005d60 <_printf_float+0x250>
 8005d06:	e764      	b.n	8005bd2 <_printf_float+0xc2>
 8005d08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d0c:	f240 80e0 	bls.w	8005ed0 <_printf_float+0x3c0>
 8005d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d034      	beq.n	8005d8a <_printf_float+0x27a>
 8005d20:	4a37      	ldr	r2, [pc, #220]	; (8005e00 <_printf_float+0x2f0>)
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af51 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	db02      	blt.n	8005d3e <_printf_float+0x22e>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07d8      	lsls	r0, r3, #31
 8005d3c:	d510      	bpl.n	8005d60 <_printf_float+0x250>
 8005d3e:	ee18 3a10 	vmov	r3, s16
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f af41 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d50:	f04f 0800 	mov.w	r8, #0
 8005d54:	f104 091a 	add.w	r9, r4, #26
 8005d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dc09      	bgt.n	8005d74 <_printf_float+0x264>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	f100 8105 	bmi.w	8005f72 <_printf_float+0x462>
 8005d68:	68e0      	ldr	r0, [r4, #12]
 8005d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d6c:	4298      	cmp	r0, r3
 8005d6e:	bfb8      	it	lt
 8005d70:	4618      	movlt	r0, r3
 8005d72:	e730      	b.n	8005bd6 <_printf_float+0xc6>
 8005d74:	2301      	movs	r3, #1
 8005d76:	464a      	mov	r2, r9
 8005d78:	4631      	mov	r1, r6
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f43f af27 	beq.w	8005bd2 <_printf_float+0xc2>
 8005d84:	f108 0801 	add.w	r8, r8, #1
 8005d88:	e7e6      	b.n	8005d58 <_printf_float+0x248>
 8005d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc39      	bgt.n	8005e04 <_printf_float+0x2f4>
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <_printf_float+0x2f0>)
 8005d92:	2301      	movs	r3, #1
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af19 	beq.w	8005bd2 <_printf_float+0xc2>
 8005da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d102      	bne.n	8005dae <_printf_float+0x29e>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d5d8      	bpl.n	8005d60 <_printf_float+0x250>
 8005dae:	ee18 3a10 	vmov	r3, s16
 8005db2:	4652      	mov	r2, sl
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af09 	beq.w	8005bd2 <_printf_float+0xc2>
 8005dc0:	f04f 0900 	mov.w	r9, #0
 8005dc4:	f104 0a1a 	add.w	sl, r4, #26
 8005dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dca:	425b      	negs	r3, r3
 8005dcc:	454b      	cmp	r3, r9
 8005dce:	dc01      	bgt.n	8005dd4 <_printf_float+0x2c4>
 8005dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd2:	e792      	b.n	8005cfa <_printf_float+0x1ea>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4652      	mov	r2, sl
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f aef7 	beq.w	8005bd2 <_printf_float+0xc2>
 8005de4:	f109 0901 	add.w	r9, r9, #1
 8005de8:	e7ee      	b.n	8005dc8 <_printf_float+0x2b8>
 8005dea:	bf00      	nop
 8005dec:	7fefffff 	.word	0x7fefffff
 8005df0:	0800844c 	.word	0x0800844c
 8005df4:	08008450 	.word	0x08008450
 8005df8:	08008458 	.word	0x08008458
 8005dfc:	08008454 	.word	0x08008454
 8005e00:	0800845c 	.word	0x0800845c
 8005e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	bfa8      	it	ge
 8005e0c:	461a      	movge	r2, r3
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	4691      	mov	r9, r2
 8005e12:	dc37      	bgt.n	8005e84 <_printf_float+0x374>
 8005e14:	f04f 0b00 	mov.w	fp, #0
 8005e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1c:	f104 021a 	add.w	r2, r4, #26
 8005e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	eba3 0309 	sub.w	r3, r3, r9
 8005e28:	455b      	cmp	r3, fp
 8005e2a:	dc33      	bgt.n	8005e94 <_printf_float+0x384>
 8005e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e30:	429a      	cmp	r2, r3
 8005e32:	db3b      	blt.n	8005eac <_printf_float+0x39c>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	07da      	lsls	r2, r3, #31
 8005e38:	d438      	bmi.n	8005eac <_printf_float+0x39c>
 8005e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3c:	9a05      	ldr	r2, [sp, #20]
 8005e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e40:	1a9a      	subs	r2, r3, r2
 8005e42:	eba3 0901 	sub.w	r9, r3, r1
 8005e46:	4591      	cmp	r9, r2
 8005e48:	bfa8      	it	ge
 8005e4a:	4691      	movge	r9, r2
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	dc35      	bgt.n	8005ebe <_printf_float+0x3ae>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e5a:	f104 0a1a 	add.w	sl, r4, #26
 8005e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	eba3 0309 	sub.w	r3, r3, r9
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	f77f af79 	ble.w	8005d60 <_printf_float+0x250>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f aeaa 	beq.w	8005bd2 <_printf_float+0xc2>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	e7ec      	b.n	8005e5e <_printf_float+0x34e>
 8005e84:	4613      	mov	r3, r2
 8005e86:	4631      	mov	r1, r6
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d1c0      	bne.n	8005e14 <_printf_float+0x304>
 8005e92:	e69e      	b.n	8005bd2 <_printf_float+0xc2>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	9205      	str	r2, [sp, #20]
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f ae97 	beq.w	8005bd2 <_printf_float+0xc2>
 8005ea4:	9a05      	ldr	r2, [sp, #20]
 8005ea6:	f10b 0b01 	add.w	fp, fp, #1
 8005eaa:	e7b9      	b.n	8005e20 <_printf_float+0x310>
 8005eac:	ee18 3a10 	vmov	r3, s16
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d1be      	bne.n	8005e3a <_printf_float+0x32a>
 8005ebc:	e689      	b.n	8005bd2 <_printf_float+0xc2>
 8005ebe:	9a05      	ldr	r2, [sp, #20]
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	4442      	add	r2, r8
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d1c1      	bne.n	8005e52 <_printf_float+0x342>
 8005ece:	e680      	b.n	8005bd2 <_printf_float+0xc2>
 8005ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed2:	2a01      	cmp	r2, #1
 8005ed4:	dc01      	bgt.n	8005eda <_printf_float+0x3ca>
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d538      	bpl.n	8005f4c <_printf_float+0x43c>
 8005eda:	2301      	movs	r3, #1
 8005edc:	4642      	mov	r2, r8
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f43f ae74 	beq.w	8005bd2 <_printf_float+0xc2>
 8005eea:	ee18 3a10 	vmov	r3, s16
 8005eee:	4652      	mov	r2, sl
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f ae6b 	beq.w	8005bd2 <_printf_float+0xc2>
 8005efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	f7fa fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f08:	b9d8      	cbnz	r0, 8005f42 <_printf_float+0x432>
 8005f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f0c:	f108 0201 	add.w	r2, r8, #1
 8005f10:	3b01      	subs	r3, #1
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d10e      	bne.n	8005f3a <_printf_float+0x42a>
 8005f1c:	e659      	b.n	8005bd2 <_printf_float+0xc2>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4652      	mov	r2, sl
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f ae52 	beq.w	8005bd2 <_printf_float+0xc2>
 8005f2e:	f108 0801 	add.w	r8, r8, #1
 8005f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4543      	cmp	r3, r8
 8005f38:	dcf1      	bgt.n	8005f1e <_printf_float+0x40e>
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f40:	e6dc      	b.n	8005cfc <_printf_float+0x1ec>
 8005f42:	f04f 0800 	mov.w	r8, #0
 8005f46:	f104 0a1a 	add.w	sl, r4, #26
 8005f4a:	e7f2      	b.n	8005f32 <_printf_float+0x422>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4642      	mov	r2, r8
 8005f50:	e7df      	b.n	8005f12 <_printf_float+0x402>
 8005f52:	2301      	movs	r3, #1
 8005f54:	464a      	mov	r2, r9
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	f43f ae38 	beq.w	8005bd2 <_printf_float+0xc2>
 8005f62:	f108 0801 	add.w	r8, r8, #1
 8005f66:	68e3      	ldr	r3, [r4, #12]
 8005f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f6a:	1a5b      	subs	r3, r3, r1
 8005f6c:	4543      	cmp	r3, r8
 8005f6e:	dcf0      	bgt.n	8005f52 <_printf_float+0x442>
 8005f70:	e6fa      	b.n	8005d68 <_printf_float+0x258>
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f104 0919 	add.w	r9, r4, #25
 8005f7a:	e7f4      	b.n	8005f66 <_printf_float+0x456>

08005f7c <_printf_common>:
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4616      	mov	r6, r2
 8005f82:	4699      	mov	r9, r3
 8005f84:	688a      	ldr	r2, [r1, #8]
 8005f86:	690b      	ldr	r3, [r1, #16]
 8005f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bfb8      	it	lt
 8005f90:	4613      	movlt	r3, r2
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f98:	4607      	mov	r7, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	b10a      	cbz	r2, 8005fa2 <_printf_common+0x26>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	0699      	lsls	r1, r3, #26
 8005fa6:	bf42      	ittt	mi
 8005fa8:	6833      	ldrmi	r3, [r6, #0]
 8005faa:	3302      	addmi	r3, #2
 8005fac:	6033      	strmi	r3, [r6, #0]
 8005fae:	6825      	ldr	r5, [r4, #0]
 8005fb0:	f015 0506 	ands.w	r5, r5, #6
 8005fb4:	d106      	bne.n	8005fc4 <_printf_common+0x48>
 8005fb6:	f104 0a19 	add.w	sl, r4, #25
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	6832      	ldr	r2, [r6, #0]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	42ab      	cmp	r3, r5
 8005fc2:	dc26      	bgt.n	8006012 <_printf_common+0x96>
 8005fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc8:	1e13      	subs	r3, r2, #0
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	bf18      	it	ne
 8005fce:	2301      	movne	r3, #1
 8005fd0:	0692      	lsls	r2, r2, #26
 8005fd2:	d42b      	bmi.n	800602c <_printf_common+0xb0>
 8005fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4638      	mov	r0, r7
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d01e      	beq.n	8006020 <_printf_common+0xa4>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	68e5      	ldr	r5, [r4, #12]
 8005fe6:	6832      	ldr	r2, [r6, #0]
 8005fe8:	f003 0306 	and.w	r3, r3, #6
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	bf08      	it	eq
 8005ff0:	1aad      	subeq	r5, r5, r2
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	bf0c      	ite	eq
 8005ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ffc:	2500      	movne	r5, #0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	bfc4      	itt	gt
 8006002:	1a9b      	subgt	r3, r3, r2
 8006004:	18ed      	addgt	r5, r5, r3
 8006006:	2600      	movs	r6, #0
 8006008:	341a      	adds	r4, #26
 800600a:	42b5      	cmp	r5, r6
 800600c:	d11a      	bne.n	8006044 <_printf_common+0xc8>
 800600e:	2000      	movs	r0, #0
 8006010:	e008      	b.n	8006024 <_printf_common+0xa8>
 8006012:	2301      	movs	r3, #1
 8006014:	4652      	mov	r2, sl
 8006016:	4649      	mov	r1, r9
 8006018:	4638      	mov	r0, r7
 800601a:	47c0      	blx	r8
 800601c:	3001      	adds	r0, #1
 800601e:	d103      	bne.n	8006028 <_printf_common+0xac>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	3501      	adds	r5, #1
 800602a:	e7c6      	b.n	8005fba <_printf_common+0x3e>
 800602c:	18e1      	adds	r1, r4, r3
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	2030      	movs	r0, #48	; 0x30
 8006032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006036:	4422      	add	r2, r4
 8006038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800603c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006040:	3302      	adds	r3, #2
 8006042:	e7c7      	b.n	8005fd4 <_printf_common+0x58>
 8006044:	2301      	movs	r3, #1
 8006046:	4622      	mov	r2, r4
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d0e6      	beq.n	8006020 <_printf_common+0xa4>
 8006052:	3601      	adds	r6, #1
 8006054:	e7d9      	b.n	800600a <_printf_common+0x8e>
	...

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006060:	2f78      	cmp	r7, #120	; 0x78
 8006062:	4691      	mov	r9, r2
 8006064:	4680      	mov	r8, r0
 8006066:	460c      	mov	r4, r1
 8006068:	469a      	mov	sl, r3
 800606a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	; 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d8 	beq.w	800622a <_printf_i+0x1d2>
 800607a:	2f58      	cmp	r7, #88	; 0x58
 800607c:	f000 80a3 	beq.w	80061c6 <_printf_i+0x16e>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	; (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006211 	.word	0x08006211
 80060c8:	08006135 	.word	0x08006135
 80060cc:	080061f3 	.word	0x080061f3
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006233 	.word	0x08006233
 80060dc:	08006081 	.word	0x08006081
 80060e0:	08006135 	.word	0x08006135
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061fb 	.word	0x080061fb
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	602a      	str	r2, [r5, #0]
 80060f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e0a3      	b.n	800624c <_printf_i+0x1f4>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	6829      	ldr	r1, [r5, #0]
 8006108:	0606      	lsls	r6, r0, #24
 800610a:	f101 0304 	add.w	r3, r1, #4
 800610e:	d50a      	bpl.n	8006126 <_printf_i+0xce>
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	2e00      	cmp	r6, #0
 8006116:	da03      	bge.n	8006120 <_printf_i+0xc8>
 8006118:	232d      	movs	r3, #45	; 0x2d
 800611a:	4276      	negs	r6, r6
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	485e      	ldr	r0, [pc, #376]	; (800629c <_printf_i+0x244>)
 8006122:	230a      	movs	r3, #10
 8006124:	e019      	b.n	800615a <_printf_i+0x102>
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800612e:	bf18      	it	ne
 8006130:	b236      	sxthne	r6, r6
 8006132:	e7ef      	b.n	8006114 <_printf_i+0xbc>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6029      	str	r1, [r5, #0]
 800613c:	0601      	lsls	r1, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xec>
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	e002      	b.n	800614a <_printf_i+0xf2>
 8006144:	0646      	lsls	r6, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xe8>
 8006148:	881e      	ldrh	r6, [r3, #0]
 800614a:	4854      	ldr	r0, [pc, #336]	; (800629c <_printf_i+0x244>)
 800614c:	2f6f      	cmp	r7, #111	; 0x6f
 800614e:	bf0c      	ite	eq
 8006150:	2308      	moveq	r3, #8
 8006152:	230a      	movne	r3, #10
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800615a:	6865      	ldr	r5, [r4, #4]
 800615c:	60a5      	str	r5, [r4, #8]
 800615e:	2d00      	cmp	r5, #0
 8006160:	bfa2      	ittt	ge
 8006162:	6821      	ldrge	r1, [r4, #0]
 8006164:	f021 0104 	bicge.w	r1, r1, #4
 8006168:	6021      	strge	r1, [r4, #0]
 800616a:	b90e      	cbnz	r6, 8006170 <_printf_i+0x118>
 800616c:	2d00      	cmp	r5, #0
 800616e:	d04d      	beq.n	800620c <_printf_i+0x1b4>
 8006170:	4615      	mov	r5, r2
 8006172:	fbb6 f1f3 	udiv	r1, r6, r3
 8006176:	fb03 6711 	mls	r7, r3, r1, r6
 800617a:	5dc7      	ldrb	r7, [r0, r7]
 800617c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006180:	4637      	mov	r7, r6
 8006182:	42bb      	cmp	r3, r7
 8006184:	460e      	mov	r6, r1
 8006186:	d9f4      	bls.n	8006172 <_printf_i+0x11a>
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10b      	bne.n	80061a4 <_printf_i+0x14c>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07de      	lsls	r6, r3, #31
 8006190:	d508      	bpl.n	80061a4 <_printf_i+0x14c>
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6861      	ldr	r1, [r4, #4]
 8006196:	4299      	cmp	r1, r3
 8006198:	bfde      	ittt	le
 800619a:	2330      	movle	r3, #48	; 0x30
 800619c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061a4:	1b52      	subs	r2, r2, r5
 80061a6:	6122      	str	r2, [r4, #16]
 80061a8:	f8cd a000 	str.w	sl, [sp]
 80061ac:	464b      	mov	r3, r9
 80061ae:	aa03      	add	r2, sp, #12
 80061b0:	4621      	mov	r1, r4
 80061b2:	4640      	mov	r0, r8
 80061b4:	f7ff fee2 	bl	8005f7c <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d14c      	bne.n	8006256 <_printf_i+0x1fe>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b004      	add	sp, #16
 80061c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c6:	4835      	ldr	r0, [pc, #212]	; (800629c <_printf_i+0x244>)
 80061c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061cc:	6829      	ldr	r1, [r5, #0]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061d4:	6029      	str	r1, [r5, #0]
 80061d6:	061d      	lsls	r5, r3, #24
 80061d8:	d514      	bpl.n	8006204 <_printf_i+0x1ac>
 80061da:	07df      	lsls	r7, r3, #31
 80061dc:	bf44      	itt	mi
 80061de:	f043 0320 	orrmi.w	r3, r3, #32
 80061e2:	6023      	strmi	r3, [r4, #0]
 80061e4:	b91e      	cbnz	r6, 80061ee <_printf_i+0x196>
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	f023 0320 	bic.w	r3, r3, #32
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	2310      	movs	r3, #16
 80061f0:	e7b0      	b.n	8006154 <_printf_i+0xfc>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	2378      	movs	r3, #120	; 0x78
 80061fc:	4828      	ldr	r0, [pc, #160]	; (80062a0 <_printf_i+0x248>)
 80061fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006202:	e7e3      	b.n	80061cc <_printf_i+0x174>
 8006204:	0659      	lsls	r1, r3, #25
 8006206:	bf48      	it	mi
 8006208:	b2b6      	uxthmi	r6, r6
 800620a:	e7e6      	b.n	80061da <_printf_i+0x182>
 800620c:	4615      	mov	r5, r2
 800620e:	e7bb      	b.n	8006188 <_printf_i+0x130>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	6826      	ldr	r6, [r4, #0]
 8006214:	6961      	ldr	r1, [r4, #20]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6028      	str	r0, [r5, #0]
 800621a:	0635      	lsls	r5, r6, #24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	d501      	bpl.n	8006224 <_printf_i+0x1cc>
 8006220:	6019      	str	r1, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0x1d2>
 8006224:	0670      	lsls	r0, r6, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0x1c8>
 8006228:	8019      	strh	r1, [r3, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	4615      	mov	r5, r2
 8006230:	e7ba      	b.n	80061a8 <_printf_i+0x150>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	2100      	movs	r1, #0
 800623e:	4628      	mov	r0, r5
 8006240:	f7f9 ffce 	bl	80001e0 <memchr>
 8006244:	b108      	cbz	r0, 800624a <_printf_i+0x1f2>
 8006246:	1b40      	subs	r0, r0, r5
 8006248:	6060      	str	r0, [r4, #4]
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006254:	e7a8      	b.n	80061a8 <_printf_i+0x150>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	462a      	mov	r2, r5
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d0ab      	beq.n	80061bc <_printf_i+0x164>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	079b      	lsls	r3, r3, #30
 8006268:	d413      	bmi.n	8006292 <_printf_i+0x23a>
 800626a:	68e0      	ldr	r0, [r4, #12]
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	4298      	cmp	r0, r3
 8006270:	bfb8      	it	lt
 8006272:	4618      	movlt	r0, r3
 8006274:	e7a4      	b.n	80061c0 <_printf_i+0x168>
 8006276:	2301      	movs	r3, #1
 8006278:	4632      	mov	r2, r6
 800627a:	4649      	mov	r1, r9
 800627c:	4640      	mov	r0, r8
 800627e:	47d0      	blx	sl
 8006280:	3001      	adds	r0, #1
 8006282:	d09b      	beq.n	80061bc <_printf_i+0x164>
 8006284:	3501      	adds	r5, #1
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	1a5b      	subs	r3, r3, r1
 800628c:	42ab      	cmp	r3, r5
 800628e:	dcf2      	bgt.n	8006276 <_printf_i+0x21e>
 8006290:	e7eb      	b.n	800626a <_printf_i+0x212>
 8006292:	2500      	movs	r5, #0
 8006294:	f104 0619 	add.w	r6, r4, #25
 8006298:	e7f5      	b.n	8006286 <_printf_i+0x22e>
 800629a:	bf00      	nop
 800629c:	0800845e 	.word	0x0800845e
 80062a0:	0800846f 	.word	0x0800846f

080062a4 <quorem>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	6903      	ldr	r3, [r0, #16]
 80062aa:	690c      	ldr	r4, [r1, #16]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	4607      	mov	r7, r0
 80062b0:	f2c0 8081 	blt.w	80063b6 <quorem+0x112>
 80062b4:	3c01      	subs	r4, #1
 80062b6:	f101 0814 	add.w	r8, r1, #20
 80062ba:	f100 0514 	add.w	r5, r0, #20
 80062be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062cc:	3301      	adds	r3, #1
 80062ce:	429a      	cmp	r2, r3
 80062d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062dc:	d331      	bcc.n	8006342 <quorem+0x9e>
 80062de:	f04f 0e00 	mov.w	lr, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	46ac      	mov	ip, r5
 80062e6:	46f2      	mov	sl, lr
 80062e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ec:	b293      	uxth	r3, r2
 80062ee:	fb06 e303 	mla	r3, r6, r3, lr
 80062f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ebaa 0303 	sub.w	r3, sl, r3
 80062fc:	f8dc a000 	ldr.w	sl, [ip]
 8006300:	0c12      	lsrs	r2, r2, #16
 8006302:	fa13 f38a 	uxtah	r3, r3, sl
 8006306:	fb06 e202 	mla	r2, r6, r2, lr
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006312:	b292      	uxth	r2, r2
 8006314:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800631c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006320:	4581      	cmp	r9, r0
 8006322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006326:	f84c 3b04 	str.w	r3, [ip], #4
 800632a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800632e:	d2db      	bcs.n	80062e8 <quorem+0x44>
 8006330:	f855 300b 	ldr.w	r3, [r5, fp]
 8006334:	b92b      	cbnz	r3, 8006342 <quorem+0x9e>
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	3b04      	subs	r3, #4
 800633a:	429d      	cmp	r5, r3
 800633c:	461a      	mov	r2, r3
 800633e:	d32e      	bcc.n	800639e <quorem+0xfa>
 8006340:	613c      	str	r4, [r7, #16]
 8006342:	4638      	mov	r0, r7
 8006344:	f001 f8c6 	bl	80074d4 <__mcmp>
 8006348:	2800      	cmp	r0, #0
 800634a:	db24      	blt.n	8006396 <quorem+0xf2>
 800634c:	3601      	adds	r6, #1
 800634e:	4628      	mov	r0, r5
 8006350:	f04f 0c00 	mov.w	ip, #0
 8006354:	f858 2b04 	ldr.w	r2, [r8], #4
 8006358:	f8d0 e000 	ldr.w	lr, [r0]
 800635c:	b293      	uxth	r3, r2
 800635e:	ebac 0303 	sub.w	r3, ip, r3
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	fa13 f38e 	uxtah	r3, r3, lr
 8006368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800636c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006376:	45c1      	cmp	r9, r8
 8006378:	f840 3b04 	str.w	r3, [r0], #4
 800637c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006380:	d2e8      	bcs.n	8006354 <quorem+0xb0>
 8006382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800638a:	b922      	cbnz	r2, 8006396 <quorem+0xf2>
 800638c:	3b04      	subs	r3, #4
 800638e:	429d      	cmp	r5, r3
 8006390:	461a      	mov	r2, r3
 8006392:	d30a      	bcc.n	80063aa <quorem+0x106>
 8006394:	613c      	str	r4, [r7, #16]
 8006396:	4630      	mov	r0, r6
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1cc      	bne.n	8006340 <quorem+0x9c>
 80063a6:	3c01      	subs	r4, #1
 80063a8:	e7c7      	b.n	800633a <quorem+0x96>
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1f0      	bne.n	8006394 <quorem+0xf0>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7eb      	b.n	800638e <quorem+0xea>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e7ee      	b.n	8006398 <quorem+0xf4>
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ed2d 8b04 	vpush	{d8-d9}
 80063c8:	ec57 6b10 	vmov	r6, r7, d0
 80063cc:	b093      	sub	sp, #76	; 0x4c
 80063ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063d4:	9106      	str	r1, [sp, #24]
 80063d6:	ee10 aa10 	vmov	sl, s0
 80063da:	4604      	mov	r4, r0
 80063dc:	9209      	str	r2, [sp, #36]	; 0x24
 80063de:	930c      	str	r3, [sp, #48]	; 0x30
 80063e0:	46bb      	mov	fp, r7
 80063e2:	b975      	cbnz	r5, 8006402 <_dtoa_r+0x42>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f000 fddd 	bl	8006fa4 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6260      	str	r0, [r4, #36]	; 0x24
 80063ee:	b920      	cbnz	r0, 80063fa <_dtoa_r+0x3a>
 80063f0:	4ba7      	ldr	r3, [pc, #668]	; (8006690 <_dtoa_r+0x2d0>)
 80063f2:	21ea      	movs	r1, #234	; 0xea
 80063f4:	48a7      	ldr	r0, [pc, #668]	; (8006694 <_dtoa_r+0x2d4>)
 80063f6:	f001 fa75 	bl	80078e4 <__assert_func>
 80063fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063fe:	6005      	str	r5, [r0, #0]
 8006400:	60c5      	str	r5, [r0, #12]
 8006402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	b151      	cbz	r1, 800641e <_dtoa_r+0x5e>
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	604a      	str	r2, [r1, #4]
 800640c:	2301      	movs	r3, #1
 800640e:	4093      	lsls	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fe1c 	bl	8007050 <_Bfree>
 8006418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	1e3b      	subs	r3, r7, #0
 8006420:	bfaa      	itet	ge
 8006422:	2300      	movge	r3, #0
 8006424:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006428:	f8c8 3000 	strge.w	r3, [r8]
 800642c:	4b9a      	ldr	r3, [pc, #616]	; (8006698 <_dtoa_r+0x2d8>)
 800642e:	bfbc      	itt	lt
 8006430:	2201      	movlt	r2, #1
 8006432:	f8c8 2000 	strlt.w	r2, [r8]
 8006436:	ea33 030b 	bics.w	r3, r3, fp
 800643a:	d11b      	bne.n	8006474 <_dtoa_r+0xb4>
 800643c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006448:	4333      	orrs	r3, r6
 800644a:	f000 8592 	beq.w	8006f72 <_dtoa_r+0xbb2>
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	b963      	cbnz	r3, 800646c <_dtoa_r+0xac>
 8006452:	4b92      	ldr	r3, [pc, #584]	; (800669c <_dtoa_r+0x2dc>)
 8006454:	e022      	b.n	800649c <_dtoa_r+0xdc>
 8006456:	4b92      	ldr	r3, [pc, #584]	; (80066a0 <_dtoa_r+0x2e0>)
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	3308      	adds	r3, #8
 800645c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	b013      	add	sp, #76	; 0x4c
 8006464:	ecbd 8b04 	vpop	{d8-d9}
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	4b8b      	ldr	r3, [pc, #556]	; (800669c <_dtoa_r+0x2dc>)
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	3303      	adds	r3, #3
 8006472:	e7f3      	b.n	800645c <_dtoa_r+0x9c>
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	f7fa fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006480:	ec4b ab19 	vmov	d9, sl, fp
 8006484:	4680      	mov	r8, r0
 8006486:	b158      	cbz	r0, 80064a0 <_dtoa_r+0xe0>
 8006488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 856b 	beq.w	8006f6c <_dtoa_r+0xbac>
 8006496:	4883      	ldr	r0, [pc, #524]	; (80066a4 <_dtoa_r+0x2e4>)
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	1e43      	subs	r3, r0, #1
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	e7df      	b.n	8006460 <_dtoa_r+0xa0>
 80064a0:	ec4b ab10 	vmov	d0, sl, fp
 80064a4:	aa10      	add	r2, sp, #64	; 0x40
 80064a6:	a911      	add	r1, sp, #68	; 0x44
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 f8b9 	bl	8007620 <__d2b>
 80064ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064b2:	ee08 0a10 	vmov	s16, r0
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	f000 8084 	beq.w	80065c4 <_dtoa_r+0x204>
 80064bc:	ee19 3a90 	vmov	r3, s19
 80064c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064c8:	4656      	mov	r6, sl
 80064ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064d6:	4b74      	ldr	r3, [pc, #464]	; (80066a8 <_dtoa_r+0x2e8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	a365      	add	r3, pc, #404	; (adr r3, 8006678 <_dtoa_r+0x2b8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	a364      	add	r3, pc, #400	; (adr r3, 8006680 <_dtoa_r+0x2c0>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4606      	mov	r6, r0
 80064f8:	4628      	mov	r0, r5
 80064fa:	460f      	mov	r7, r1
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	a361      	add	r3, pc, #388	; (adr r3, 8006688 <_dtoa_r+0x2c8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa f877 	bl	80005f8 <__aeabi_dmul>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 febb 	bl	800028c <__adddf3>
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	f7fa fb1d 	bl	8000b58 <__aeabi_d2iz>
 800651e:	2200      	movs	r2, #0
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	b150      	cbz	r0, 8006544 <_dtoa_r+0x184>
 800652e:	9800      	ldr	r0, [sp, #0]
 8006530:	f7f9 fff8 	bl	8000524 <__aeabi_i2d>
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	f7fa fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800653c:	b910      	cbnz	r0, 8006544 <_dtoa_r+0x184>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	2b16      	cmp	r3, #22
 8006548:	d85a      	bhi.n	8006600 <_dtoa_r+0x240>
 800654a:	9a00      	ldr	r2, [sp, #0]
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <_dtoa_r+0x2ec>)
 800654e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	ec51 0b19 	vmov	r0, r1, d9
 800655a:	f7fa fabf 	bl	8000adc <__aeabi_dcmplt>
 800655e:	2800      	cmp	r0, #0
 8006560:	d050      	beq.n	8006604 <_dtoa_r+0x244>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	930b      	str	r3, [sp, #44]	; 0x2c
 800656c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800656e:	1b5d      	subs	r5, r3, r5
 8006570:	1e6b      	subs	r3, r5, #1
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	bf45      	ittet	mi
 8006576:	f1c5 0301 	rsbmi	r3, r5, #1
 800657a:	9304      	strmi	r3, [sp, #16]
 800657c:	2300      	movpl	r3, #0
 800657e:	2300      	movmi	r3, #0
 8006580:	bf4c      	ite	mi
 8006582:	9305      	strmi	r3, [sp, #20]
 8006584:	9304      	strpl	r3, [sp, #16]
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db3d      	blt.n	8006608 <_dtoa_r+0x248>
 800658c:	9b05      	ldr	r3, [sp, #20]
 800658e:	9a00      	ldr	r2, [sp, #0]
 8006590:	920a      	str	r2, [sp, #40]	; 0x28
 8006592:	4413      	add	r3, r2
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	2300      	movs	r3, #0
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	2b09      	cmp	r3, #9
 800659e:	f200 8089 	bhi.w	80066b4 <_dtoa_r+0x2f4>
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	bfc4      	itt	gt
 80065a6:	3b04      	subgt	r3, #4
 80065a8:	9306      	strgt	r3, [sp, #24]
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	f1a3 0302 	sub.w	r3, r3, #2
 80065b0:	bfcc      	ite	gt
 80065b2:	2500      	movgt	r5, #0
 80065b4:	2501      	movle	r5, #1
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	f200 8087 	bhi.w	80066ca <_dtoa_r+0x30a>
 80065bc:	e8df f003 	tbb	[pc, r3]
 80065c0:	59383a2d 	.word	0x59383a2d
 80065c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065c8:	441d      	add	r5, r3
 80065ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	bfc1      	itttt	gt
 80065d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065da:	fa0b f303 	lslgt.w	r3, fp, r3
 80065de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065e2:	bfda      	itte	le
 80065e4:	f1c3 0320 	rsble	r3, r3, #32
 80065e8:	fa06 f003 	lslle.w	r0, r6, r3
 80065ec:	4318      	orrgt	r0, r3
 80065ee:	f7f9 ff89 	bl	8000504 <__aeabi_ui2d>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4606      	mov	r6, r0
 80065f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065fa:	3d01      	subs	r5, #1
 80065fc:	930e      	str	r3, [sp, #56]	; 0x38
 80065fe:	e76a      	b.n	80064d6 <_dtoa_r+0x116>
 8006600:	2301      	movs	r3, #1
 8006602:	e7b2      	b.n	800656a <_dtoa_r+0x1aa>
 8006604:	900b      	str	r0, [sp, #44]	; 0x2c
 8006606:	e7b1      	b.n	800656c <_dtoa_r+0x1ac>
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	9a00      	ldr	r2, [sp, #0]
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	4253      	negs	r3, r2
 8006612:	9307      	str	r3, [sp, #28]
 8006614:	2300      	movs	r3, #0
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	e7bf      	b.n	800659a <_dtoa_r+0x1da>
 800661a:	2300      	movs	r3, #0
 800661c:	9308      	str	r3, [sp, #32]
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc55      	bgt.n	80066d0 <_dtoa_r+0x310>
 8006624:	2301      	movs	r3, #1
 8006626:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800662a:	461a      	mov	r2, r3
 800662c:	9209      	str	r2, [sp, #36]	; 0x24
 800662e:	e00c      	b.n	800664a <_dtoa_r+0x28a>
 8006630:	2301      	movs	r3, #1
 8006632:	e7f3      	b.n	800661c <_dtoa_r+0x25c>
 8006634:	2300      	movs	r3, #0
 8006636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	4413      	add	r3, r2
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	2b01      	cmp	r3, #1
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	bfb8      	it	lt
 8006648:	2301      	movlt	r3, #1
 800664a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800664c:	2200      	movs	r2, #0
 800664e:	6042      	str	r2, [r0, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	f102 0614 	add.w	r6, r2, #20
 8006656:	429e      	cmp	r6, r3
 8006658:	6841      	ldr	r1, [r0, #4]
 800665a:	d93d      	bls.n	80066d8 <_dtoa_r+0x318>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 fcb7 	bl	8006fd0 <_Balloc>
 8006662:	9001      	str	r0, [sp, #4]
 8006664:	2800      	cmp	r0, #0
 8006666:	d13b      	bne.n	80066e0 <_dtoa_r+0x320>
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <_dtoa_r+0x2f0>)
 800666a:	4602      	mov	r2, r0
 800666c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006670:	e6c0      	b.n	80063f4 <_dtoa_r+0x34>
 8006672:	2301      	movs	r3, #1
 8006674:	e7df      	b.n	8006636 <_dtoa_r+0x276>
 8006676:	bf00      	nop
 8006678:	636f4361 	.word	0x636f4361
 800667c:	3fd287a7 	.word	0x3fd287a7
 8006680:	8b60c8b3 	.word	0x8b60c8b3
 8006684:	3fc68a28 	.word	0x3fc68a28
 8006688:	509f79fb 	.word	0x509f79fb
 800668c:	3fd34413 	.word	0x3fd34413
 8006690:	0800848d 	.word	0x0800848d
 8006694:	080084a4 	.word	0x080084a4
 8006698:	7ff00000 	.word	0x7ff00000
 800669c:	08008489 	.word	0x08008489
 80066a0:	08008480 	.word	0x08008480
 80066a4:	0800845d 	.word	0x0800845d
 80066a8:	3ff80000 	.word	0x3ff80000
 80066ac:	08008598 	.word	0x08008598
 80066b0:	080084ff 	.word	0x080084ff
 80066b4:	2501      	movs	r5, #1
 80066b6:	2300      	movs	r3, #0
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	9508      	str	r5, [sp, #32]
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2312      	movs	r3, #18
 80066c8:	e7b0      	b.n	800662c <_dtoa_r+0x26c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	e7f5      	b.n	80066bc <_dtoa_r+0x2fc>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066d6:	e7b8      	b.n	800664a <_dtoa_r+0x28a>
 80066d8:	3101      	adds	r1, #1
 80066da:	6041      	str	r1, [r0, #4]
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	e7b8      	b.n	8006652 <_dtoa_r+0x292>
 80066e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e2:	9a01      	ldr	r2, [sp, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	f200 809d 	bhi.w	8006828 <_dtoa_r+0x468>
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	f000 809a 	beq.w	8006828 <_dtoa_r+0x468>
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd32      	ble.n	8006760 <_dtoa_r+0x3a0>
 80066fa:	4ab7      	ldr	r2, [pc, #732]	; (80069d8 <_dtoa_r+0x618>)
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	05d8      	lsls	r0, r3, #23
 800670c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006710:	d516      	bpl.n	8006740 <_dtoa_r+0x380>
 8006712:	4bb2      	ldr	r3, [pc, #712]	; (80069dc <_dtoa_r+0x61c>)
 8006714:	ec51 0b19 	vmov	r0, r1, d9
 8006718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800671c:	f7fa f896 	bl	800084c <__aeabi_ddiv>
 8006720:	f007 070f 	and.w	r7, r7, #15
 8006724:	4682      	mov	sl, r0
 8006726:	468b      	mov	fp, r1
 8006728:	2503      	movs	r5, #3
 800672a:	4eac      	ldr	r6, [pc, #688]	; (80069dc <_dtoa_r+0x61c>)
 800672c:	b957      	cbnz	r7, 8006744 <_dtoa_r+0x384>
 800672e:	4642      	mov	r2, r8
 8006730:	464b      	mov	r3, r9
 8006732:	4650      	mov	r0, sl
 8006734:	4659      	mov	r1, fp
 8006736:	f7fa f889 	bl	800084c <__aeabi_ddiv>
 800673a:	4682      	mov	sl, r0
 800673c:	468b      	mov	fp, r1
 800673e:	e028      	b.n	8006792 <_dtoa_r+0x3d2>
 8006740:	2502      	movs	r5, #2
 8006742:	e7f2      	b.n	800672a <_dtoa_r+0x36a>
 8006744:	07f9      	lsls	r1, r7, #31
 8006746:	d508      	bpl.n	800675a <_dtoa_r+0x39a>
 8006748:	4640      	mov	r0, r8
 800674a:	4649      	mov	r1, r9
 800674c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	3501      	adds	r5, #1
 8006756:	4680      	mov	r8, r0
 8006758:	4689      	mov	r9, r1
 800675a:	107f      	asrs	r7, r7, #1
 800675c:	3608      	adds	r6, #8
 800675e:	e7e5      	b.n	800672c <_dtoa_r+0x36c>
 8006760:	f000 809b 	beq.w	800689a <_dtoa_r+0x4da>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	4f9d      	ldr	r7, [pc, #628]	; (80069dc <_dtoa_r+0x61c>)
 8006768:	425e      	negs	r6, r3
 800676a:	4b9b      	ldr	r3, [pc, #620]	; (80069d8 <_dtoa_r+0x618>)
 800676c:	f006 020f 	and.w	r2, r6, #15
 8006770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	ec51 0b19 	vmov	r0, r1, d9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	1136      	asrs	r6, r6, #4
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	2300      	movs	r3, #0
 8006788:	2502      	movs	r5, #2
 800678a:	2e00      	cmp	r6, #0
 800678c:	d17a      	bne.n	8006884 <_dtoa_r+0x4c4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d3      	bne.n	800673a <_dtoa_r+0x37a>
 8006792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8082 	beq.w	800689e <_dtoa_r+0x4de>
 800679a:	4b91      	ldr	r3, [pc, #580]	; (80069e0 <_dtoa_r+0x620>)
 800679c:	2200      	movs	r2, #0
 800679e:	4650      	mov	r0, sl
 80067a0:	4659      	mov	r1, fp
 80067a2:	f7fa f99b 	bl	8000adc <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d079      	beq.n	800689e <_dtoa_r+0x4de>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d076      	beq.n	800689e <_dtoa_r+0x4de>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd36      	ble.n	8006824 <_dtoa_r+0x464>
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	4650      	mov	r0, sl
 80067ba:	4659      	mov	r1, fp
 80067bc:	1e5f      	subs	r7, r3, #1
 80067be:	2200      	movs	r2, #0
 80067c0:	4b88      	ldr	r3, [pc, #544]	; (80069e4 <_dtoa_r+0x624>)
 80067c2:	f7f9 ff19 	bl	80005f8 <__aeabi_dmul>
 80067c6:	9e02      	ldr	r6, [sp, #8]
 80067c8:	4682      	mov	sl, r0
 80067ca:	468b      	mov	fp, r1
 80067cc:	3501      	adds	r5, #1
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7f9 fea8 	bl	8000524 <__aeabi_i2d>
 80067d4:	4652      	mov	r2, sl
 80067d6:	465b      	mov	r3, fp
 80067d8:	f7f9 ff0e 	bl	80005f8 <__aeabi_dmul>
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <_dtoa_r+0x628>)
 80067de:	2200      	movs	r2, #0
 80067e0:	f7f9 fd54 	bl	800028c <__adddf3>
 80067e4:	46d0      	mov	r8, sl
 80067e6:	46d9      	mov	r9, fp
 80067e8:	4682      	mov	sl, r0
 80067ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d158      	bne.n	80068a4 <_dtoa_r+0x4e4>
 80067f2:	4b7e      	ldr	r3, [pc, #504]	; (80069ec <_dtoa_r+0x62c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4652      	mov	r2, sl
 8006800:	465b      	mov	r3, fp
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	f7fa f987 	bl	8000b18 <__aeabi_dcmpgt>
 800680a:	2800      	cmp	r0, #0
 800680c:	f040 8295 	bne.w	8006d3a <_dtoa_r+0x97a>
 8006810:	4652      	mov	r2, sl
 8006812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa f95f 	bl	8000adc <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8289 	bne.w	8006d36 <_dtoa_r+0x976>
 8006824:	ec5b ab19 	vmov	sl, fp, d9
 8006828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800682a:	2b00      	cmp	r3, #0
 800682c:	f2c0 8148 	blt.w	8006ac0 <_dtoa_r+0x700>
 8006830:	9a00      	ldr	r2, [sp, #0]
 8006832:	2a0e      	cmp	r2, #14
 8006834:	f300 8144 	bgt.w	8006ac0 <_dtoa_r+0x700>
 8006838:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <_dtoa_r+0x618>)
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	f280 80d5 	bge.w	80069f4 <_dtoa_r+0x634>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f300 80d1 	bgt.w	80069f4 <_dtoa_r+0x634>
 8006852:	f040 826f 	bne.w	8006d34 <_dtoa_r+0x974>
 8006856:	4b65      	ldr	r3, [pc, #404]	; (80069ec <_dtoa_r+0x62c>)
 8006858:	2200      	movs	r2, #0
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7fa f94d 	bl	8000b04 <__aeabi_dcmpge>
 800686a:	9e03      	ldr	r6, [sp, #12]
 800686c:	4637      	mov	r7, r6
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8245 	bne.w	8006cfe <_dtoa_r+0x93e>
 8006874:	9d01      	ldr	r5, [sp, #4]
 8006876:	2331      	movs	r3, #49	; 0x31
 8006878:	f805 3b01 	strb.w	r3, [r5], #1
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	e240      	b.n	8006d06 <_dtoa_r+0x946>
 8006884:	07f2      	lsls	r2, r6, #31
 8006886:	d505      	bpl.n	8006894 <_dtoa_r+0x4d4>
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	f7f9 feb4 	bl	80005f8 <__aeabi_dmul>
 8006890:	3501      	adds	r5, #1
 8006892:	2301      	movs	r3, #1
 8006894:	1076      	asrs	r6, r6, #1
 8006896:	3708      	adds	r7, #8
 8006898:	e777      	b.n	800678a <_dtoa_r+0x3ca>
 800689a:	2502      	movs	r5, #2
 800689c:	e779      	b.n	8006792 <_dtoa_r+0x3d2>
 800689e:	9f00      	ldr	r7, [sp, #0]
 80068a0:	9e03      	ldr	r6, [sp, #12]
 80068a2:	e794      	b.n	80067ce <_dtoa_r+0x40e>
 80068a4:	9901      	ldr	r1, [sp, #4]
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <_dtoa_r+0x618>)
 80068a8:	4431      	add	r1, r6
 80068aa:	910d      	str	r1, [sp, #52]	; 0x34
 80068ac:	9908      	ldr	r1, [sp, #32]
 80068ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d043      	beq.n	8006942 <_dtoa_r+0x582>
 80068ba:	494d      	ldr	r1, [pc, #308]	; (80069f0 <_dtoa_r+0x630>)
 80068bc:	2000      	movs	r0, #0
 80068be:	f7f9 ffc5 	bl	800084c <__aeabi_ddiv>
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	9d01      	ldr	r5, [sp, #4]
 80068cc:	4682      	mov	sl, r0
 80068ce:	468b      	mov	fp, r1
 80068d0:	4649      	mov	r1, r9
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7fa f940 	bl	8000b58 <__aeabi_d2iz>
 80068d8:	4606      	mov	r6, r0
 80068da:	f7f9 fe23 	bl	8000524 <__aeabi_i2d>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	3630      	adds	r6, #48	; 0x30
 80068ec:	f805 6b01 	strb.w	r6, [r5], #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	4680      	mov	r8, r0
 80068f6:	4689      	mov	r9, r1
 80068f8:	f7fa f8f0 	bl	8000adc <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d163      	bne.n	80069c8 <_dtoa_r+0x608>
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	4936      	ldr	r1, [pc, #216]	; (80069e0 <_dtoa_r+0x620>)
 8006906:	2000      	movs	r0, #0
 8006908:	f7f9 fcbe 	bl	8000288 <__aeabi_dsub>
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	f7fa f8e4 	bl	8000adc <__aeabi_dcmplt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 80b5 	bne.w	8006a84 <_dtoa_r+0x6c4>
 800691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691c:	429d      	cmp	r5, r3
 800691e:	d081      	beq.n	8006824 <_dtoa_r+0x464>
 8006920:	4b30      	ldr	r3, [pc, #192]	; (80069e4 <_dtoa_r+0x624>)
 8006922:	2200      	movs	r2, #0
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <_dtoa_r+0x624>)
 800692e:	4682      	mov	sl, r0
 8006930:	468b      	mov	fp, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	2200      	movs	r2, #0
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	4680      	mov	r8, r0
 800693e:	4689      	mov	r9, r1
 8006940:	e7c6      	b.n	80068d0 <_dtoa_r+0x510>
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	9d01      	ldr	r5, [sp, #4]
 800694e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	4649      	mov	r1, r9
 8006956:	4640      	mov	r0, r8
 8006958:	f7fa f8fe 	bl	8000b58 <__aeabi_d2iz>
 800695c:	4606      	mov	r6, r0
 800695e:	f7f9 fde1 	bl	8000524 <__aeabi_i2d>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 fc8c 	bl	8000288 <__aeabi_dsub>
 8006970:	f805 6b01 	strb.w	r6, [r5], #1
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	429d      	cmp	r5, r3
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	d124      	bne.n	80069cc <_dtoa_r+0x60c>
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <_dtoa_r+0x630>)
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	f7f9 fc80 	bl	800028c <__adddf3>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7fa f8c0 	bl	8000b18 <__aeabi_dcmpgt>
 8006998:	2800      	cmp	r0, #0
 800699a:	d173      	bne.n	8006a84 <_dtoa_r+0x6c4>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	4913      	ldr	r1, [pc, #76]	; (80069f0 <_dtoa_r+0x630>)
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f894 	bl	8000adc <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f43f af35 	beq.w	8006824 <_dtoa_r+0x464>
 80069ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069bc:	1e6b      	subs	r3, r5, #1
 80069be:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d0f8      	beq.n	80069ba <_dtoa_r+0x5fa>
 80069c8:	9700      	str	r7, [sp, #0]
 80069ca:	e049      	b.n	8006a60 <_dtoa_r+0x6a0>
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <_dtoa_r+0x624>)
 80069ce:	f7f9 fe13 	bl	80005f8 <__aeabi_dmul>
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	e7bd      	b.n	8006954 <_dtoa_r+0x594>
 80069d8:	08008598 	.word	0x08008598
 80069dc:	08008570 	.word	0x08008570
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	40240000 	.word	0x40240000
 80069e8:	401c0000 	.word	0x401c0000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	9d01      	ldr	r5, [sp, #4]
 80069f6:	4656      	mov	r6, sl
 80069f8:	465f      	mov	r7, fp
 80069fa:	4642      	mov	r2, r8
 80069fc:	464b      	mov	r3, r9
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7f9 ff23 	bl	800084c <__aeabi_ddiv>
 8006a06:	f7fa f8a7 	bl	8000b58 <__aeabi_d2iz>
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	f7f9 fd8a 	bl	8000524 <__aeabi_i2d>
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	f7f9 fdf0 	bl	80005f8 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a24:	f7f9 fc30 	bl	8000288 <__aeabi_dsub>
 8006a28:	f805 6b01 	strb.w	r6, [r5], #1
 8006a2c:	9e01      	ldr	r6, [sp, #4]
 8006a2e:	9f03      	ldr	r7, [sp, #12]
 8006a30:	1bae      	subs	r6, r5, r6
 8006a32:	42b7      	cmp	r7, r6
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	d135      	bne.n	8006aa6 <_dtoa_r+0x6e6>
 8006a3a:	f7f9 fc27 	bl	800028c <__adddf3>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	f7fa f867 	bl	8000b18 <__aeabi_dcmpgt>
 8006a4a:	b9d0      	cbnz	r0, 8006a82 <_dtoa_r+0x6c2>
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7fa f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a58:	b110      	cbz	r0, 8006a60 <_dtoa_r+0x6a0>
 8006a5a:	f01a 0f01 	tst.w	sl, #1
 8006a5e:	d110      	bne.n	8006a82 <_dtoa_r+0x6c2>
 8006a60:	4620      	mov	r0, r4
 8006a62:	ee18 1a10 	vmov	r1, s16
 8006a66:	f000 faf3 	bl	8007050 <_Bfree>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9800      	ldr	r0, [sp, #0]
 8006a6e:	702b      	strb	r3, [r5, #0]
 8006a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a72:	3001      	adds	r0, #1
 8006a74:	6018      	str	r0, [r3, #0]
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f43f acf1 	beq.w	8006460 <_dtoa_r+0xa0>
 8006a7e:	601d      	str	r5, [r3, #0]
 8006a80:	e4ee      	b.n	8006460 <_dtoa_r+0xa0>
 8006a82:	9f00      	ldr	r7, [sp, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	461d      	mov	r5, r3
 8006a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8c:	2a39      	cmp	r2, #57	; 0x39
 8006a8e:	d106      	bne.n	8006a9e <_dtoa_r+0x6de>
 8006a90:	9a01      	ldr	r2, [sp, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1f7      	bne.n	8006a86 <_dtoa_r+0x6c6>
 8006a96:	9901      	ldr	r1, [sp, #4]
 8006a98:	2230      	movs	r2, #48	; 0x30
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	700a      	strb	r2, [r1, #0]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e790      	b.n	80069c8 <_dtoa_r+0x608>
 8006aa6:	4ba6      	ldr	r3, [pc, #664]	; (8006d40 <_dtoa_r+0x980>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f7f9 fda5 	bl	80005f8 <__aeabi_dmul>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d09d      	beq.n	80069fa <_dtoa_r+0x63a>
 8006abe:	e7cf      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006ac0:	9a08      	ldr	r2, [sp, #32]
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	f000 80d7 	beq.w	8006c76 <_dtoa_r+0x8b6>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a01      	cmp	r2, #1
 8006acc:	f300 80ba 	bgt.w	8006c44 <_dtoa_r+0x884>
 8006ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	f000 80b2 	beq.w	8006c3c <_dtoa_r+0x87c>
 8006ad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006adc:	9e07      	ldr	r6, [sp, #28]
 8006ade:	9d04      	ldr	r5, [sp, #16]
 8006ae0:	9a04      	ldr	r2, [sp, #16]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	9204      	str	r2, [sp, #16]
 8006ae6:	9a05      	ldr	r2, [sp, #20]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	441a      	add	r2, r3
 8006aec:	4620      	mov	r0, r4
 8006aee:	9205      	str	r2, [sp, #20]
 8006af0:	f000 fb66 	bl	80071c0 <__i2b>
 8006af4:	4607      	mov	r7, r0
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	dd0c      	ble.n	8006b14 <_dtoa_r+0x754>
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd09      	ble.n	8006b14 <_dtoa_r+0x754>
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	9a04      	ldr	r2, [sp, #16]
 8006b04:	bfa8      	it	ge
 8006b06:	462b      	movge	r3, r5
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	9a05      	ldr	r2, [sp, #20]
 8006b0e:	1aed      	subs	r5, r5, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	b31b      	cbz	r3, 8006b60 <_dtoa_r+0x7a0>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80af 	beq.w	8006c7e <_dtoa_r+0x8be>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	dd13      	ble.n	8006b4c <_dtoa_r+0x78c>
 8006b24:	4639      	mov	r1, r7
 8006b26:	4632      	mov	r2, r6
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc09 	bl	8007340 <__pow5mult>
 8006b2e:	ee18 2a10 	vmov	r2, s16
 8006b32:	4601      	mov	r1, r0
 8006b34:	4607      	mov	r7, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fb58 	bl	80071ec <__multiply>
 8006b3c:	ee18 1a10 	vmov	r1, s16
 8006b40:	4680      	mov	r8, r0
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fa84 	bl	8007050 <_Bfree>
 8006b48:	ee08 8a10 	vmov	s16, r8
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	1b9a      	subs	r2, r3, r6
 8006b50:	d006      	beq.n	8006b60 <_dtoa_r+0x7a0>
 8006b52:	ee18 1a10 	vmov	r1, s16
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fbf2 	bl	8007340 <__pow5mult>
 8006b5c:	ee08 0a10 	vmov	s16, r0
 8006b60:	2101      	movs	r1, #1
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb2c 	bl	80071c0 <__i2b>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	f340 8088 	ble.w	8006c82 <_dtoa_r+0x8c2>
 8006b72:	461a      	mov	r2, r3
 8006b74:	4601      	mov	r1, r0
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fbe2 	bl	8007340 <__pow5mult>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	4606      	mov	r6, r0
 8006b82:	f340 8081 	ble.w	8006c88 <_dtoa_r+0x8c8>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	6933      	ldr	r3, [r6, #16]
 8006b8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f000 fac5 	bl	8007120 <__hi0bits>
 8006b96:	f1c0 0020 	rsb	r0, r0, #32
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	4418      	add	r0, r3
 8006b9e:	f010 001f 	ands.w	r0, r0, #31
 8006ba2:	f000 8092 	beq.w	8006cca <_dtoa_r+0x90a>
 8006ba6:	f1c0 0320 	rsb	r3, r0, #32
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	f340 808a 	ble.w	8006cc4 <_dtoa_r+0x904>
 8006bb0:	f1c0 001c 	rsb	r0, r0, #28
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	4403      	add	r3, r0
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	4403      	add	r3, r0
 8006bbe:	4405      	add	r5, r0
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd07      	ble.n	8006bd8 <_dtoa_r+0x818>
 8006bc8:	ee18 1a10 	vmov	r1, s16
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fc10 	bl	80073f4 <__lshift>
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd05      	ble.n	8006bea <_dtoa_r+0x82a>
 8006bde:	4631      	mov	r1, r6
 8006be0:	461a      	mov	r2, r3
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fc06 	bl	80073f4 <__lshift>
 8006be8:	4606      	mov	r6, r0
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06e      	beq.n	8006cce <_dtoa_r+0x90e>
 8006bf0:	ee18 0a10 	vmov	r0, s16
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	f000 fc6d 	bl	80074d4 <__mcmp>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	da67      	bge.n	8006cce <_dtoa_r+0x90e>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	220a      	movs	r2, #10
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fa41 	bl	8007094 <__multadd>
 8006c12:	9b08      	ldr	r3, [sp, #32]
 8006c14:	ee08 0a10 	vmov	s16, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 81b1 	beq.w	8006f80 <_dtoa_r+0xbc0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4639      	mov	r1, r7
 8006c22:	220a      	movs	r2, #10
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fa35 	bl	8007094 <__multadd>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	4607      	mov	r7, r0
 8006c30:	f300 808e 	bgt.w	8006d50 <_dtoa_r+0x990>
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dc51      	bgt.n	8006cde <_dtoa_r+0x91e>
 8006c3a:	e089      	b.n	8006d50 <_dtoa_r+0x990>
 8006c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c42:	e74b      	b.n	8006adc <_dtoa_r+0x71c>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1e5e      	subs	r6, r3, #1
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	42b3      	cmp	r3, r6
 8006c4c:	bfbf      	itttt	lt
 8006c4e:	9b07      	ldrlt	r3, [sp, #28]
 8006c50:	9607      	strlt	r6, [sp, #28]
 8006c52:	1af2      	sublt	r2, r6, r3
 8006c54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c56:	bfb6      	itet	lt
 8006c58:	189b      	addlt	r3, r3, r2
 8006c5a:	1b9e      	subge	r6, r3, r6
 8006c5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	bfb8      	it	lt
 8006c62:	2600      	movlt	r6, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb7      	itett	lt
 8006c68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c70:	1a9d      	sublt	r5, r3, r2
 8006c72:	2300      	movlt	r3, #0
 8006c74:	e734      	b.n	8006ae0 <_dtoa_r+0x720>
 8006c76:	9e07      	ldr	r6, [sp, #28]
 8006c78:	9d04      	ldr	r5, [sp, #16]
 8006c7a:	9f08      	ldr	r7, [sp, #32]
 8006c7c:	e73b      	b.n	8006af6 <_dtoa_r+0x736>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	e767      	b.n	8006b52 <_dtoa_r+0x792>
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	dc18      	bgt.n	8006cba <_dtoa_r+0x8fa>
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	d115      	bne.n	8006cba <_dtoa_r+0x8fa>
 8006c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c92:	b993      	cbnz	r3, 8006cba <_dtoa_r+0x8fa>
 8006c94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	051b      	lsls	r3, r3, #20
 8006c9c:	b183      	cbz	r3, 8006cc0 <_dtoa_r+0x900>
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9b05      	ldr	r3, [sp, #20]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	f04f 0801 	mov.w	r8, #1
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f af6a 	bne.w	8006b8a <_dtoa_r+0x7ca>
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e76f      	b.n	8006b9a <_dtoa_r+0x7da>
 8006cba:	f04f 0800 	mov.w	r8, #0
 8006cbe:	e7f6      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	e7f4      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc4:	f43f af7d 	beq.w	8006bc2 <_dtoa_r+0x802>
 8006cc8:	4618      	mov	r0, r3
 8006cca:	301c      	adds	r0, #28
 8006ccc:	e772      	b.n	8006bb4 <_dtoa_r+0x7f4>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc37      	bgt.n	8006d44 <_dtoa_r+0x984>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dd34      	ble.n	8006d44 <_dtoa_r+0x984>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	9302      	str	r3, [sp, #8]
 8006cde:	9b02      	ldr	r3, [sp, #8]
 8006ce0:	b96b      	cbnz	r3, 8006cfe <_dtoa_r+0x93e>
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f9d4 	bl	8007094 <__multadd>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4606      	mov	r6, r0
 8006cf0:	ee18 0a10 	vmov	r0, s16
 8006cf4:	f000 fbee 	bl	80074d4 <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f73f adbb 	bgt.w	8006874 <_dtoa_r+0x4b4>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	9d01      	ldr	r5, [sp, #4]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f99f 	bl	8007050 <_Bfree>
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	f43f aea4 	beq.w	8006a60 <_dtoa_r+0x6a0>
 8006d18:	f1b8 0f00 	cmp.w	r8, #0
 8006d1c:	d005      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d1e:	45b8      	cmp	r8, r7
 8006d20:	d003      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d22:	4641      	mov	r1, r8
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 f993 	bl	8007050 <_Bfree>
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f98f 	bl	8007050 <_Bfree>
 8006d32:	e695      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006d34:	2600      	movs	r6, #0
 8006d36:	4637      	mov	r7, r6
 8006d38:	e7e1      	b.n	8006cfe <_dtoa_r+0x93e>
 8006d3a:	9700      	str	r7, [sp, #0]
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	e599      	b.n	8006874 <_dtoa_r+0x4b4>
 8006d40:	40240000 	.word	0x40240000
 8006d44:	9b08      	ldr	r3, [sp, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80ca 	beq.w	8006ee0 <_dtoa_r+0xb20>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	dd05      	ble.n	8006d60 <_dtoa_r+0x9a0>
 8006d54:	4639      	mov	r1, r7
 8006d56:	462a      	mov	r2, r5
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fb4b 	bl	80073f4 <__lshift>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	d05b      	beq.n	8006e1e <_dtoa_r+0xa5e>
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f931 	bl	8006fd0 <_Balloc>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <_dtoa_r+0x9be>
 8006d72:	4b87      	ldr	r3, [pc, #540]	; (8006f90 <_dtoa_r+0xbd0>)
 8006d74:	4602      	mov	r2, r0
 8006d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d7a:	f7ff bb3b 	b.w	80063f4 <_dtoa_r+0x34>
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	3202      	adds	r2, #2
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	f107 010c 	add.w	r1, r7, #12
 8006d88:	300c      	adds	r0, #12
 8006d8a:	f000 f913 	bl	8006fb4 <memcpy>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fb2e 	bl	80073f4 <__lshift>
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	f103 0901 	add.w	r9, r3, #1
 8006d9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	f00a 0301 	and.w	r3, sl, #1
 8006daa:	46b8      	mov	r8, r7
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	4631      	mov	r1, r6
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f7ff fa75 	bl	80062a4 <quorem>
 8006dba:	4641      	mov	r1, r8
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dc2:	ee18 0a10 	vmov	r0, s16
 8006dc6:	f000 fb85 	bl	80074d4 <__mcmp>
 8006dca:	463a      	mov	r2, r7
 8006dcc:	9003      	str	r0, [sp, #12]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fb9b 	bl	800750c <__mdiff>
 8006dd6:	68c2      	ldr	r2, [r0, #12]
 8006dd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ddc:	4605      	mov	r5, r0
 8006dde:	bb02      	cbnz	r2, 8006e22 <_dtoa_r+0xa62>
 8006de0:	4601      	mov	r1, r0
 8006de2:	ee18 0a10 	vmov	r0, s16
 8006de6:	f000 fb75 	bl	80074d4 <__mcmp>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4629      	mov	r1, r5
 8006dee:	4620      	mov	r0, r4
 8006df0:	9207      	str	r2, [sp, #28]
 8006df2:	f000 f92d 	bl	8007050 <_Bfree>
 8006df6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dfa:	ea43 0102 	orr.w	r1, r3, r2
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	430b      	orrs	r3, r1
 8006e02:	464d      	mov	r5, r9
 8006e04:	d10f      	bne.n	8006e26 <_dtoa_r+0xa66>
 8006e06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e0a:	d02a      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd02      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e18:	f88b a000 	strb.w	sl, [fp]
 8006e1c:	e775      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	e7ba      	b.n	8006d98 <_dtoa_r+0x9d8>
 8006e22:	2201      	movs	r2, #1
 8006e24:	e7e2      	b.n	8006dec <_dtoa_r+0xa2c>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db04      	blt.n	8006e36 <_dtoa_r+0xa76>
 8006e2c:	9906      	ldr	r1, [sp, #24]
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	9904      	ldr	r1, [sp, #16]
 8006e32:	430b      	orrs	r3, r1
 8006e34:	d122      	bne.n	8006e7c <_dtoa_r+0xabc>
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	ddee      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fad7 	bl	80073f4 <__lshift>
 8006e46:	4631      	mov	r1, r6
 8006e48:	ee08 0a10 	vmov	s16, r0
 8006e4c:	f000 fb42 	bl	80074d4 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dc03      	bgt.n	8006e5c <_dtoa_r+0xa9c>
 8006e54:	d1e0      	bne.n	8006e18 <_dtoa_r+0xa58>
 8006e56:	f01a 0f01 	tst.w	sl, #1
 8006e5a:	d0dd      	beq.n	8006e18 <_dtoa_r+0xa58>
 8006e5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e60:	d1d7      	bne.n	8006e12 <_dtoa_r+0xa52>
 8006e62:	2339      	movs	r3, #57	; 0x39
 8006e64:	f88b 3000 	strb.w	r3, [fp]
 8006e68:	462b      	mov	r3, r5
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e72:	2a39      	cmp	r2, #57	; 0x39
 8006e74:	d071      	beq.n	8006f5a <_dtoa_r+0xb9a>
 8006e76:	3201      	adds	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e746      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	dd07      	ble.n	8006e90 <_dtoa_r+0xad0>
 8006e80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e84:	d0ed      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e86:	f10a 0301 	add.w	r3, sl, #1
 8006e8a:	f88b 3000 	strb.w	r3, [fp]
 8006e8e:	e73c      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e96:	4599      	cmp	r9, r3
 8006e98:	d047      	beq.n	8006f2a <_dtoa_r+0xb6a>
 8006e9a:	ee18 1a10 	vmov	r1, s16
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f8f6 	bl	8007094 <__multadd>
 8006ea8:	45b8      	cmp	r8, r7
 8006eaa:	ee08 0a10 	vmov	s16, r0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	f04f 020a 	mov.w	r2, #10
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4620      	mov	r0, r4
 8006eba:	d106      	bne.n	8006eca <_dtoa_r+0xb0a>
 8006ebc:	f000 f8ea 	bl	8007094 <__multadd>
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	f109 0901 	add.w	r9, r9, #1
 8006ec8:	e772      	b.n	8006db0 <_dtoa_r+0x9f0>
 8006eca:	f000 f8e3 	bl	8007094 <__multadd>
 8006ece:	4639      	mov	r1, r7
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f8dc 	bl	8007094 <__multadd>
 8006edc:	4607      	mov	r7, r0
 8006ede:	e7f1      	b.n	8006ec4 <_dtoa_r+0xb04>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	9302      	str	r3, [sp, #8]
 8006ee4:	9d01      	ldr	r5, [sp, #4]
 8006ee6:	ee18 0a10 	vmov	r0, s16
 8006eea:	4631      	mov	r1, r6
 8006eec:	f7ff f9da 	bl	80062a4 <quorem>
 8006ef0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ef4:	9b01      	ldr	r3, [sp, #4]
 8006ef6:	f805 ab01 	strb.w	sl, [r5], #1
 8006efa:	1aea      	subs	r2, r5, r3
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	dd09      	ble.n	8006f16 <_dtoa_r+0xb56>
 8006f02:	ee18 1a10 	vmov	r1, s16
 8006f06:	2300      	movs	r3, #0
 8006f08:	220a      	movs	r2, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f8c2 	bl	8007094 <__multadd>
 8006f10:	ee08 0a10 	vmov	s16, r0
 8006f14:	e7e7      	b.n	8006ee6 <_dtoa_r+0xb26>
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfc8      	it	gt
 8006f1c:	461d      	movgt	r5, r3
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	bfd8      	it	le
 8006f22:	2501      	movle	r5, #1
 8006f24:	441d      	add	r5, r3
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa5f 	bl	80073f4 <__lshift>
 8006f36:	4631      	mov	r1, r6
 8006f38:	ee08 0a10 	vmov	s16, r0
 8006f3c:	f000 faca 	bl	80074d4 <__mcmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	dc91      	bgt.n	8006e68 <_dtoa_r+0xaa8>
 8006f44:	d102      	bne.n	8006f4c <_dtoa_r+0xb8c>
 8006f46:	f01a 0f01 	tst.w	sl, #1
 8006f4a:	d18d      	bne.n	8006e68 <_dtoa_r+0xaa8>
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f54:	2a30      	cmp	r2, #48	; 0x30
 8006f56:	d0fa      	beq.n	8006f4e <_dtoa_r+0xb8e>
 8006f58:	e6d7      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d184      	bne.n	8006e6a <_dtoa_r+0xaaa>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2331      	movs	r3, #49	; 0x31
 8006f68:	7013      	strb	r3, [r2, #0]
 8006f6a:	e6ce      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <_dtoa_r+0xbd4>)
 8006f6e:	f7ff ba95 	b.w	800649c <_dtoa_r+0xdc>
 8006f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f aa6e 	bne.w	8006456 <_dtoa_r+0x96>
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <_dtoa_r+0xbd8>)
 8006f7c:	f7ff ba8e 	b.w	800649c <_dtoa_r+0xdc>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dcae      	bgt.n	8006ee4 <_dtoa_r+0xb24>
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f73f aea8 	bgt.w	8006cde <_dtoa_r+0x91e>
 8006f8e:	e7a9      	b.n	8006ee4 <_dtoa_r+0xb24>
 8006f90:	080084ff 	.word	0x080084ff
 8006f94:	0800845c 	.word	0x0800845c
 8006f98:	08008480 	.word	0x08008480

08006f9c <_localeconv_r>:
 8006f9c:	4800      	ldr	r0, [pc, #0]	; (8006fa0 <_localeconv_r+0x4>)
 8006f9e:	4770      	bx	lr
 8006fa0:	20000160 	.word	0x20000160

08006fa4 <malloc>:
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <malloc+0xc>)
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f000 bc17 	b.w	80077dc <_malloc_r>
 8006fae:	bf00      	nop
 8006fb0:	2000000c 	.word	0x2000000c

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <_Balloc>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	b976      	cbnz	r6, 8006ff8 <_Balloc+0x28>
 8006fda:	2010      	movs	r0, #16
 8006fdc:	f7ff ffe2 	bl	8006fa4 <malloc>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe4:	b920      	cbnz	r0, 8006ff0 <_Balloc+0x20>
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <_Balloc+0x78>)
 8006fe8:	4818      	ldr	r0, [pc, #96]	; (800704c <_Balloc+0x7c>)
 8006fea:	2166      	movs	r1, #102	; 0x66
 8006fec:	f000 fc7a 	bl	80078e4 <__assert_func>
 8006ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff4:	6006      	str	r6, [r0, #0]
 8006ff6:	60c6      	str	r6, [r0, #12]
 8006ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ffa:	68f3      	ldr	r3, [r6, #12]
 8006ffc:	b183      	cbz	r3, 8007020 <_Balloc+0x50>
 8006ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007006:	b9b8      	cbnz	r0, 8007038 <_Balloc+0x68>
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f605 	lsl.w	r6, r1, r5
 800700e:	1d72      	adds	r2, r6, #5
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb60 	bl	80076d8 <_calloc_r>
 8007018:	b160      	cbz	r0, 8007034 <_Balloc+0x64>
 800701a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800701e:	e00e      	b.n	800703e <_Balloc+0x6e>
 8007020:	2221      	movs	r2, #33	; 0x21
 8007022:	2104      	movs	r1, #4
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fb57 	bl	80076d8 <_calloc_r>
 800702a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800702c:	60f0      	str	r0, [r6, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <_Balloc+0x2e>
 8007034:	2000      	movs	r0, #0
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	6802      	ldr	r2, [r0, #0]
 800703a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800703e:	2300      	movs	r3, #0
 8007040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007044:	e7f7      	b.n	8007036 <_Balloc+0x66>
 8007046:	bf00      	nop
 8007048:	0800848d 	.word	0x0800848d
 800704c:	08008510 	.word	0x08008510

08007050 <_Bfree>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b976      	cbnz	r6, 8007078 <_Bfree+0x28>
 800705a:	2010      	movs	r0, #16
 800705c:	f7ff ffa2 	bl	8006fa4 <malloc>
 8007060:	4602      	mov	r2, r0
 8007062:	6268      	str	r0, [r5, #36]	; 0x24
 8007064:	b920      	cbnz	r0, 8007070 <_Bfree+0x20>
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <_Bfree+0x3c>)
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <_Bfree+0x40>)
 800706a:	218a      	movs	r1, #138	; 0x8a
 800706c:	f000 fc3a 	bl	80078e4 <__assert_func>
 8007070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007074:	6006      	str	r6, [r0, #0]
 8007076:	60c6      	str	r6, [r0, #12]
 8007078:	b13c      	cbz	r4, 800708a <_Bfree+0x3a>
 800707a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007084:	6021      	str	r1, [r4, #0]
 8007086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	0800848d 	.word	0x0800848d
 8007090:	08008510 	.word	0x08008510

08007094 <__multadd>:
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	690d      	ldr	r5, [r1, #16]
 800709a:	4607      	mov	r7, r0
 800709c:	460c      	mov	r4, r1
 800709e:	461e      	mov	r6, r3
 80070a0:	f101 0c14 	add.w	ip, r1, #20
 80070a4:	2000      	movs	r0, #0
 80070a6:	f8dc 3000 	ldr.w	r3, [ip]
 80070aa:	b299      	uxth	r1, r3
 80070ac:	fb02 6101 	mla	r1, r2, r1, r6
 80070b0:	0c1e      	lsrs	r6, r3, #16
 80070b2:	0c0b      	lsrs	r3, r1, #16
 80070b4:	fb02 3306 	mla	r3, r2, r6, r3
 80070b8:	b289      	uxth	r1, r1
 80070ba:	3001      	adds	r0, #1
 80070bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070c0:	4285      	cmp	r5, r0
 80070c2:	f84c 1b04 	str.w	r1, [ip], #4
 80070c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ca:	dcec      	bgt.n	80070a6 <__multadd+0x12>
 80070cc:	b30e      	cbz	r6, 8007112 <__multadd+0x7e>
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	42ab      	cmp	r3, r5
 80070d2:	dc19      	bgt.n	8007108 <__multadd+0x74>
 80070d4:	6861      	ldr	r1, [r4, #4]
 80070d6:	4638      	mov	r0, r7
 80070d8:	3101      	adds	r1, #1
 80070da:	f7ff ff79 	bl	8006fd0 <_Balloc>
 80070de:	4680      	mov	r8, r0
 80070e0:	b928      	cbnz	r0, 80070ee <__multadd+0x5a>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <__multadd+0x84>)
 80070e6:	480d      	ldr	r0, [pc, #52]	; (800711c <__multadd+0x88>)
 80070e8:	21b5      	movs	r1, #181	; 0xb5
 80070ea:	f000 fbfb 	bl	80078e4 <__assert_func>
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	3202      	adds	r2, #2
 80070f2:	f104 010c 	add.w	r1, r4, #12
 80070f6:	0092      	lsls	r2, r2, #2
 80070f8:	300c      	adds	r0, #12
 80070fa:	f7ff ff5b 	bl	8006fb4 <memcpy>
 80070fe:	4621      	mov	r1, r4
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ffa5 	bl	8007050 <_Bfree>
 8007106:	4644      	mov	r4, r8
 8007108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800710c:	3501      	adds	r5, #1
 800710e:	615e      	str	r6, [r3, #20]
 8007110:	6125      	str	r5, [r4, #16]
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	080084ff 	.word	0x080084ff
 800711c:	08008510 	.word	0x08008510

08007120 <__hi0bits>:
 8007120:	0c03      	lsrs	r3, r0, #16
 8007122:	041b      	lsls	r3, r3, #16
 8007124:	b9d3      	cbnz	r3, 800715c <__hi0bits+0x3c>
 8007126:	0400      	lsls	r0, r0, #16
 8007128:	2310      	movs	r3, #16
 800712a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800712e:	bf04      	itt	eq
 8007130:	0200      	lsleq	r0, r0, #8
 8007132:	3308      	addeq	r3, #8
 8007134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007138:	bf04      	itt	eq
 800713a:	0100      	lsleq	r0, r0, #4
 800713c:	3304      	addeq	r3, #4
 800713e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007142:	bf04      	itt	eq
 8007144:	0080      	lsleq	r0, r0, #2
 8007146:	3302      	addeq	r3, #2
 8007148:	2800      	cmp	r0, #0
 800714a:	db05      	blt.n	8007158 <__hi0bits+0x38>
 800714c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007150:	f103 0301 	add.w	r3, r3, #1
 8007154:	bf08      	it	eq
 8007156:	2320      	moveq	r3, #32
 8007158:	4618      	mov	r0, r3
 800715a:	4770      	bx	lr
 800715c:	2300      	movs	r3, #0
 800715e:	e7e4      	b.n	800712a <__hi0bits+0xa>

08007160 <__lo0bits>:
 8007160:	6803      	ldr	r3, [r0, #0]
 8007162:	f013 0207 	ands.w	r2, r3, #7
 8007166:	4601      	mov	r1, r0
 8007168:	d00b      	beq.n	8007182 <__lo0bits+0x22>
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d423      	bmi.n	80071b6 <__lo0bits+0x56>
 800716e:	0798      	lsls	r0, r3, #30
 8007170:	bf49      	itett	mi
 8007172:	085b      	lsrmi	r3, r3, #1
 8007174:	089b      	lsrpl	r3, r3, #2
 8007176:	2001      	movmi	r0, #1
 8007178:	600b      	strmi	r3, [r1, #0]
 800717a:	bf5c      	itt	pl
 800717c:	600b      	strpl	r3, [r1, #0]
 800717e:	2002      	movpl	r0, #2
 8007180:	4770      	bx	lr
 8007182:	b298      	uxth	r0, r3
 8007184:	b9a8      	cbnz	r0, 80071b2 <__lo0bits+0x52>
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	2010      	movs	r0, #16
 800718a:	b2da      	uxtb	r2, r3
 800718c:	b90a      	cbnz	r2, 8007192 <__lo0bits+0x32>
 800718e:	3008      	adds	r0, #8
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	071a      	lsls	r2, r3, #28
 8007194:	bf04      	itt	eq
 8007196:	091b      	lsreq	r3, r3, #4
 8007198:	3004      	addeq	r0, #4
 800719a:	079a      	lsls	r2, r3, #30
 800719c:	bf04      	itt	eq
 800719e:	089b      	lsreq	r3, r3, #2
 80071a0:	3002      	addeq	r0, #2
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d403      	bmi.n	80071ae <__lo0bits+0x4e>
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	f100 0001 	add.w	r0, r0, #1
 80071ac:	d005      	beq.n	80071ba <__lo0bits+0x5a>
 80071ae:	600b      	str	r3, [r1, #0]
 80071b0:	4770      	bx	lr
 80071b2:	4610      	mov	r0, r2
 80071b4:	e7e9      	b.n	800718a <__lo0bits+0x2a>
 80071b6:	2000      	movs	r0, #0
 80071b8:	4770      	bx	lr
 80071ba:	2020      	movs	r0, #32
 80071bc:	4770      	bx	lr
	...

080071c0 <__i2b>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	2101      	movs	r1, #1
 80071c6:	f7ff ff03 	bl	8006fd0 <_Balloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	b928      	cbnz	r0, 80071da <__i2b+0x1a>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <__i2b+0x24>)
 80071d0:	4805      	ldr	r0, [pc, #20]	; (80071e8 <__i2b+0x28>)
 80071d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071d6:	f000 fb85 	bl	80078e4 <__assert_func>
 80071da:	2301      	movs	r3, #1
 80071dc:	6144      	str	r4, [r0, #20]
 80071de:	6103      	str	r3, [r0, #16]
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	080084ff 	.word	0x080084ff
 80071e8:	08008510 	.word	0x08008510

080071ec <__multiply>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4691      	mov	r9, r2
 80071f2:	690a      	ldr	r2, [r1, #16]
 80071f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bfb8      	it	lt
 80071fc:	460b      	movlt	r3, r1
 80071fe:	460c      	mov	r4, r1
 8007200:	bfbc      	itt	lt
 8007202:	464c      	movlt	r4, r9
 8007204:	4699      	movlt	r9, r3
 8007206:	6927      	ldr	r7, [r4, #16]
 8007208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	eb07 060a 	add.w	r6, r7, sl
 8007214:	42b3      	cmp	r3, r6
 8007216:	b085      	sub	sp, #20
 8007218:	bfb8      	it	lt
 800721a:	3101      	addlt	r1, #1
 800721c:	f7ff fed8 	bl	8006fd0 <_Balloc>
 8007220:	b930      	cbnz	r0, 8007230 <__multiply+0x44>
 8007222:	4602      	mov	r2, r0
 8007224:	4b44      	ldr	r3, [pc, #272]	; (8007338 <__multiply+0x14c>)
 8007226:	4845      	ldr	r0, [pc, #276]	; (800733c <__multiply+0x150>)
 8007228:	f240 115d 	movw	r1, #349	; 0x15d
 800722c:	f000 fb5a 	bl	80078e4 <__assert_func>
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007238:	462b      	mov	r3, r5
 800723a:	2200      	movs	r2, #0
 800723c:	4543      	cmp	r3, r8
 800723e:	d321      	bcc.n	8007284 <__multiply+0x98>
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007248:	f109 0314 	add.w	r3, r9, #20
 800724c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	1b3a      	subs	r2, r7, r4
 8007254:	3a15      	subs	r2, #21
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	3204      	adds	r2, #4
 800725c:	f104 0115 	add.w	r1, r4, #21
 8007260:	428f      	cmp	r7, r1
 8007262:	bf38      	it	cc
 8007264:	2204      	movcc	r2, #4
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9a02      	ldr	r2, [sp, #8]
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d80c      	bhi.n	800728a <__multiply+0x9e>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd03      	ble.n	800727c <__multiply+0x90>
 8007274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007278:	2b00      	cmp	r3, #0
 800727a:	d05a      	beq.n	8007332 <__multiply+0x146>
 800727c:	6106      	str	r6, [r0, #16]
 800727e:	b005      	add	sp, #20
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	f843 2b04 	str.w	r2, [r3], #4
 8007288:	e7d8      	b.n	800723c <__multiply+0x50>
 800728a:	f8b3 a000 	ldrh.w	sl, [r3]
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	d024      	beq.n	80072de <__multiply+0xf2>
 8007294:	f104 0e14 	add.w	lr, r4, #20
 8007298:	46a9      	mov	r9, r5
 800729a:	f04f 0c00 	mov.w	ip, #0
 800729e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072a2:	f8d9 1000 	ldr.w	r1, [r9]
 80072a6:	fa1f fb82 	uxth.w	fp, r2
 80072aa:	b289      	uxth	r1, r1
 80072ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80072b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	4461      	add	r1, ip
 80072ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072be:	fb0a c20b 	mla	r2, sl, fp, ip
 80072c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072c6:	b289      	uxth	r1, r1
 80072c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072cc:	4577      	cmp	r7, lr
 80072ce:	f849 1b04 	str.w	r1, [r9], #4
 80072d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072d6:	d8e2      	bhi.n	800729e <__multiply+0xb2>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	f845 c002 	str.w	ip, [r5, r2]
 80072de:	9a03      	ldr	r2, [sp, #12]
 80072e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e4:	3304      	adds	r3, #4
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d020      	beq.n	800732e <__multiply+0x142>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	f104 0c14 	add.w	ip, r4, #20
 80072f2:	46ae      	mov	lr, r5
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	f8bc b000 	ldrh.w	fp, [ip]
 80072fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4492      	add	sl, r2
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800730c:	f84e 1b04 	str.w	r1, [lr], #4
 8007310:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007314:	f8be 1000 	ldrh.w	r1, [lr]
 8007318:	0c12      	lsrs	r2, r2, #16
 800731a:	fb09 1102 	mla	r1, r9, r2, r1
 800731e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007322:	4567      	cmp	r7, ip
 8007324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007328:	d8e6      	bhi.n	80072f8 <__multiply+0x10c>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	50a9      	str	r1, [r5, r2]
 800732e:	3504      	adds	r5, #4
 8007330:	e79a      	b.n	8007268 <__multiply+0x7c>
 8007332:	3e01      	subs	r6, #1
 8007334:	e79c      	b.n	8007270 <__multiply+0x84>
 8007336:	bf00      	nop
 8007338:	080084ff 	.word	0x080084ff
 800733c:	08008510 	.word	0x08008510

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	; (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe9b 	bl	8007094 <__multadd>
 800735e:	4607      	mov	r7, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fe1b 	bl	8006fa4 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	6270      	str	r0, [r6, #36]	; 0x24
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <__pow5mult+0xac>)
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <__pow5mult+0xb0>)
 8007378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800737c:	f000 fab2 	bl	80078e4 <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	; 0x271
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff12 	bl	80071c0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff1a 	bl	80071ec <__multiply>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4680      	mov	r8, r0
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fe47 	bl	8007050 <_Bfree>
 80073c2:	4647      	mov	r7, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff ff0b 	bl	80071ec <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	08008660 	.word	0x08008660
 80073ec:	0800848d 	.word	0x0800848d
 80073f0:	08008510 	.word	0x08008510

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	4607      	mov	r7, r0
 8007406:	4691      	mov	r9, r2
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fddb 	bl	8006fd0 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <__lshift+0xd8>)
 8007422:	482b      	ldr	r0, [pc, #172]	; (80074d0 <__lshift+0xdc>)
 8007424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007428:	f000 fa5c 	bl	80078e4 <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db37      	blt.n	80074b2 <__lshift+0xbe>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007458:	d02f      	beq.n	80074ba <__lshift+0xc6>
 800745a:	f1c9 0e20 	rsb	lr, r9, #32
 800745e:	468a      	mov	sl, r1
 8007460:	f04f 0c00 	mov.w	ip, #0
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	fa02 f209 	lsl.w	r2, r2, r9
 800746a:	ea42 020c 	orr.w	r2, r2, ip
 800746e:	f84a 2b04 	str.w	r2, [sl], #4
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	4298      	cmp	r0, r3
 8007478:	fa22 fc0e 	lsr.w	ip, r2, lr
 800747c:	d8f2      	bhi.n	8007464 <__lshift+0x70>
 800747e:	1b03      	subs	r3, r0, r4
 8007480:	3b15      	subs	r3, #21
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	3304      	adds	r3, #4
 8007488:	f104 0215 	add.w	r2, r4, #21
 800748c:	4290      	cmp	r0, r2
 800748e:	bf38      	it	cc
 8007490:	2304      	movcc	r3, #4
 8007492:	f841 c003 	str.w	ip, [r1, r3]
 8007496:	f1bc 0f00 	cmp.w	ip, #0
 800749a:	d001      	beq.n	80074a0 <__lshift+0xac>
 800749c:	f108 0602 	add.w	r6, r8, #2
 80074a0:	3e01      	subs	r6, #1
 80074a2:	4638      	mov	r0, r7
 80074a4:	612e      	str	r6, [r5, #16]
 80074a6:	4621      	mov	r1, r4
 80074a8:	f7ff fdd2 	bl	8007050 <_Bfree>
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074b6:	3301      	adds	r3, #1
 80074b8:	e7c1      	b.n	800743e <__lshift+0x4a>
 80074ba:	3904      	subs	r1, #4
 80074bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80074c4:	4298      	cmp	r0, r3
 80074c6:	d8f9      	bhi.n	80074bc <__lshift+0xc8>
 80074c8:	e7ea      	b.n	80074a0 <__lshift+0xac>
 80074ca:	bf00      	nop
 80074cc:	080084ff 	.word	0x080084ff
 80074d0:	08008510 	.word	0x08008510

080074d4 <__mcmp>:
 80074d4:	b530      	push	{r4, r5, lr}
 80074d6:	6902      	ldr	r2, [r0, #16]
 80074d8:	690c      	ldr	r4, [r1, #16]
 80074da:	1b12      	subs	r2, r2, r4
 80074dc:	d10e      	bne.n	80074fc <__mcmp+0x28>
 80074de:	f100 0314 	add.w	r3, r0, #20
 80074e2:	3114      	adds	r1, #20
 80074e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074f4:	42a5      	cmp	r5, r4
 80074f6:	d003      	beq.n	8007500 <__mcmp+0x2c>
 80074f8:	d305      	bcc.n	8007506 <__mcmp+0x32>
 80074fa:	2201      	movs	r2, #1
 80074fc:	4610      	mov	r0, r2
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	4283      	cmp	r3, r0
 8007502:	d3f3      	bcc.n	80074ec <__mcmp+0x18>
 8007504:	e7fa      	b.n	80074fc <__mcmp+0x28>
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	e7f7      	b.n	80074fc <__mcmp+0x28>

0800750c <__mdiff>:
 800750c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	4606      	mov	r6, r0
 8007514:	4611      	mov	r1, r2
 8007516:	4620      	mov	r0, r4
 8007518:	4690      	mov	r8, r2
 800751a:	f7ff ffdb 	bl	80074d4 <__mcmp>
 800751e:	1e05      	subs	r5, r0, #0
 8007520:	d110      	bne.n	8007544 <__mdiff+0x38>
 8007522:	4629      	mov	r1, r5
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fd53 	bl	8006fd0 <_Balloc>
 800752a:	b930      	cbnz	r0, 800753a <__mdiff+0x2e>
 800752c:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <__mdiff+0x10c>)
 800752e:	4602      	mov	r2, r0
 8007530:	f240 2132 	movw	r1, #562	; 0x232
 8007534:	4839      	ldr	r0, [pc, #228]	; (800761c <__mdiff+0x110>)
 8007536:	f000 f9d5 	bl	80078e4 <__assert_func>
 800753a:	2301      	movs	r3, #1
 800753c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	bfa4      	itt	ge
 8007546:	4643      	movge	r3, r8
 8007548:	46a0      	movge	r8, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007550:	bfa6      	itte	ge
 8007552:	461c      	movge	r4, r3
 8007554:	2500      	movge	r5, #0
 8007556:	2501      	movlt	r5, #1
 8007558:	f7ff fd3a 	bl	8006fd0 <_Balloc>
 800755c:	b920      	cbnz	r0, 8007568 <__mdiff+0x5c>
 800755e:	4b2e      	ldr	r3, [pc, #184]	; (8007618 <__mdiff+0x10c>)
 8007560:	4602      	mov	r2, r0
 8007562:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007566:	e7e5      	b.n	8007534 <__mdiff+0x28>
 8007568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800756c:	6926      	ldr	r6, [r4, #16]
 800756e:	60c5      	str	r5, [r0, #12]
 8007570:	f104 0914 	add.w	r9, r4, #20
 8007574:	f108 0514 	add.w	r5, r8, #20
 8007578:	f100 0e14 	add.w	lr, r0, #20
 800757c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007584:	f108 0210 	add.w	r2, r8, #16
 8007588:	46f2      	mov	sl, lr
 800758a:	2100      	movs	r1, #0
 800758c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007594:	fa1f f883 	uxth.w	r8, r3
 8007598:	fa11 f18b 	uxtah	r1, r1, fp
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	eba1 0808 	sub.w	r8, r1, r8
 80075a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075aa:	fa1f f888 	uxth.w	r8, r8
 80075ae:	1419      	asrs	r1, r3, #16
 80075b0:	454e      	cmp	r6, r9
 80075b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075b6:	f84a 3b04 	str.w	r3, [sl], #4
 80075ba:	d8e7      	bhi.n	800758c <__mdiff+0x80>
 80075bc:	1b33      	subs	r3, r6, r4
 80075be:	3b15      	subs	r3, #21
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	3304      	adds	r3, #4
 80075c6:	3415      	adds	r4, #21
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	bf38      	it	cc
 80075cc:	2304      	movcc	r3, #4
 80075ce:	441d      	add	r5, r3
 80075d0:	4473      	add	r3, lr
 80075d2:	469e      	mov	lr, r3
 80075d4:	462e      	mov	r6, r5
 80075d6:	4566      	cmp	r6, ip
 80075d8:	d30e      	bcc.n	80075f8 <__mdiff+0xec>
 80075da:	f10c 0203 	add.w	r2, ip, #3
 80075de:	1b52      	subs	r2, r2, r5
 80075e0:	f022 0203 	bic.w	r2, r2, #3
 80075e4:	3d03      	subs	r5, #3
 80075e6:	45ac      	cmp	ip, r5
 80075e8:	bf38      	it	cc
 80075ea:	2200      	movcc	r2, #0
 80075ec:	441a      	add	r2, r3
 80075ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075f2:	b17b      	cbz	r3, 8007614 <__mdiff+0x108>
 80075f4:	6107      	str	r7, [r0, #16]
 80075f6:	e7a3      	b.n	8007540 <__mdiff+0x34>
 80075f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80075fc:	fa11 f288 	uxtah	r2, r1, r8
 8007600:	1414      	asrs	r4, r2, #16
 8007602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007606:	b292      	uxth	r2, r2
 8007608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800760c:	f84e 2b04 	str.w	r2, [lr], #4
 8007610:	1421      	asrs	r1, r4, #16
 8007612:	e7e0      	b.n	80075d6 <__mdiff+0xca>
 8007614:	3f01      	subs	r7, #1
 8007616:	e7ea      	b.n	80075ee <__mdiff+0xe2>
 8007618:	080084ff 	.word	0x080084ff
 800761c:	08008510 	.word	0x08008510

08007620 <__d2b>:
 8007620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4689      	mov	r9, r1
 8007626:	2101      	movs	r1, #1
 8007628:	ec57 6b10 	vmov	r6, r7, d0
 800762c:	4690      	mov	r8, r2
 800762e:	f7ff fccf 	bl	8006fd0 <_Balloc>
 8007632:	4604      	mov	r4, r0
 8007634:	b930      	cbnz	r0, 8007644 <__d2b+0x24>
 8007636:	4602      	mov	r2, r0
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <__d2b+0xb0>)
 800763a:	4826      	ldr	r0, [pc, #152]	; (80076d4 <__d2b+0xb4>)
 800763c:	f240 310a 	movw	r1, #778	; 0x30a
 8007640:	f000 f950 	bl	80078e4 <__assert_func>
 8007644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800764c:	bb35      	cbnz	r5, 800769c <__d2b+0x7c>
 800764e:	2e00      	cmp	r6, #0
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	d028      	beq.n	80076a6 <__d2b+0x86>
 8007654:	4668      	mov	r0, sp
 8007656:	9600      	str	r6, [sp, #0]
 8007658:	f7ff fd82 	bl	8007160 <__lo0bits>
 800765c:	9900      	ldr	r1, [sp, #0]
 800765e:	b300      	cbz	r0, 80076a2 <__d2b+0x82>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	f1c0 0320 	rsb	r3, r0, #32
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	430b      	orrs	r3, r1
 800766c:	40c2      	lsrs	r2, r0
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	61a3      	str	r3, [r4, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2202      	movne	r2, #2
 800767c:	2201      	moveq	r2, #1
 800767e:	6122      	str	r2, [r4, #16]
 8007680:	b1d5      	cbz	r5, 80076b8 <__d2b+0x98>
 8007682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007686:	4405      	add	r5, r0
 8007688:	f8c9 5000 	str.w	r5, [r9]
 800768c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007690:	f8c8 0000 	str.w	r0, [r8]
 8007694:	4620      	mov	r0, r4
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800769c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a0:	e7d5      	b.n	800764e <__d2b+0x2e>
 80076a2:	6161      	str	r1, [r4, #20]
 80076a4:	e7e5      	b.n	8007672 <__d2b+0x52>
 80076a6:	a801      	add	r0, sp, #4
 80076a8:	f7ff fd5a 	bl	8007160 <__lo0bits>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	6122      	str	r2, [r4, #16]
 80076b4:	3020      	adds	r0, #32
 80076b6:	e7e3      	b.n	8007680 <__d2b+0x60>
 80076b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c0:	f8c9 0000 	str.w	r0, [r9]
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f7ff fd2b 	bl	8007120 <__hi0bits>
 80076ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076ce:	e7df      	b.n	8007690 <__d2b+0x70>
 80076d0:	080084ff 	.word	0x080084ff
 80076d4:	08008510 	.word	0x08008510

080076d8 <_calloc_r>:
 80076d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076da:	fba1 2402 	umull	r2, r4, r1, r2
 80076de:	b94c      	cbnz	r4, 80076f4 <_calloc_r+0x1c>
 80076e0:	4611      	mov	r1, r2
 80076e2:	9201      	str	r2, [sp, #4]
 80076e4:	f000 f87a 	bl	80077dc <_malloc_r>
 80076e8:	9a01      	ldr	r2, [sp, #4]
 80076ea:	4605      	mov	r5, r0
 80076ec:	b930      	cbnz	r0, 80076fc <_calloc_r+0x24>
 80076ee:	4628      	mov	r0, r5
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	220c      	movs	r2, #12
 80076f6:	6002      	str	r2, [r0, #0]
 80076f8:	2500      	movs	r5, #0
 80076fa:	e7f8      	b.n	80076ee <_calloc_r+0x16>
 80076fc:	4621      	mov	r1, r4
 80076fe:	f7fe f95f 	bl	80059c0 <memset>
 8007702:	e7f4      	b.n	80076ee <_calloc_r+0x16>

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d044      	beq.n	8007794 <_free_r+0x90>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f1a1 0404 	sub.w	r4, r1, #4
 8007716:	bfb8      	it	lt
 8007718:	18e4      	addlt	r4, r4, r3
 800771a:	f000 f925 	bl	8007968 <__malloc_lock>
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x30>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007730:	f000 b920 	b.w	8007974 <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x46>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x22>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x50>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x46>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1855      	adds	r5, r2, r1
 8007758:	42a5      	cmp	r5, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x70>
 800775c:	6824      	ldr	r4, [r4, #0]
 800775e:	4421      	add	r1, r4
 8007760:	1854      	adds	r4, r2, r1
 8007762:	42a3      	cmp	r3, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x26>
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	4421      	add	r1, r4
 8007770:	6011      	str	r1, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x26>
 8007774:	d902      	bls.n	800777c <_free_r+0x78>
 8007776:	230c      	movs	r3, #12
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x26>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1949      	addeq	r1, r1, r5
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x26>
 8007794:	b003      	add	sp, #12
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	20000378 	.word	0x20000378

0800779c <sbrk_aligned>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4e0e      	ldr	r6, [pc, #56]	; (80077d8 <sbrk_aligned+0x3c>)
 80077a0:	460c      	mov	r4, r1
 80077a2:	6831      	ldr	r1, [r6, #0]
 80077a4:	4605      	mov	r5, r0
 80077a6:	b911      	cbnz	r1, 80077ae <sbrk_aligned+0x12>
 80077a8:	f000 f88c 	bl	80078c4 <_sbrk_r>
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f887 	bl	80078c4 <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d00a      	beq.n	80077d0 <sbrk_aligned+0x34>
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d007      	beq.n	80077d4 <sbrk_aligned+0x38>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f87c 	bl	80078c4 <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d101      	bne.n	80077d4 <sbrk_aligned+0x38>
 80077d0:	f04f 34ff 	mov.w	r4, #4294967295
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	2000037c 	.word	0x2000037c

080077dc <_malloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	1ccd      	adds	r5, r1, #3
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	4607      	mov	r7, r0
 80077f2:	db01      	blt.n	80077f8 <_malloc_r+0x1c>
 80077f4:	42a9      	cmp	r1, r5
 80077f6:	d905      	bls.n	8007804 <_malloc_r+0x28>
 80077f8:	230c      	movs	r3, #12
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	2600      	movs	r6, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	4e2e      	ldr	r6, [pc, #184]	; (80078c0 <_malloc_r+0xe4>)
 8007806:	f000 f8af 	bl	8007968 <__malloc_lock>
 800780a:	6833      	ldr	r3, [r6, #0]
 800780c:	461c      	mov	r4, r3
 800780e:	bb34      	cbnz	r4, 800785e <_malloc_r+0x82>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ffc2 	bl	800779c <sbrk_aligned>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	4604      	mov	r4, r0
 800781c:	d14d      	bne.n	80078ba <_malloc_r+0xde>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	4626      	mov	r6, r4
 8007822:	2e00      	cmp	r6, #0
 8007824:	d140      	bne.n	80078a8 <_malloc_r+0xcc>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4631      	mov	r1, r6
 800782a:	4638      	mov	r0, r7
 800782c:	eb04 0803 	add.w	r8, r4, r3
 8007830:	f000 f848 	bl	80078c4 <_sbrk_r>
 8007834:	4580      	cmp	r8, r0
 8007836:	d13a      	bne.n	80078ae <_malloc_r+0xd2>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	3503      	adds	r5, #3
 800783c:	1a6d      	subs	r5, r5, r1
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	4629      	mov	r1, r5
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ffa5 	bl	800779c <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d02b      	beq.n	80078ae <_malloc_r+0xd2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	e00e      	b.n	800787c <_malloc_r+0xa0>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	1b52      	subs	r2, r2, r5
 8007862:	d41e      	bmi.n	80078a2 <_malloc_r+0xc6>
 8007864:	2a0b      	cmp	r2, #11
 8007866:	d916      	bls.n	8007896 <_malloc_r+0xba>
 8007868:	1961      	adds	r1, r4, r5
 800786a:	42a3      	cmp	r3, r4
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	bf18      	it	ne
 8007870:	6059      	strne	r1, [r3, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	bf08      	it	eq
 8007876:	6031      	streq	r1, [r6, #0]
 8007878:	5162      	str	r2, [r4, r5]
 800787a:	604b      	str	r3, [r1, #4]
 800787c:	4638      	mov	r0, r7
 800787e:	f104 060b 	add.w	r6, r4, #11
 8007882:	f000 f877 	bl	8007974 <__malloc_unlock>
 8007886:	f026 0607 	bic.w	r6, r6, #7
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	1af2      	subs	r2, r6, r3
 800788e:	d0b6      	beq.n	80077fe <_malloc_r+0x22>
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	50a3      	str	r3, [r4, r2]
 8007894:	e7b3      	b.n	80077fe <_malloc_r+0x22>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	bf0c      	ite	eq
 800789c:	6032      	streq	r2, [r6, #0]
 800789e:	605a      	strne	r2, [r3, #4]
 80078a0:	e7ec      	b.n	800787c <_malloc_r+0xa0>
 80078a2:	4623      	mov	r3, r4
 80078a4:	6864      	ldr	r4, [r4, #4]
 80078a6:	e7b2      	b.n	800780e <_malloc_r+0x32>
 80078a8:	4634      	mov	r4, r6
 80078aa:	6876      	ldr	r6, [r6, #4]
 80078ac:	e7b9      	b.n	8007822 <_malloc_r+0x46>
 80078ae:	230c      	movs	r3, #12
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4638      	mov	r0, r7
 80078b4:	f000 f85e 	bl	8007974 <__malloc_unlock>
 80078b8:	e7a1      	b.n	80077fe <_malloc_r+0x22>
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	e7de      	b.n	800787c <_malloc_r+0xa0>
 80078be:	bf00      	nop
 80078c0:	20000378 	.word	0x20000378

080078c4 <_sbrk_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d06      	ldr	r5, [pc, #24]	; (80078e0 <_sbrk_r+0x1c>)
 80078c8:	2300      	movs	r3, #0
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7f9 fed6 	bl	8001680 <_sbrk>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_sbrk_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_sbrk_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000380 	.word	0x20000380

080078e4 <__assert_func>:
 80078e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e6:	4614      	mov	r4, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <__assert_func+0x2c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4605      	mov	r5, r0
 80078f0:	68d8      	ldr	r0, [r3, #12]
 80078f2:	b14c      	cbz	r4, 8007908 <__assert_func+0x24>
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <__assert_func+0x30>)
 80078f6:	9100      	str	r1, [sp, #0]
 80078f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078fc:	4906      	ldr	r1, [pc, #24]	; (8007918 <__assert_func+0x34>)
 80078fe:	462b      	mov	r3, r5
 8007900:	f000 f80e 	bl	8007920 <fiprintf>
 8007904:	f000 fa64 	bl	8007dd0 <abort>
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <__assert_func+0x38>)
 800790a:	461c      	mov	r4, r3
 800790c:	e7f3      	b.n	80078f6 <__assert_func+0x12>
 800790e:	bf00      	nop
 8007910:	2000000c 	.word	0x2000000c
 8007914:	0800866c 	.word	0x0800866c
 8007918:	08008679 	.word	0x08008679
 800791c:	080086a7 	.word	0x080086a7

08007920 <fiprintf>:
 8007920:	b40e      	push	{r1, r2, r3}
 8007922:	b503      	push	{r0, r1, lr}
 8007924:	4601      	mov	r1, r0
 8007926:	ab03      	add	r3, sp, #12
 8007928:	4805      	ldr	r0, [pc, #20]	; (8007940 <fiprintf+0x20>)
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	6800      	ldr	r0, [r0, #0]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f000 f84f 	bl	80079d4 <_vfiprintf_r>
 8007936:	b002      	add	sp, #8
 8007938:	f85d eb04 	ldr.w	lr, [sp], #4
 800793c:	b003      	add	sp, #12
 800793e:	4770      	bx	lr
 8007940:	2000000c 	.word	0x2000000c

08007944 <__ascii_mbtowc>:
 8007944:	b082      	sub	sp, #8
 8007946:	b901      	cbnz	r1, 800794a <__ascii_mbtowc+0x6>
 8007948:	a901      	add	r1, sp, #4
 800794a:	b142      	cbz	r2, 800795e <__ascii_mbtowc+0x1a>
 800794c:	b14b      	cbz	r3, 8007962 <__ascii_mbtowc+0x1e>
 800794e:	7813      	ldrb	r3, [r2, #0]
 8007950:	600b      	str	r3, [r1, #0]
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	1e10      	subs	r0, r2, #0
 8007956:	bf18      	it	ne
 8007958:	2001      	movne	r0, #1
 800795a:	b002      	add	sp, #8
 800795c:	4770      	bx	lr
 800795e:	4610      	mov	r0, r2
 8007960:	e7fb      	b.n	800795a <__ascii_mbtowc+0x16>
 8007962:	f06f 0001 	mvn.w	r0, #1
 8007966:	e7f8      	b.n	800795a <__ascii_mbtowc+0x16>

08007968 <__malloc_lock>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__malloc_lock+0x8>)
 800796a:	f000 bbf1 	b.w	8008150 <__retarget_lock_acquire_recursive>
 800796e:	bf00      	nop
 8007970:	20000384 	.word	0x20000384

08007974 <__malloc_unlock>:
 8007974:	4801      	ldr	r0, [pc, #4]	; (800797c <__malloc_unlock+0x8>)
 8007976:	f000 bbec 	b.w	8008152 <__retarget_lock_release_recursive>
 800797a:	bf00      	nop
 800797c:	20000384 	.word	0x20000384

08007980 <__sfputc_r>:
 8007980:	6893      	ldr	r3, [r2, #8]
 8007982:	3b01      	subs	r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	b410      	push	{r4}
 8007988:	6093      	str	r3, [r2, #8]
 800798a:	da08      	bge.n	800799e <__sfputc_r+0x1e>
 800798c:	6994      	ldr	r4, [r2, #24]
 800798e:	42a3      	cmp	r3, r4
 8007990:	db01      	blt.n	8007996 <__sfputc_r+0x16>
 8007992:	290a      	cmp	r1, #10
 8007994:	d103      	bne.n	800799e <__sfputc_r+0x1e>
 8007996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800799a:	f000 b94b 	b.w	8007c34 <__swbuf_r>
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	1c58      	adds	r0, r3, #1
 80079a2:	6010      	str	r0, [r2, #0]
 80079a4:	7019      	strb	r1, [r3, #0]
 80079a6:	4608      	mov	r0, r1
 80079a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <__sfputs_r>:
 80079ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b0:	4606      	mov	r6, r0
 80079b2:	460f      	mov	r7, r1
 80079b4:	4614      	mov	r4, r2
 80079b6:	18d5      	adds	r5, r2, r3
 80079b8:	42ac      	cmp	r4, r5
 80079ba:	d101      	bne.n	80079c0 <__sfputs_r+0x12>
 80079bc:	2000      	movs	r0, #0
 80079be:	e007      	b.n	80079d0 <__sfputs_r+0x22>
 80079c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c4:	463a      	mov	r2, r7
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ffda 	bl	8007980 <__sfputc_r>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d1f3      	bne.n	80079b8 <__sfputs_r+0xa>
 80079d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079d4 <_vfiprintf_r>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	460d      	mov	r5, r1
 80079da:	b09d      	sub	sp, #116	; 0x74
 80079dc:	4614      	mov	r4, r2
 80079de:	4698      	mov	r8, r3
 80079e0:	4606      	mov	r6, r0
 80079e2:	b118      	cbz	r0, 80079ec <_vfiprintf_r+0x18>
 80079e4:	6983      	ldr	r3, [r0, #24]
 80079e6:	b90b      	cbnz	r3, 80079ec <_vfiprintf_r+0x18>
 80079e8:	f000 fb14 	bl	8008014 <__sinit>
 80079ec:	4b89      	ldr	r3, [pc, #548]	; (8007c14 <_vfiprintf_r+0x240>)
 80079ee:	429d      	cmp	r5, r3
 80079f0:	d11b      	bne.n	8007a2a <_vfiprintf_r+0x56>
 80079f2:	6875      	ldr	r5, [r6, #4]
 80079f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f6:	07d9      	lsls	r1, r3, #31
 80079f8:	d405      	bmi.n	8007a06 <_vfiprintf_r+0x32>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	059a      	lsls	r2, r3, #22
 80079fe:	d402      	bmi.n	8007a06 <_vfiprintf_r+0x32>
 8007a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a02:	f000 fba5 	bl	8008150 <__retarget_lock_acquire_recursive>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	071b      	lsls	r3, r3, #28
 8007a0a:	d501      	bpl.n	8007a10 <_vfiprintf_r+0x3c>
 8007a0c:	692b      	ldr	r3, [r5, #16]
 8007a0e:	b9eb      	cbnz	r3, 8007a4c <_vfiprintf_r+0x78>
 8007a10:	4629      	mov	r1, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	f000 f96e 	bl	8007cf4 <__swsetup_r>
 8007a18:	b1c0      	cbz	r0, 8007a4c <_vfiprintf_r+0x78>
 8007a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a1c:	07dc      	lsls	r4, r3, #31
 8007a1e:	d50e      	bpl.n	8007a3e <_vfiprintf_r+0x6a>
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	b01d      	add	sp, #116	; 0x74
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	4b7b      	ldr	r3, [pc, #492]	; (8007c18 <_vfiprintf_r+0x244>)
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	d101      	bne.n	8007a34 <_vfiprintf_r+0x60>
 8007a30:	68b5      	ldr	r5, [r6, #8]
 8007a32:	e7df      	b.n	80079f4 <_vfiprintf_r+0x20>
 8007a34:	4b79      	ldr	r3, [pc, #484]	; (8007c1c <_vfiprintf_r+0x248>)
 8007a36:	429d      	cmp	r5, r3
 8007a38:	bf08      	it	eq
 8007a3a:	68f5      	ldreq	r5, [r6, #12]
 8007a3c:	e7da      	b.n	80079f4 <_vfiprintf_r+0x20>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	0598      	lsls	r0, r3, #22
 8007a42:	d4ed      	bmi.n	8007a20 <_vfiprintf_r+0x4c>
 8007a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a46:	f000 fb84 	bl	8008152 <__retarget_lock_release_recursive>
 8007a4a:	e7e9      	b.n	8007a20 <_vfiprintf_r+0x4c>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	2320      	movs	r3, #32
 8007a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a5a:	2330      	movs	r3, #48	; 0x30
 8007a5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c20 <_vfiprintf_r+0x24c>
 8007a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a64:	f04f 0901 	mov.w	r9, #1
 8007a68:	4623      	mov	r3, r4
 8007a6a:	469a      	mov	sl, r3
 8007a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a70:	b10a      	cbz	r2, 8007a76 <_vfiprintf_r+0xa2>
 8007a72:	2a25      	cmp	r2, #37	; 0x25
 8007a74:	d1f9      	bne.n	8007a6a <_vfiprintf_r+0x96>
 8007a76:	ebba 0b04 	subs.w	fp, sl, r4
 8007a7a:	d00b      	beq.n	8007a94 <_vfiprintf_r+0xc0>
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff93 	bl	80079ae <__sfputs_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f000 80aa 	beq.w	8007be2 <_vfiprintf_r+0x20e>
 8007a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a90:	445a      	add	r2, fp
 8007a92:	9209      	str	r2, [sp, #36]	; 0x24
 8007a94:	f89a 3000 	ldrb.w	r3, [sl]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a2 	beq.w	8007be2 <_vfiprintf_r+0x20e>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa8:	f10a 0a01 	add.w	sl, sl, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	9307      	str	r3, [sp, #28]
 8007ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2205      	movs	r2, #5
 8007aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007abe:	4858      	ldr	r0, [pc, #352]	; (8007c20 <_vfiprintf_r+0x24c>)
 8007ac0:	f7f8 fb8e 	bl	80001e0 <memchr>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	b9d8      	cbnz	r0, 8007b00 <_vfiprintf_r+0x12c>
 8007ac8:	06d1      	lsls	r1, r2, #27
 8007aca:	bf44      	itt	mi
 8007acc:	2320      	movmi	r3, #32
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	0713      	lsls	r3, r2, #28
 8007ad4:	bf44      	itt	mi
 8007ad6:	232b      	movmi	r3, #43	; 0x2b
 8007ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007adc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae2:	d015      	beq.n	8007b10 <_vfiprintf_r+0x13c>
 8007ae4:	9a07      	ldr	r2, [sp, #28]
 8007ae6:	4654      	mov	r4, sl
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4621      	mov	r1, r4
 8007af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af4:	3b30      	subs	r3, #48	; 0x30
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d94e      	bls.n	8007b98 <_vfiprintf_r+0x1c4>
 8007afa:	b1b0      	cbz	r0, 8007b2a <_vfiprintf_r+0x156>
 8007afc:	9207      	str	r2, [sp, #28]
 8007afe:	e014      	b.n	8007b2a <_vfiprintf_r+0x156>
 8007b00:	eba0 0308 	sub.w	r3, r0, r8
 8007b04:	fa09 f303 	lsl.w	r3, r9, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	46a2      	mov	sl, r4
 8007b0e:	e7d2      	b.n	8007ab6 <_vfiprintf_r+0xe2>
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	1d19      	adds	r1, r3, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	9103      	str	r1, [sp, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bfbb      	ittet	lt
 8007b1c:	425b      	neglt	r3, r3
 8007b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b22:	9307      	strge	r3, [sp, #28]
 8007b24:	9307      	strlt	r3, [sp, #28]
 8007b26:	bfb8      	it	lt
 8007b28:	9204      	strlt	r2, [sp, #16]
 8007b2a:	7823      	ldrb	r3, [r4, #0]
 8007b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b2e:	d10c      	bne.n	8007b4a <_vfiprintf_r+0x176>
 8007b30:	7863      	ldrb	r3, [r4, #1]
 8007b32:	2b2a      	cmp	r3, #42	; 0x2a
 8007b34:	d135      	bne.n	8007ba2 <_vfiprintf_r+0x1ce>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9203      	str	r2, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfb8      	it	lt
 8007b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b46:	3402      	adds	r4, #2
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c30 <_vfiprintf_r+0x25c>
 8007b4e:	7821      	ldrb	r1, [r4, #0]
 8007b50:	2203      	movs	r2, #3
 8007b52:	4650      	mov	r0, sl
 8007b54:	f7f8 fb44 	bl	80001e0 <memchr>
 8007b58:	b140      	cbz	r0, 8007b6c <_vfiprintf_r+0x198>
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	eba0 000a 	sub.w	r0, r0, sl
 8007b60:	fa03 f000 	lsl.w	r0, r3, r0
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	4303      	orrs	r3, r0
 8007b68:	3401      	adds	r4, #1
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b70:	482c      	ldr	r0, [pc, #176]	; (8007c24 <_vfiprintf_r+0x250>)
 8007b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b76:	2206      	movs	r2, #6
 8007b78:	f7f8 fb32 	bl	80001e0 <memchr>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d03f      	beq.n	8007c00 <_vfiprintf_r+0x22c>
 8007b80:	4b29      	ldr	r3, [pc, #164]	; (8007c28 <_vfiprintf_r+0x254>)
 8007b82:	bb1b      	cbnz	r3, 8007bcc <_vfiprintf_r+0x1f8>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	3307      	adds	r3, #7
 8007b88:	f023 0307 	bic.w	r3, r3, #7
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b92:	443b      	add	r3, r7
 8007b94:	9309      	str	r3, [sp, #36]	; 0x24
 8007b96:	e767      	b.n	8007a68 <_vfiprintf_r+0x94>
 8007b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	e7a5      	b.n	8007aee <_vfiprintf_r+0x11a>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	f04f 0c0a 	mov.w	ip, #10
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb4:	3a30      	subs	r2, #48	; 0x30
 8007bb6:	2a09      	cmp	r2, #9
 8007bb8:	d903      	bls.n	8007bc2 <_vfiprintf_r+0x1ee>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0c5      	beq.n	8007b4a <_vfiprintf_r+0x176>
 8007bbe:	9105      	str	r1, [sp, #20]
 8007bc0:	e7c3      	b.n	8007b4a <_vfiprintf_r+0x176>
 8007bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7f0      	b.n	8007bae <_vfiprintf_r+0x1da>
 8007bcc:	ab03      	add	r3, sp, #12
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	4b16      	ldr	r3, [pc, #88]	; (8007c2c <_vfiprintf_r+0x258>)
 8007bd4:	a904      	add	r1, sp, #16
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7fd ff9a 	bl	8005b10 <_printf_float>
 8007bdc:	4607      	mov	r7, r0
 8007bde:	1c78      	adds	r0, r7, #1
 8007be0:	d1d6      	bne.n	8007b90 <_vfiprintf_r+0x1bc>
 8007be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be4:	07d9      	lsls	r1, r3, #31
 8007be6:	d405      	bmi.n	8007bf4 <_vfiprintf_r+0x220>
 8007be8:	89ab      	ldrh	r3, [r5, #12]
 8007bea:	059a      	lsls	r2, r3, #22
 8007bec:	d402      	bmi.n	8007bf4 <_vfiprintf_r+0x220>
 8007bee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf0:	f000 faaf 	bl	8008152 <__retarget_lock_release_recursive>
 8007bf4:	89ab      	ldrh	r3, [r5, #12]
 8007bf6:	065b      	lsls	r3, r3, #25
 8007bf8:	f53f af12 	bmi.w	8007a20 <_vfiprintf_r+0x4c>
 8007bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bfe:	e711      	b.n	8007a24 <_vfiprintf_r+0x50>
 8007c00:	ab03      	add	r3, sp, #12
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	462a      	mov	r2, r5
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <_vfiprintf_r+0x258>)
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7fe fa24 	bl	8006058 <_printf_i>
 8007c10:	e7e4      	b.n	8007bdc <_vfiprintf_r+0x208>
 8007c12:	bf00      	nop
 8007c14:	080087e4 	.word	0x080087e4
 8007c18:	08008804 	.word	0x08008804
 8007c1c:	080087c4 	.word	0x080087c4
 8007c20:	080086b2 	.word	0x080086b2
 8007c24:	080086bc 	.word	0x080086bc
 8007c28:	08005b11 	.word	0x08005b11
 8007c2c:	080079af 	.word	0x080079af
 8007c30:	080086b8 	.word	0x080086b8

08007c34 <__swbuf_r>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	460e      	mov	r6, r1
 8007c38:	4614      	mov	r4, r2
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	b118      	cbz	r0, 8007c46 <__swbuf_r+0x12>
 8007c3e:	6983      	ldr	r3, [r0, #24]
 8007c40:	b90b      	cbnz	r3, 8007c46 <__swbuf_r+0x12>
 8007c42:	f000 f9e7 	bl	8008014 <__sinit>
 8007c46:	4b21      	ldr	r3, [pc, #132]	; (8007ccc <__swbuf_r+0x98>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	d12b      	bne.n	8007ca4 <__swbuf_r+0x70>
 8007c4c:	686c      	ldr	r4, [r5, #4]
 8007c4e:	69a3      	ldr	r3, [r4, #24]
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	071a      	lsls	r2, r3, #28
 8007c56:	d52f      	bpl.n	8007cb8 <__swbuf_r+0x84>
 8007c58:	6923      	ldr	r3, [r4, #16]
 8007c5a:	b36b      	cbz	r3, 8007cb8 <__swbuf_r+0x84>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1ac0      	subs	r0, r0, r3
 8007c62:	6963      	ldr	r3, [r4, #20]
 8007c64:	b2f6      	uxtb	r6, r6
 8007c66:	4283      	cmp	r3, r0
 8007c68:	4637      	mov	r7, r6
 8007c6a:	dc04      	bgt.n	8007c76 <__swbuf_r+0x42>
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f93c 	bl	8007eec <_fflush_r>
 8007c74:	bb30      	cbnz	r0, 8007cc4 <__swbuf_r+0x90>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60a3      	str	r3, [r4, #8]
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	701e      	strb	r6, [r3, #0]
 8007c84:	6963      	ldr	r3, [r4, #20]
 8007c86:	3001      	adds	r0, #1
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	d004      	beq.n	8007c96 <__swbuf_r+0x62>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	07db      	lsls	r3, r3, #31
 8007c90:	d506      	bpl.n	8007ca0 <__swbuf_r+0x6c>
 8007c92:	2e0a      	cmp	r6, #10
 8007c94:	d104      	bne.n	8007ca0 <__swbuf_r+0x6c>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 f927 	bl	8007eec <_fflush_r>
 8007c9e:	b988      	cbnz	r0, 8007cc4 <__swbuf_r+0x90>
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <__swbuf_r+0x9c>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d101      	bne.n	8007cae <__swbuf_r+0x7a>
 8007caa:	68ac      	ldr	r4, [r5, #8]
 8007cac:	e7cf      	b.n	8007c4e <__swbuf_r+0x1a>
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <__swbuf_r+0xa0>)
 8007cb0:	429c      	cmp	r4, r3
 8007cb2:	bf08      	it	eq
 8007cb4:	68ec      	ldreq	r4, [r5, #12]
 8007cb6:	e7ca      	b.n	8007c4e <__swbuf_r+0x1a>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 f81a 	bl	8007cf4 <__swsetup_r>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0cb      	beq.n	8007c5c <__swbuf_r+0x28>
 8007cc4:	f04f 37ff 	mov.w	r7, #4294967295
 8007cc8:	e7ea      	b.n	8007ca0 <__swbuf_r+0x6c>
 8007cca:	bf00      	nop
 8007ccc:	080087e4 	.word	0x080087e4
 8007cd0:	08008804 	.word	0x08008804
 8007cd4:	080087c4 	.word	0x080087c4

08007cd8 <__ascii_wctomb>:
 8007cd8:	b149      	cbz	r1, 8007cee <__ascii_wctomb+0x16>
 8007cda:	2aff      	cmp	r2, #255	; 0xff
 8007cdc:	bf85      	ittet	hi
 8007cde:	238a      	movhi	r3, #138	; 0x8a
 8007ce0:	6003      	strhi	r3, [r0, #0]
 8007ce2:	700a      	strbls	r2, [r1, #0]
 8007ce4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ce8:	bf98      	it	ls
 8007cea:	2001      	movls	r0, #1
 8007cec:	4770      	bx	lr
 8007cee:	4608      	mov	r0, r1
 8007cf0:	4770      	bx	lr
	...

08007cf4 <__swsetup_r>:
 8007cf4:	4b32      	ldr	r3, [pc, #200]	; (8007dc0 <__swsetup_r+0xcc>)
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	b125      	cbz	r5, 8007d0a <__swsetup_r+0x16>
 8007d00:	69ab      	ldr	r3, [r5, #24]
 8007d02:	b913      	cbnz	r3, 8007d0a <__swsetup_r+0x16>
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 f985 	bl	8008014 <__sinit>
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <__swsetup_r+0xd0>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d10f      	bne.n	8007d30 <__swsetup_r+0x3c>
 8007d10:	686c      	ldr	r4, [r5, #4]
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d18:	0719      	lsls	r1, r3, #28
 8007d1a:	d42c      	bmi.n	8007d76 <__swsetup_r+0x82>
 8007d1c:	06dd      	lsls	r5, r3, #27
 8007d1e:	d411      	bmi.n	8007d44 <__swsetup_r+0x50>
 8007d20:	2309      	movs	r3, #9
 8007d22:	6033      	str	r3, [r6, #0]
 8007d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	e03e      	b.n	8007dae <__swsetup_r+0xba>
 8007d30:	4b25      	ldr	r3, [pc, #148]	; (8007dc8 <__swsetup_r+0xd4>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <__swsetup_r+0x46>
 8007d36:	68ac      	ldr	r4, [r5, #8]
 8007d38:	e7eb      	b.n	8007d12 <__swsetup_r+0x1e>
 8007d3a:	4b24      	ldr	r3, [pc, #144]	; (8007dcc <__swsetup_r+0xd8>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68ec      	ldreq	r4, [r5, #12]
 8007d42:	e7e6      	b.n	8007d12 <__swsetup_r+0x1e>
 8007d44:	0758      	lsls	r0, r3, #29
 8007d46:	d512      	bpl.n	8007d6e <__swsetup_r+0x7a>
 8007d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4a:	b141      	cbz	r1, 8007d5e <__swsetup_r+0x6a>
 8007d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d50:	4299      	cmp	r1, r3
 8007d52:	d002      	beq.n	8007d5a <__swsetup_r+0x66>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff fcd5 	bl	8007704 <_free_r>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	f043 0308 	orr.w	r3, r3, #8
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	b94b      	cbnz	r3, 8007d8e <__swsetup_r+0x9a>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d84:	d003      	beq.n	8007d8e <__swsetup_r+0x9a>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 fa09 	bl	80081a0 <__smakebuf_r>
 8007d8e:	89a0      	ldrh	r0, [r4, #12]
 8007d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d94:	f010 0301 	ands.w	r3, r0, #1
 8007d98:	d00a      	beq.n	8007db0 <__swsetup_r+0xbc>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	6963      	ldr	r3, [r4, #20]
 8007da0:	425b      	negs	r3, r3
 8007da2:	61a3      	str	r3, [r4, #24]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b943      	cbnz	r3, 8007dba <__swsetup_r+0xc6>
 8007da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dac:	d1ba      	bne.n	8007d24 <__swsetup_r+0x30>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	0781      	lsls	r1, r0, #30
 8007db2:	bf58      	it	pl
 8007db4:	6963      	ldrpl	r3, [r4, #20]
 8007db6:	60a3      	str	r3, [r4, #8]
 8007db8:	e7f4      	b.n	8007da4 <__swsetup_r+0xb0>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e7f7      	b.n	8007dae <__swsetup_r+0xba>
 8007dbe:	bf00      	nop
 8007dc0:	2000000c 	.word	0x2000000c
 8007dc4:	080087e4 	.word	0x080087e4
 8007dc8:	08008804 	.word	0x08008804
 8007dcc:	080087c4 	.word	0x080087c4

08007dd0 <abort>:
 8007dd0:	b508      	push	{r3, lr}
 8007dd2:	2006      	movs	r0, #6
 8007dd4:	f000 fa4c 	bl	8008270 <raise>
 8007dd8:	2001      	movs	r0, #1
 8007dda:	f7f9 fbd9 	bl	8001590 <_exit>
	...

08007de0 <__sflush_r>:
 8007de0:	898a      	ldrh	r2, [r1, #12]
 8007de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de6:	4605      	mov	r5, r0
 8007de8:	0710      	lsls	r0, r2, #28
 8007dea:	460c      	mov	r4, r1
 8007dec:	d458      	bmi.n	8007ea0 <__sflush_r+0xc0>
 8007dee:	684b      	ldr	r3, [r1, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dc05      	bgt.n	8007e00 <__sflush_r+0x20>
 8007df4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dc02      	bgt.n	8007e00 <__sflush_r+0x20>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	d0f9      	beq.n	8007dfa <__sflush_r+0x1a>
 8007e06:	2300      	movs	r3, #0
 8007e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e0c:	682f      	ldr	r7, [r5, #0]
 8007e0e:	602b      	str	r3, [r5, #0]
 8007e10:	d032      	beq.n	8007e78 <__sflush_r+0x98>
 8007e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	075a      	lsls	r2, r3, #29
 8007e18:	d505      	bpl.n	8007e26 <__sflush_r+0x46>
 8007e1a:	6863      	ldr	r3, [r4, #4]
 8007e1c:	1ac0      	subs	r0, r0, r3
 8007e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e20:	b10b      	cbz	r3, 8007e26 <__sflush_r+0x46>
 8007e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e24:	1ac0      	subs	r0, r0, r3
 8007e26:	2300      	movs	r3, #0
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e2c:	6a21      	ldr	r1, [r4, #32]
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b0      	blx	r6
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	d106      	bne.n	8007e46 <__sflush_r+0x66>
 8007e38:	6829      	ldr	r1, [r5, #0]
 8007e3a:	291d      	cmp	r1, #29
 8007e3c:	d82c      	bhi.n	8007e98 <__sflush_r+0xb8>
 8007e3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ee8 <__sflush_r+0x108>)
 8007e40:	40ca      	lsrs	r2, r1
 8007e42:	07d6      	lsls	r6, r2, #31
 8007e44:	d528      	bpl.n	8007e98 <__sflush_r+0xb8>
 8007e46:	2200      	movs	r2, #0
 8007e48:	6062      	str	r2, [r4, #4]
 8007e4a:	04d9      	lsls	r1, r3, #19
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	d504      	bpl.n	8007e5c <__sflush_r+0x7c>
 8007e52:	1c42      	adds	r2, r0, #1
 8007e54:	d101      	bne.n	8007e5a <__sflush_r+0x7a>
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	b903      	cbnz	r3, 8007e5c <__sflush_r+0x7c>
 8007e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e5e:	602f      	str	r7, [r5, #0]
 8007e60:	2900      	cmp	r1, #0
 8007e62:	d0ca      	beq.n	8007dfa <__sflush_r+0x1a>
 8007e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	d002      	beq.n	8007e72 <__sflush_r+0x92>
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f7ff fc49 	bl	8007704 <_free_r>
 8007e72:	2000      	movs	r0, #0
 8007e74:	6360      	str	r0, [r4, #52]	; 0x34
 8007e76:	e7c1      	b.n	8007dfc <__sflush_r+0x1c>
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b0      	blx	r6
 8007e80:	1c41      	adds	r1, r0, #1
 8007e82:	d1c7      	bne.n	8007e14 <__sflush_r+0x34>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0c4      	beq.n	8007e14 <__sflush_r+0x34>
 8007e8a:	2b1d      	cmp	r3, #29
 8007e8c:	d001      	beq.n	8007e92 <__sflush_r+0xb2>
 8007e8e:	2b16      	cmp	r3, #22
 8007e90:	d101      	bne.n	8007e96 <__sflush_r+0xb6>
 8007e92:	602f      	str	r7, [r5, #0]
 8007e94:	e7b1      	b.n	8007dfa <__sflush_r+0x1a>
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	e7ad      	b.n	8007dfc <__sflush_r+0x1c>
 8007ea0:	690f      	ldr	r7, [r1, #16]
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	d0a9      	beq.n	8007dfa <__sflush_r+0x1a>
 8007ea6:	0793      	lsls	r3, r2, #30
 8007ea8:	680e      	ldr	r6, [r1, #0]
 8007eaa:	bf08      	it	eq
 8007eac:	694b      	ldreq	r3, [r1, #20]
 8007eae:	600f      	str	r7, [r1, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	2300      	movne	r3, #0
 8007eb4:	eba6 0807 	sub.w	r8, r6, r7
 8007eb8:	608b      	str	r3, [r1, #8]
 8007eba:	f1b8 0f00 	cmp.w	r8, #0
 8007ebe:	dd9c      	ble.n	8007dfa <__sflush_r+0x1a>
 8007ec0:	6a21      	ldr	r1, [r4, #32]
 8007ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ec4:	4643      	mov	r3, r8
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	dc06      	bgt.n	8007ede <__sflush_r+0xfe>
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	e78e      	b.n	8007dfc <__sflush_r+0x1c>
 8007ede:	4407      	add	r7, r0
 8007ee0:	eba8 0800 	sub.w	r8, r8, r0
 8007ee4:	e7e9      	b.n	8007eba <__sflush_r+0xda>
 8007ee6:	bf00      	nop
 8007ee8:	20400001 	.word	0x20400001

08007eec <_fflush_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	b913      	cbnz	r3, 8007efc <_fflush_r+0x10>
 8007ef6:	2500      	movs	r5, #0
 8007ef8:	4628      	mov	r0, r5
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	b118      	cbz	r0, 8007f06 <_fflush_r+0x1a>
 8007efe:	6983      	ldr	r3, [r0, #24]
 8007f00:	b90b      	cbnz	r3, 8007f06 <_fflush_r+0x1a>
 8007f02:	f000 f887 	bl	8008014 <__sinit>
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <_fflush_r+0x6c>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d11b      	bne.n	8007f44 <_fflush_r+0x58>
 8007f0c:	686c      	ldr	r4, [r5, #4]
 8007f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0ef      	beq.n	8007ef6 <_fflush_r+0xa>
 8007f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f18:	07d0      	lsls	r0, r2, #31
 8007f1a:	d404      	bmi.n	8007f26 <_fflush_r+0x3a>
 8007f1c:	0599      	lsls	r1, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_fflush_r+0x3a>
 8007f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f22:	f000 f915 	bl	8008150 <__retarget_lock_acquire_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f7ff ff59 	bl	8007de0 <__sflush_r>
 8007f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f30:	07da      	lsls	r2, r3, #31
 8007f32:	4605      	mov	r5, r0
 8007f34:	d4e0      	bmi.n	8007ef8 <_fflush_r+0xc>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	059b      	lsls	r3, r3, #22
 8007f3a:	d4dd      	bmi.n	8007ef8 <_fflush_r+0xc>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3e:	f000 f908 	bl	8008152 <__retarget_lock_release_recursive>
 8007f42:	e7d9      	b.n	8007ef8 <_fflush_r+0xc>
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <_fflush_r+0x70>)
 8007f46:	429c      	cmp	r4, r3
 8007f48:	d101      	bne.n	8007f4e <_fflush_r+0x62>
 8007f4a:	68ac      	ldr	r4, [r5, #8]
 8007f4c:	e7df      	b.n	8007f0e <_fflush_r+0x22>
 8007f4e:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <_fflush_r+0x74>)
 8007f50:	429c      	cmp	r4, r3
 8007f52:	bf08      	it	eq
 8007f54:	68ec      	ldreq	r4, [r5, #12]
 8007f56:	e7da      	b.n	8007f0e <_fflush_r+0x22>
 8007f58:	080087e4 	.word	0x080087e4
 8007f5c:	08008804 	.word	0x08008804
 8007f60:	080087c4 	.word	0x080087c4

08007f64 <std>:
 8007f64:	2300      	movs	r3, #0
 8007f66:	b510      	push	{r4, lr}
 8007f68:	4604      	mov	r4, r0
 8007f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f72:	6083      	str	r3, [r0, #8]
 8007f74:	8181      	strh	r1, [r0, #12]
 8007f76:	6643      	str	r3, [r0, #100]	; 0x64
 8007f78:	81c2      	strh	r2, [r0, #14]
 8007f7a:	6183      	str	r3, [r0, #24]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	2208      	movs	r2, #8
 8007f80:	305c      	adds	r0, #92	; 0x5c
 8007f82:	f7fd fd1d 	bl	80059c0 <memset>
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <std+0x38>)
 8007f88:	6263      	str	r3, [r4, #36]	; 0x24
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <std+0x3c>)
 8007f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <std+0x40>)
 8007f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x44>)
 8007f94:	6224      	str	r4, [r4, #32]
 8007f96:	6323      	str	r3, [r4, #48]	; 0x30
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	bf00      	nop
 8007f9c:	080082a9 	.word	0x080082a9
 8007fa0:	080082cb 	.word	0x080082cb
 8007fa4:	08008303 	.word	0x08008303
 8007fa8:	08008327 	.word	0x08008327

08007fac <_cleanup_r>:
 8007fac:	4901      	ldr	r1, [pc, #4]	; (8007fb4 <_cleanup_r+0x8>)
 8007fae:	f000 b8af 	b.w	8008110 <_fwalk_reent>
 8007fb2:	bf00      	nop
 8007fb4:	08007eed 	.word	0x08007eed

08007fb8 <__sfmoreglue>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	2268      	movs	r2, #104	; 0x68
 8007fbc:	1e4d      	subs	r5, r1, #1
 8007fbe:	4355      	muls	r5, r2
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fc6:	f7ff fc09 	bl	80077dc <_malloc_r>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	b140      	cbz	r0, 8007fe0 <__sfmoreglue+0x28>
 8007fce:	2100      	movs	r1, #0
 8007fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8007fd4:	300c      	adds	r0, #12
 8007fd6:	60a0      	str	r0, [r4, #8]
 8007fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fdc:	f7fd fcf0 	bl	80059c0 <memset>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}

08007fe4 <__sfp_lock_acquire>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	; (8007fec <__sfp_lock_acquire+0x8>)
 8007fe6:	f000 b8b3 	b.w	8008150 <__retarget_lock_acquire_recursive>
 8007fea:	bf00      	nop
 8007fec:	20000385 	.word	0x20000385

08007ff0 <__sfp_lock_release>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__sfp_lock_release+0x8>)
 8007ff2:	f000 b8ae 	b.w	8008152 <__retarget_lock_release_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20000385 	.word	0x20000385

08007ffc <__sinit_lock_acquire>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__sinit_lock_acquire+0x8>)
 8007ffe:	f000 b8a7 	b.w	8008150 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000386 	.word	0x20000386

08008008 <__sinit_lock_release>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__sinit_lock_release+0x8>)
 800800a:	f000 b8a2 	b.w	8008152 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000386 	.word	0x20000386

08008014 <__sinit>:
 8008014:	b510      	push	{r4, lr}
 8008016:	4604      	mov	r4, r0
 8008018:	f7ff fff0 	bl	8007ffc <__sinit_lock_acquire>
 800801c:	69a3      	ldr	r3, [r4, #24]
 800801e:	b11b      	cbz	r3, 8008028 <__sinit+0x14>
 8008020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008024:	f7ff bff0 	b.w	8008008 <__sinit_lock_release>
 8008028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800802c:	6523      	str	r3, [r4, #80]	; 0x50
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <__sinit+0x68>)
 8008030:	4a13      	ldr	r2, [pc, #76]	; (8008080 <__sinit+0x6c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	62a2      	str	r2, [r4, #40]	; 0x28
 8008036:	42a3      	cmp	r3, r4
 8008038:	bf04      	itt	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	61a3      	streq	r3, [r4, #24]
 800803e:	4620      	mov	r0, r4
 8008040:	f000 f820 	bl	8008084 <__sfp>
 8008044:	6060      	str	r0, [r4, #4]
 8008046:	4620      	mov	r0, r4
 8008048:	f000 f81c 	bl	8008084 <__sfp>
 800804c:	60a0      	str	r0, [r4, #8]
 800804e:	4620      	mov	r0, r4
 8008050:	f000 f818 	bl	8008084 <__sfp>
 8008054:	2200      	movs	r2, #0
 8008056:	60e0      	str	r0, [r4, #12]
 8008058:	2104      	movs	r1, #4
 800805a:	6860      	ldr	r0, [r4, #4]
 800805c:	f7ff ff82 	bl	8007f64 <std>
 8008060:	68a0      	ldr	r0, [r4, #8]
 8008062:	2201      	movs	r2, #1
 8008064:	2109      	movs	r1, #9
 8008066:	f7ff ff7d 	bl	8007f64 <std>
 800806a:	68e0      	ldr	r0, [r4, #12]
 800806c:	2202      	movs	r2, #2
 800806e:	2112      	movs	r1, #18
 8008070:	f7ff ff78 	bl	8007f64 <std>
 8008074:	2301      	movs	r3, #1
 8008076:	61a3      	str	r3, [r4, #24]
 8008078:	e7d2      	b.n	8008020 <__sinit+0xc>
 800807a:	bf00      	nop
 800807c:	08008448 	.word	0x08008448
 8008080:	08007fad 	.word	0x08007fad

08008084 <__sfp>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	4607      	mov	r7, r0
 8008088:	f7ff ffac 	bl	8007fe4 <__sfp_lock_acquire>
 800808c:	4b1e      	ldr	r3, [pc, #120]	; (8008108 <__sfp+0x84>)
 800808e:	681e      	ldr	r6, [r3, #0]
 8008090:	69b3      	ldr	r3, [r6, #24]
 8008092:	b913      	cbnz	r3, 800809a <__sfp+0x16>
 8008094:	4630      	mov	r0, r6
 8008096:	f7ff ffbd 	bl	8008014 <__sinit>
 800809a:	3648      	adds	r6, #72	; 0x48
 800809c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	d503      	bpl.n	80080ac <__sfp+0x28>
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	b30b      	cbz	r3, 80080ec <__sfp+0x68>
 80080a8:	6836      	ldr	r6, [r6, #0]
 80080aa:	e7f7      	b.n	800809c <__sfp+0x18>
 80080ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080b0:	b9d5      	cbnz	r5, 80080e8 <__sfp+0x64>
 80080b2:	4b16      	ldr	r3, [pc, #88]	; (800810c <__sfp+0x88>)
 80080b4:	60e3      	str	r3, [r4, #12]
 80080b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080ba:	6665      	str	r5, [r4, #100]	; 0x64
 80080bc:	f000 f847 	bl	800814e <__retarget_lock_init_recursive>
 80080c0:	f7ff ff96 	bl	8007ff0 <__sfp_lock_release>
 80080c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080cc:	6025      	str	r5, [r4, #0]
 80080ce:	61a5      	str	r5, [r4, #24]
 80080d0:	2208      	movs	r2, #8
 80080d2:	4629      	mov	r1, r5
 80080d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080d8:	f7fd fc72 	bl	80059c0 <memset>
 80080dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080e4:	4620      	mov	r0, r4
 80080e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e8:	3468      	adds	r4, #104	; 0x68
 80080ea:	e7d9      	b.n	80080a0 <__sfp+0x1c>
 80080ec:	2104      	movs	r1, #4
 80080ee:	4638      	mov	r0, r7
 80080f0:	f7ff ff62 	bl	8007fb8 <__sfmoreglue>
 80080f4:	4604      	mov	r4, r0
 80080f6:	6030      	str	r0, [r6, #0]
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d1d5      	bne.n	80080a8 <__sfp+0x24>
 80080fc:	f7ff ff78 	bl	8007ff0 <__sfp_lock_release>
 8008100:	230c      	movs	r3, #12
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	e7ee      	b.n	80080e4 <__sfp+0x60>
 8008106:	bf00      	nop
 8008108:	08008448 	.word	0x08008448
 800810c:	ffff0001 	.word	0xffff0001

08008110 <_fwalk_reent>:
 8008110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008114:	4606      	mov	r6, r0
 8008116:	4688      	mov	r8, r1
 8008118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800811c:	2700      	movs	r7, #0
 800811e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008122:	f1b9 0901 	subs.w	r9, r9, #1
 8008126:	d505      	bpl.n	8008134 <_fwalk_reent+0x24>
 8008128:	6824      	ldr	r4, [r4, #0]
 800812a:	2c00      	cmp	r4, #0
 800812c:	d1f7      	bne.n	800811e <_fwalk_reent+0xe>
 800812e:	4638      	mov	r0, r7
 8008130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008134:	89ab      	ldrh	r3, [r5, #12]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d907      	bls.n	800814a <_fwalk_reent+0x3a>
 800813a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800813e:	3301      	adds	r3, #1
 8008140:	d003      	beq.n	800814a <_fwalk_reent+0x3a>
 8008142:	4629      	mov	r1, r5
 8008144:	4630      	mov	r0, r6
 8008146:	47c0      	blx	r8
 8008148:	4307      	orrs	r7, r0
 800814a:	3568      	adds	r5, #104	; 0x68
 800814c:	e7e9      	b.n	8008122 <_fwalk_reent+0x12>

0800814e <__retarget_lock_init_recursive>:
 800814e:	4770      	bx	lr

08008150 <__retarget_lock_acquire_recursive>:
 8008150:	4770      	bx	lr

08008152 <__retarget_lock_release_recursive>:
 8008152:	4770      	bx	lr

08008154 <__swhatbuf_r>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	460e      	mov	r6, r1
 8008158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815c:	2900      	cmp	r1, #0
 800815e:	b096      	sub	sp, #88	; 0x58
 8008160:	4614      	mov	r4, r2
 8008162:	461d      	mov	r5, r3
 8008164:	da08      	bge.n	8008178 <__swhatbuf_r+0x24>
 8008166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	061a      	lsls	r2, r3, #24
 8008170:	d410      	bmi.n	8008194 <__swhatbuf_r+0x40>
 8008172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008176:	e00e      	b.n	8008196 <__swhatbuf_r+0x42>
 8008178:	466a      	mov	r2, sp
 800817a:	f000 f8fb 	bl	8008374 <_fstat_r>
 800817e:	2800      	cmp	r0, #0
 8008180:	dbf1      	blt.n	8008166 <__swhatbuf_r+0x12>
 8008182:	9a01      	ldr	r2, [sp, #4]
 8008184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800818c:	425a      	negs	r2, r3
 800818e:	415a      	adcs	r2, r3
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	e7ee      	b.n	8008172 <__swhatbuf_r+0x1e>
 8008194:	2340      	movs	r3, #64	; 0x40
 8008196:	2000      	movs	r0, #0
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	b016      	add	sp, #88	; 0x58
 800819c:	bd70      	pop	{r4, r5, r6, pc}
	...

080081a0 <__smakebuf_r>:
 80081a0:	898b      	ldrh	r3, [r1, #12]
 80081a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081a4:	079d      	lsls	r5, r3, #30
 80081a6:	4606      	mov	r6, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	d507      	bpl.n	80081bc <__smakebuf_r+0x1c>
 80081ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	2301      	movs	r3, #1
 80081b6:	6163      	str	r3, [r4, #20]
 80081b8:	b002      	add	sp, #8
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	ab01      	add	r3, sp, #4
 80081be:	466a      	mov	r2, sp
 80081c0:	f7ff ffc8 	bl	8008154 <__swhatbuf_r>
 80081c4:	9900      	ldr	r1, [sp, #0]
 80081c6:	4605      	mov	r5, r0
 80081c8:	4630      	mov	r0, r6
 80081ca:	f7ff fb07 	bl	80077dc <_malloc_r>
 80081ce:	b948      	cbnz	r0, 80081e4 <__smakebuf_r+0x44>
 80081d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d4:	059a      	lsls	r2, r3, #22
 80081d6:	d4ef      	bmi.n	80081b8 <__smakebuf_r+0x18>
 80081d8:	f023 0303 	bic.w	r3, r3, #3
 80081dc:	f043 0302 	orr.w	r3, r3, #2
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	e7e3      	b.n	80081ac <__smakebuf_r+0xc>
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <__smakebuf_r+0x7c>)
 80081e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	6020      	str	r0, [r4, #0]
 80081ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	9b00      	ldr	r3, [sp, #0]
 80081f4:	6163      	str	r3, [r4, #20]
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	6120      	str	r0, [r4, #16]
 80081fa:	b15b      	cbz	r3, 8008214 <__smakebuf_r+0x74>
 80081fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008200:	4630      	mov	r0, r6
 8008202:	f000 f8c9 	bl	8008398 <_isatty_r>
 8008206:	b128      	cbz	r0, 8008214 <__smakebuf_r+0x74>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	f043 0301 	orr.w	r3, r3, #1
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	89a0      	ldrh	r0, [r4, #12]
 8008216:	4305      	orrs	r5, r0
 8008218:	81a5      	strh	r5, [r4, #12]
 800821a:	e7cd      	b.n	80081b8 <__smakebuf_r+0x18>
 800821c:	08007fad 	.word	0x08007fad

08008220 <_raise_r>:
 8008220:	291f      	cmp	r1, #31
 8008222:	b538      	push	{r3, r4, r5, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	460d      	mov	r5, r1
 8008228:	d904      	bls.n	8008234 <_raise_r+0x14>
 800822a:	2316      	movs	r3, #22
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	f04f 30ff 	mov.w	r0, #4294967295
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008236:	b112      	cbz	r2, 800823e <_raise_r+0x1e>
 8008238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800823c:	b94b      	cbnz	r3, 8008252 <_raise_r+0x32>
 800823e:	4620      	mov	r0, r4
 8008240:	f000 f830 	bl	80082a4 <_getpid_r>
 8008244:	462a      	mov	r2, r5
 8008246:	4601      	mov	r1, r0
 8008248:	4620      	mov	r0, r4
 800824a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800824e:	f000 b817 	b.w	8008280 <_kill_r>
 8008252:	2b01      	cmp	r3, #1
 8008254:	d00a      	beq.n	800826c <_raise_r+0x4c>
 8008256:	1c59      	adds	r1, r3, #1
 8008258:	d103      	bne.n	8008262 <_raise_r+0x42>
 800825a:	2316      	movs	r3, #22
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	2001      	movs	r0, #1
 8008260:	e7e7      	b.n	8008232 <_raise_r+0x12>
 8008262:	2400      	movs	r4, #0
 8008264:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008268:	4628      	mov	r0, r5
 800826a:	4798      	blx	r3
 800826c:	2000      	movs	r0, #0
 800826e:	e7e0      	b.n	8008232 <_raise_r+0x12>

08008270 <raise>:
 8008270:	4b02      	ldr	r3, [pc, #8]	; (800827c <raise+0xc>)
 8008272:	4601      	mov	r1, r0
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	f7ff bfd3 	b.w	8008220 <_raise_r>
 800827a:	bf00      	nop
 800827c:	2000000c 	.word	0x2000000c

08008280 <_kill_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d07      	ldr	r5, [pc, #28]	; (80082a0 <_kill_r+0x20>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	f7f9 f96f 	bl	8001570 <_kill>
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	d102      	bne.n	800829c <_kill_r+0x1c>
 8008296:	682b      	ldr	r3, [r5, #0]
 8008298:	b103      	cbz	r3, 800829c <_kill_r+0x1c>
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	20000380 	.word	0x20000380

080082a4 <_getpid_r>:
 80082a4:	f7f9 b95c 	b.w	8001560 <_getpid>

080082a8 <__sread>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	460c      	mov	r4, r1
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	f000 f894 	bl	80083dc <_read_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	bfab      	itete	ge
 80082b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ba:	89a3      	ldrhlt	r3, [r4, #12]
 80082bc:	181b      	addge	r3, r3, r0
 80082be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082c2:	bfac      	ite	ge
 80082c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082c6:	81a3      	strhlt	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__swrite>:
 80082ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	461f      	mov	r7, r3
 80082d0:	898b      	ldrh	r3, [r1, #12]
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	4605      	mov	r5, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4616      	mov	r6, r2
 80082da:	d505      	bpl.n	80082e8 <__swrite+0x1e>
 80082dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e0:	2302      	movs	r3, #2
 80082e2:	2200      	movs	r2, #0
 80082e4:	f000 f868 	bl	80083b8 <_lseek_r>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	4628      	mov	r0, r5
 80082fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	f000 b817 	b.w	8008330 <_write_r>

08008302 <__sseek>:
 8008302:	b510      	push	{r4, lr}
 8008304:	460c      	mov	r4, r1
 8008306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830a:	f000 f855 	bl	80083b8 <_lseek_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	bf15      	itete	ne
 8008314:	6560      	strne	r0, [r4, #84]	; 0x54
 8008316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800831a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800831e:	81a3      	strheq	r3, [r4, #12]
 8008320:	bf18      	it	ne
 8008322:	81a3      	strhne	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__sclose>:
 8008326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832a:	f000 b813 	b.w	8008354 <_close_r>
	...

08008330 <_write_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4d07      	ldr	r5, [pc, #28]	; (8008350 <_write_r+0x20>)
 8008334:	4604      	mov	r4, r0
 8008336:	4608      	mov	r0, r1
 8008338:	4611      	mov	r1, r2
 800833a:	2200      	movs	r2, #0
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7f9 f94d 	bl	80015de <_write>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_write_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_write_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000380 	.word	0x20000380

08008354 <_close_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d06      	ldr	r5, [pc, #24]	; (8008370 <_close_r+0x1c>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7f9 f959 	bl	8001616 <_close>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_close_r+0x1a>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_close_r+0x1a>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20000380 	.word	0x20000380

08008374 <_fstat_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d07      	ldr	r5, [pc, #28]	; (8008394 <_fstat_r+0x20>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	f7f9 f954 	bl	800162e <_fstat>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d102      	bne.n	8008390 <_fstat_r+0x1c>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	b103      	cbz	r3, 8008390 <_fstat_r+0x1c>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	bf00      	nop
 8008394:	20000380 	.word	0x20000380

08008398 <_isatty_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_isatty_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 f953 	bl	800164e <_isatty>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_isatty_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_isatty_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000380 	.word	0x20000380

080083b8 <_lseek_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	; (80083d8 <_lseek_r+0x20>)
 80083bc:	4604      	mov	r4, r0
 80083be:	4608      	mov	r0, r1
 80083c0:	4611      	mov	r1, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f9 f94c 	bl	8001664 <_lseek>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_lseek_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_lseek_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20000380 	.word	0x20000380

080083dc <_read_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_read_r+0x20>)
 80083e0:	4604      	mov	r4, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	602a      	str	r2, [r5, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f7f9 f8da 	bl	80015a4 <_read>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_read_r+0x1e>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_read_r+0x1e>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20000380 	.word	0x20000380

08008400 <_init>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr

0800840c <_fini>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr
