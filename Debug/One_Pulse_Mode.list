
One_Pulse_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008f68  08008f68  00018f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009374  08009374  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009374  08009374  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009374  08009374  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009378  08009378  00019378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800937c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000278  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e09a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d3  00000000  00000000  0002e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00030380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c68  00000000  00000000  000310f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214ab  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fadd  00000000  00000000  00053203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7631  00000000  00000000  00062ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a311  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004804  00000000  00000000  0012a364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f50 	.word	0x08008f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008f50 	.word	0x08008f50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fe7c 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f826 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fae4 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb8:	f000 fac4 	bl	8001144 <MX_DMA_Init>
  MX_TIM2_Init();
 8000bbc:	f000 f9b8 	bl	8000f30 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bc0:	f000 f8f0 	bl	8000da4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bc4:	f000 fa24 	bl	8001010 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000bc8:	f000 f87c 	bl	8000cc4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <main+0x4c>)
 8000bce:	f003 ff73 	bl	8004ab8 <HAL_TIM_Base_Start>

  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <main+0x50>)
 8000bd6:	f004 fa1b 	bl	8005010 <HAL_TIM_OnePulse_Start>

  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <main+0x50>)
 8000bde:	f004 f821 	bl	8004c24 <HAL_TIM_OC_Start_IT>

  HAL_TIM_OnePulse_Start(&htim3, TIM_CHANNEL_1);
 8000be2:	2100      	movs	r1, #0
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <main+0x54>)
 8000be6:	f004 fa13 	bl	8005010 <HAL_TIM_OnePulse_Start>

  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <main+0x54>)
 8000bee:	f004 f819 	bl	8004c24 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <main+0x4a>
 8000bf4:	200002d8 	.word	0x200002d8
 8000bf8:	2000028c 	.word	0x2000028c
 8000bfc:	20000324 	.word	0x20000324

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b096      	sub	sp, #88	; 0x58
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 fc80 	bl	8006514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000c40:	2303      	movs	r3, #3
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c52:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fb79 	bl	8003354 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000c68:	f000 fb26 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fba0 	bl	80043d0 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c96:	f000 fb0f 	bl	80012b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000c9a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c9e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fd75 	bl	800479c <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000cb8:	f000 fafe 	bl	80012b8 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3758      	adds	r7, #88	; 0x58
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000ce8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d42:	f000 fe35 	bl	80019b0 <HAL_ADC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 fab4 	bl	80012b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d5c:	f001 fbb6 	bl	80024cc <HAL_ADCEx_MultiModeConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d66:	f000 faa7 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_ADC1_Init+0xdc>)
 8000d88:	f001 f8e0 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d92:	f000 fa91 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001f8 	.word	0x200001f8

08000da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09a      	sub	sp, #104	; 0x68
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	222c      	movs	r2, #44	; 0x2c
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fb97 	bl	8006514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <MX_TIM1_Init+0x188>)
 8000dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000dec:	4b4e      	ldr	r3, [pc, #312]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000dee:	221f      	movs	r2, #31
 8000df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000dfa:	2213      	movs	r2, #19
 8000dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e10:	4845      	ldr	r0, [pc, #276]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e12:	f003 fdf9 	bl	8004a08 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 fa4c 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e22:	f003 fe9d 	bl	8004b60 <HAL_TIM_OC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 fa44 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e30:	2108      	movs	r1, #8
 8000e32:	483d      	ldr	r0, [pc, #244]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e34:	f004 f891 	bl	8004f5a <HAL_TIM_OnePulse_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e3e:	f000 fa3b 	bl	80012b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e42:	2306      	movs	r3, #6
 8000e44:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e46:	2310      	movs	r3, #16
 8000e48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4835      	ldr	r0, [pc, #212]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e52:	f004 fc4c 	bl	80056ee <HAL_TIM_SlaveConfigSynchro>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000e5c:	f000 fa2c 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e70:	4619      	mov	r1, r3
 8000e72:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000e74:	f005 fa20 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000e7e:	f000 fa1b 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e82:	2370      	movs	r3, #112	; 0x70
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 10-1;
 8000e86:	2309      	movs	r3, #9
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000ea8:	f004 fa42 	bl	8005330 <HAL_TIM_OC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000eb2:	f000 fa01 	bl	80012b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000edc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480f      	ldr	r0, [pc, #60]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000eec:	f005 fa52 	bl	8006394 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000ef6:	f000 f9df 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);            // Enable Timer 1 Update Event interrupt for elapsedPeriodCallback
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);               // Enable Timer 1 Channel 1 interrupt for elapsedPeriodCallback
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0202 	orr.w	r2, r2, #2
 8000f18:	60da      	str	r2, [r3, #12]

  //HAL_NVIC_ClearPendingIRQ(TIM1_IRQn);  // make sure that any pending interrupt is cleared
  //HAL_NVIC_EnableIRQ(TIM1_IRQn);  // Enable the interrupt
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM1_Init+0x184>)
 8000f1c:	f000 faf6 	bl	800150c <HAL_TIM_MspPostInit>

}
 8000f20:	bf00      	nop
 8000f22:	3768      	adds	r7, #104	; 0x68
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000028c 	.word	0x2000028c
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f66:	221f      	movs	r2, #31
 8000f68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f72:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f84:	4821      	ldr	r0, [pc, #132]	; (800100c <MX_TIM2_Init+0xdc>)
 8000f86:	f003 fd3f 	bl	8004a08 <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000f90:	f000 f992 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481a      	ldr	r0, [pc, #104]	; (800100c <MX_TIM2_Init+0xdc>)
 8000fa2:	f004 fadb 	bl	800555c <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fac:	f000 f984 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <MX_TIM2_Init+0xdc>)
 8000fb2:	f003 ff71 	bl	8004e98 <HAL_TIM_IC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 f97c 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480f      	ldr	r0, [pc, #60]	; (800100c <MX_TIM2_Init+0xdc>)
 8000fd0:	f005 f972 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000fda:	f000 f96d 	bl	80012b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM2_Init+0xdc>)
 8000ff6:	f004 fa15 	bl	8005424 <HAL_TIM_IC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001000:	f000 f95a 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200002d8 	.word	0x200002d8

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b090      	sub	sp, #64	; 0x40
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <MX_TIM3_Init+0x12c>)
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <MX_TIM3_Init+0x130>)
 8001048:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <MX_TIM3_Init+0x12c>)
 800104c:	221f      	movs	r2, #31
 800104e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_TIM3_Init+0x12c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3010-1;
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <MX_TIM3_Init+0x12c>)
 8001058:	f640 32c1 	movw	r2, #3009	; 0xbc1
 800105c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_TIM3_Init+0x12c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b35      	ldr	r3, [pc, #212]	; (800113c <MX_TIM3_Init+0x12c>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800106a:	4834      	ldr	r0, [pc, #208]	; (800113c <MX_TIM3_Init+0x12c>)
 800106c:	f003 fccc 	bl	8004a08 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f91f 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800107a:	4830      	ldr	r0, [pc, #192]	; (800113c <MX_TIM3_Init+0x12c>)
 800107c:	f003 fd70 	bl	8004b60 <HAL_TIM_OC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001086:	f000 f917 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800108a:	2108      	movs	r1, #8
 800108c:	482b      	ldr	r0, [pc, #172]	; (800113c <MX_TIM3_Init+0x12c>)
 800108e:	f003 ff64 	bl	8004f5a <HAL_TIM_OnePulse_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f90e 	bl	80012b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800109c:	2306      	movs	r3, #6
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80010a0:	2310      	movs	r3, #16
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	4619      	mov	r1, r3
 80010aa:	4824      	ldr	r0, [pc, #144]	; (800113c <MX_TIM3_Init+0x12c>)
 80010ac:	f004 fb1f 	bl	80056ee <HAL_TIM_SlaveConfigSynchro>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80010b6:	f000 f8ff 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	4619      	mov	r1, r3
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <MX_TIM3_Init+0x12c>)
 80010ca:	f005 f8f5 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80010d4:	f000 f8f0 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80010d8:	2370      	movs	r3, #112	; 0x70
 80010da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000-1;
 80010dc:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <MX_TIM3_Init+0x12c>)
 80010f2:	f004 f91d 	bl	8005330 <HAL_TIM_OC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80010fc:	f000 f8dc 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);            // Enable Timer 3 Update Event interrupt for elapsedPeriodCallback
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_TIM3_Init+0x12c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_TIM3_Init+0x12c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);               // Enable Timer 3 Channel 1 interrupt for elapsedPeriodCallback
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_TIM3_Init+0x12c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_TIM3_Init+0x12c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0202 	orr.w	r2, r2, #2
 800111e:	60da      	str	r2, [r3, #12]

  HAL_NVIC_ClearPendingIRQ(TIM3_IRQn);  // make sure that any pending interrupt is cleared
 8001120:	201d      	movs	r0, #29
 8001122:	f001 fdae 	bl	8002c82 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);  // Enable the interrupt
 8001126:	201d      	movs	r0, #29
 8001128:	f001 fd91 	bl	8002c4e <HAL_NVIC_EnableIRQ>



  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM3_Init+0x12c>)
 800112e:	f000 f9ed 	bl	800150c <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000324 	.word	0x20000324
 8001140:	40000400 	.word	0x40000400

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_DMA_Init+0x38>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <MX_DMA_Init+0x38>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_DMA_Init+0x38>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200b      	movs	r0, #11
 8001168:	f001 fd55 	bl	8002c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116c:	200b      	movs	r0, #11
 800116e:	f001 fd6e 	bl	8002c4e <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_GPIO_Init+0x90>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <MX_GPIO_Init+0x90>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_GPIO_Init+0x90>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_GPIO_Init+0x90>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <MX_GPIO_Init+0x90>)
 80011b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_GPIO_Init+0x90>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_GPIO_Init+0x90>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <MX_GPIO_Init+0x90>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_GPIO_Init+0x90>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2120      	movs	r1, #32
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f002 f89d 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ea:	2320      	movs	r3, #32
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 ff1c 	bl	8003040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 || htim->Instance == TIM3) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d004      	beq.n	8001230 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_TIM_OC_DelayElapsedCallback+0x40>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d10a      	bne.n	8001246 <HAL_TIM_OC_DelayElapsedCallback+0x32>
        // TIM reached the CCR selected value-- We get the rising edge
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_samp, SAMPLES);
 8001230:	2264      	movs	r2, #100	; 0x64
 8001232:	4909      	ldr	r1, [pc, #36]	; (8001258 <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8001236:	f000 fd4d 	bl	8001cd4 <HAL_ADC_Start_DMA>
    	HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2120      	movs	r1, #32
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f002 f86f 	bl	8003324 <HAL_GPIO_WritePin>
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012c00 	.word	0x40012c00
 8001254:	40000400 	.word	0x40000400
 8001258:	20000370 	.word	0x20000370
 800125c:	200001f8 	.word	0x200001f8

08001260 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	sum +=1;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001270:	6013      	str	r3, [r2, #0]
	if(sum >2){
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d912      	bls.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if (htim->Instance == TIM1 || htim->Instance == TIM3) { //setting an or, so it only stops DMA when its initialized by tim1 or 3, as the Elap also works for tim2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d004      	beq.n	800128e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d108      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x40>
			// TIM1 or TIM3 reached the ARR value, and will reset
			HAL_ADC_Stop_DMA(&hadc1);
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001290:	f000 fdfa 	bl	8001e88 <HAL_ADC_Stop_DMA>
			HAL_GPIO_WritePin(GPIOA, Toggle_LED, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f002 f842 	bl	8003324 <HAL_GPIO_WritePin>
//			samplesCollected = 0;
//			sumValues = 0;
		}
	}
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000438 	.word	0x20000438
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	40000400 	.word	0x40000400
 80012b4:	200001f8 	.word	0x200001f8

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x44>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x44>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x44>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x44>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x44>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132c:	d14c      	bne.n	80013c8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_ADC_MspInit+0xc4>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800135e:	2302      	movs	r3, #2
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f001 fe64 	bl	8003040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_ADC_MspInit+0xcc>)
 800137c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 8001392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001396:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 80013ae:	f001 fc76 	bl	8002c9e <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80013b8:	f7ff ff7e 	bl	80012b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_ADC_MspInit+0xc8>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	20000248 	.word	0x20000248
 80013d8:	40020008 	.word	0x40020008

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a41      	ldr	r2, [pc, #260]	; (8001500 <HAL_TIM_Base_MspInit+0x124>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12c      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2018      	movs	r0, #24
 800141c:	f001 fbfb 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001420:	2018      	movs	r0, #24
 8001422:	f001 fc14 	bl	8002c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2019      	movs	r0, #25
 800142c:	f001 fbf3 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001430:	2019      	movs	r0, #25
 8001432:	f001 fc0c 	bl	8002c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	201a      	movs	r0, #26
 800143c:	f001 fbeb 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001440:	201a      	movs	r0, #26
 8001442:	f001 fc04 	bl	8002c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201b      	movs	r0, #27
 800144c:	f001 fbe3 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001450:	201b      	movs	r0, #27
 8001452:	f001 fbfc 	bl	8002c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001456:	e04f      	b.n	80014f8 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d131      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b0:	f001 fdc6 	bl	8003040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	201c      	movs	r0, #28
 80014ba:	f001 fbac 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014be:	201c      	movs	r0, #28
 80014c0:	f001 fbc5 	bl	8002c4e <HAL_NVIC_EnableIRQ>
}
 80014c4:	e018      	b.n	80014f8 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_TIM_Base_MspInit+0x12c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d113      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0x128>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	201d      	movs	r0, #29
 80014ee:	f001 fb92 	bl	8002c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f2:	201d      	movs	r0, #29
 80014f4:	f001 fbab 	bl	8002c4e <HAL_NVIC_EnableIRQ>
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	; 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40000400 	.word	0x40000400

0800150c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_TIM_MspPostInit+0xa8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d11c      	bne.n	8001568 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 8001534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001556:	2302      	movs	r3, #2
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4816      	ldr	r0, [pc, #88]	; (80015bc <HAL_TIM_MspPostInit+0xb0>)
 8001562:	f001 fd6d 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001566:	e021      	b.n	80015ac <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_TIM_MspPostInit+0xb4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d11c      	bne.n	80015ac <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_TIM_MspPostInit+0xac>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800158a:	2340      	movs	r3, #64	; 0x40
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159a:	2302      	movs	r3, #2
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f001 fd4a 	bl	8003040 <HAL_GPIO_Init>
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40012c00 	.word	0x40012c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800
 80015c0:	40000400 	.word	0x40000400

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 f990 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Channel1_IRQHandler+0x10>)
 800161e:	f001 fc1d 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000248 	.word	0x20000248

0800162c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001632:	f003 fd5d 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000028c 	.word	0x2000028c

08001640 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001646:	f003 fd53 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000028c 	.word	0x2000028c

08001654 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800165a:	f003 fd49 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000028c 	.word	0x2000028c

08001668 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM1_CC_IRQHandler+0x10>)
 800166e:	f003 fd3f 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000028c 	.word	0x2000028c

0800167c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM2_IRQHandler+0x10>)
 8001682:	f003 fd35 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200002d8 	.word	0x200002d8

08001690 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM3_IRQHandler+0x10>)
 8001696:	f003 fd2b 	bl	80050f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000324 	.word	0x20000324

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_kill>:

int _kill(int pid, int sig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016be:	f004 feff 	bl	80064c0 <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe7 	bl	80016b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	e7fe      	b.n	80016e6 <_exit+0x12>

080016e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f004 fe64 	bl	80064c0 <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20003000 	.word	0x20003000
 8001824:	00000400 	.word	0x00000400
 8001828:	2000043c 	.word	0x2000043c
 800182c:	20000458 	.word	0x20000458

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f004 fe23 	bl	80064cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001886:	f7ff f98f 	bl	8000ba8 <main>

0800188a <LoopForever>:

LoopForever:
    b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800188c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001898:	0800937c 	.word	0x0800937c
  ldr r2, =_sbss
 800189c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018a0:	20000454 	.word	0x20000454

080018a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f001 f9a1 	bl	8002c00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fcfe 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f9b9 	bl	8002c6a <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f001 f981 	bl	8002c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008
 8001958:	20000440 	.word	0x20000440

0800195c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000440 	.word	0x20000440

08001974 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b09a      	sub	sp, #104	; 0x68
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e172      	b.n	8001cb6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d176      	bne.n	8001ad0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d152      	bne.n	8001a90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fc81 	bl	800130c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d13b      	bne.n	8001a90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fee7 	bl	80027ec <ADC_Disable>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12f      	bne.n	8001a90 <HAL_ADC_Init+0xe0>
 8001a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d12b      	bne.n	8001a90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a40:	f023 0302 	bic.w	r3, r3, #2
 8001a44:	f043 0202 	orr.w	r2, r3, #2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6c:	4b94      	ldr	r3, [pc, #592]	; (8001cc0 <HAL_ADC_Init+0x310>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a94      	ldr	r2, [pc, #592]	; (8001cc4 <HAL_ADC_Init+0x314>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9a      	lsrs	r2, r3, #18
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a82:	e002      	b.n	8001a8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aac:	d110      	bne.n	8001ad0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f023 0312 	bic.w	r3, r3, #18
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 80df 	bne.w	8001c9c <HAL_ADC_Init+0x2ec>
 8001ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80da 	bne.w	8001c9c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80d2 	bne.w	8001c9c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b00:	f043 0202 	orr.w	r2, r3, #2
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_ADC_Init+0x318>)
 8001b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b14:	d102      	bne.n	8001b1c <HAL_ADC_Init+0x16c>
 8001b16:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_ADC_Init+0x31c>)
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e002      	b.n	8001b22 <HAL_ADC_Init+0x172>
 8001b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b20:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d108      	bne.n	8001b42 <HAL_ADC_Init+0x192>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Init+0x192>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_ADC_Init+0x194>
 8001b42:	2300      	movs	r3, #0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11c      	bne.n	8001b82 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d010      	beq.n	8001b70 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_ADC_Init+0x1ba>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1ba>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_Init+0x1bc>
 8001b6a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d108      	bne.n	8001b82 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7e5b      	ldrb	r3, [r3, #25]
 8001b86:	035b      	lsls	r3, r3, #13
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8c:	2a01      	cmp	r2, #1
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADC_Init+0x1e6>
 8001b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_Init+0x1e8>
 8001b96:	2200      	movs	r2, #0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d11b      	bne.n	8001bee <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7e5b      	ldrb	r3, [r3, #25]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	045a      	lsls	r2, r3, #17
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	663b      	str	r3, [r7, #96]	; 0x60
 8001bd0:	e00d      	b.n	8001bee <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d007      	beq.n	8001c06 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c02:	4313      	orrs	r3, r2
 8001c04:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d114      	bne.n	8001c3e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c22:	f023 0302 	bic.w	r3, r3, #2
 8001c26:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
 8001c2c:	039a      	lsls	r2, r3, #14
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4313      	orrs	r3, r2
 8001c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_ADC_Init+0x320>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10c      	bne.n	8001c74 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f023 010f 	bic.w	r1, r3, #15
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
 8001c72:	e007      	b.n	8001c84 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 020f 	bic.w	r2, r2, #15
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9a:	e00a      	b.n	8001cb2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f023 0312 	bic.w	r3, r3, #18
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3768      	adds	r7, #104	; 0x68
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	50000300 	.word	0x50000300
 8001ccc:	50000100 	.word	0x50000100
 8001cd0:	fff0c007 	.word	0xfff0c007

08001cd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80b9 	bne.w	8001e66 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Start_DMA+0x2e>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e0b4      	b.n	8001e6c <HAL_ADC_Start_DMA+0x198>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <HAL_ADC_Start_DMA+0x1a0>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 80a0 	bne.w	8001e58 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fd03 	bl	8002724 <ADC_Enable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f040 8092 	bne.w	8001e4e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d3e:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_ADC_Start_DMA+0x1a0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_Start_DMA+0x80>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d52:	d115      	bne.n	8001d80 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d027      	beq.n	8001dbe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d7e:	e01e      	b.n	8001dbe <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Start_DMA+0xcc>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a37      	ldr	r2, [pc, #220]	; (8001e78 <HAL_ADC_Start_DMA+0x1a4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10e      	bne.n	8001dbe <HAL_ADC_Start_DMA+0xea>
 8001da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f023 0206 	bic.w	r2, r3, #6
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_ADC_Start_DMA+0x1a8>)
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_ADC_Start_DMA+0x1ac>)
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_ADC_Start_DMA+0x1b0>)
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	221c      	movs	r2, #28
 8001e06:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0210 	orr.w	r2, r2, #16
 8001e16:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3340      	adds	r3, #64	; 0x40
 8001e32:	4619      	mov	r1, r3
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f000 ff78 	bl	8002d2c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e00d      	b.n	8001e6a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e56:	e008      	b.n	8001e6a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e64:	e001      	b.n	8001e6a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
 8001e68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	50000300 	.word	0x50000300
 8001e78:	50000100 	.word	0x50000100
 8001e7c:	08002659 	.word	0x08002659
 8001e80:	080026d3 	.word	0x080026d3
 8001e84:	080026ef 	.word	0x080026ef

08001e88 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Stop_DMA+0x1a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e050      	b.n	8001f44 <HAL_ADC_Stop_DMA+0xbc>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001eaa:	216c      	movs	r1, #108	; 0x6c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fd03 	bl	80028b8 <ADC_ConversionStop>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13e      	bne.n	8001f3a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 ff84 	bl	8002dea <HAL_DMA_Abort>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0210 	bic.w	r2, r2, #16
 8001f06:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fc6c 	bl	80027ec <ADC_Disable>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e002      	b.n	8001f20 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fc66 	bl	80027ec <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b09b      	sub	sp, #108	; 0x6c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x22>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e2a4      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x56c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 8288 	bne.w	8002496 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d81c      	bhi.n	8001fc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	231f      	movs	r3, #31
 8001fa4:	4093      	lsls	r3, r2
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4019      	ands	r1, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e063      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d81e      	bhi.n	800200e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4019      	ands	r1, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	3b1e      	subs	r3, #30
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
 800200c:	e040      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b0e      	cmp	r3, #14
 8002014:	d81e      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	3b3c      	subs	r3, #60	; 0x3c
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3b3c      	subs	r3, #60	; 0x3c
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
 8002052:	e01d      	b.n	8002090 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	3b5a      	subs	r3, #90	; 0x5a
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	3b5a      	subs	r3, #90	; 0x5a
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80e5 	bne.w	800226a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d91c      	bls.n	80020e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]
 80020e0:	e019      	b.n	8002116 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6959      	ldr	r1, [r3, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	3b01      	subs	r3, #1
 8002134:	2b03      	cmp	r3, #3
 8002136:	d84f      	bhi.n	80021d8 <HAL_ADC_ConfigChannel+0x28c>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_ADC_ConfigChannel+0x1f4>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002151 	.word	0x08002151
 8002144:	08002173 	.word	0x08002173
 8002148:	08002195 	.word	0x08002195
 800214c:	080021b7 	.word	0x080021b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002156:	4b94      	ldr	r3, [pc, #592]	; (80023a8 <HAL_ADC_ConfigChannel+0x45c>)
 8002158:	4013      	ands	r3, r2
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	0691      	lsls	r1, r2, #26
 8002160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002162:	430a      	orrs	r2, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002170:	e07e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002178:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_ADC_ConfigChannel+0x45c>)
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	0691      	lsls	r1, r2, #26
 8002182:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002184:	430a      	orrs	r2, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002190:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002192:	e06d      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800219a:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <HAL_ADC_ConfigChannel+0x45c>)
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	0691      	lsls	r1, r2, #26
 80021a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021a6:	430a      	orrs	r2, r1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021b4:	e05c      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_ADC_ConfigChannel+0x45c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	0691      	lsls	r1, r2, #26
 80021c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021c8:	430a      	orrs	r2, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021d6:	e04b      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	429a      	cmp	r2, r3
 800220e:	d107      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002226:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	069b      	lsls	r3, r3, #26
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002242:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	429a      	cmp	r2, r3
 8002256:	d10a      	bne.n	800226e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002266:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002268:	e001      	b.n	800226e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x324>
      break;
 800226e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x344>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x344>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_ADC_ConfigChannel+0x346>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 810a 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00f      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	400a      	ands	r2, r1
 80022ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022be:	e049      	b.n	8002354 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2201      	movs	r2, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d91c      	bls.n	800231c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6999      	ldr	r1, [r3, #24]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	3b1b      	subs	r3, #27
 80022f4:	2207      	movs	r2, #7
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4019      	ands	r1, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6898      	ldr	r0, [r3, #8]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	3b1b      	subs	r3, #27
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	619a      	str	r2, [r3, #24]
 800231a:	e01b      	b.n	8002354 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6959      	ldr	r1, [r3, #20]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	4019      	ands	r1, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6898      	ldr	r0, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	fa00 f203 	lsl.w	r2, r0, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_ADC_ConfigChannel+0x460>)
 8002356:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002370:	2b11      	cmp	r3, #17
 8002372:	d105      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002384:	2b12      	cmp	r3, #18
 8002386:	f040 8091 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 808a 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a0:	d108      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x468>
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_ADC_ConfigChannel+0x464>)
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e008      	b.n	80023ba <HAL_ADC_ConfigChannel+0x46e>
 80023a8:	83fff000 	.word	0x83fff000
 80023ac:	50000300 	.word	0x50000300
 80023b0:	50000100 	.word	0x50000100
 80023b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d108      	bne.n	80023da <HAL_ADC_ConfigChannel+0x48e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x48e>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_ADC_ConfigChannel+0x490>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d150      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x4b6>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_ADC_ConfigChannel+0x4b8>
 8002402:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13c      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b10      	cmp	r3, #16
 800240e:	d11d      	bne.n	800244c <HAL_ADC_ConfigChannel+0x500>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002418:	d118      	bne.n	800244c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800241a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002424:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_ADC_ConfigChannel+0x578>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_ADC_ConfigChannel+0x57c>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9a      	lsrs	r2, r3, #18
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800243c:	e002      	b.n	8002444 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	3b01      	subs	r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f9      	bne.n	800243e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800244a:	e02e      	b.n	80024aa <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b11      	cmp	r3, #17
 8002452:	d10b      	bne.n	800246c <HAL_ADC_ConfigChannel+0x520>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245c:	d106      	bne.n	800246c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800246a:	e01e      	b.n	80024aa <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d11a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800247c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002480:	e013      	b.n	80024aa <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002494:	e00a      	b.n	80024ac <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024aa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	376c      	adds	r7, #108	; 0x6c
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	20000000 	.word	0x20000000
 80024c8:	431bde83 	.word	0x431bde83

080024cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b099      	sub	sp, #100	; 0x64
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e4:	d102      	bne.n	80024ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80024e6:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	e002      	b.n	80024f2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80024ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024f0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0a2      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002506:	2302      	movs	r3, #2
 8002508:	e09b      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d17f      	bne.n	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d179      	bne.n	8002620 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252c:	4b49      	ldr	r3, [pc, #292]	; (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800252e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d040      	beq.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254a:	035b      	lsls	r3, r3, #13
 800254c:	430b      	orrs	r3, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002552:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d15c      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002596:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d14b      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800259c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025a4:	f023 030f 	bic.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	6811      	ldr	r1, [r2, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6892      	ldr	r2, [r2, #8]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025b8:	e03c      	b.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d123      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002608:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	d112      	bne.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800260e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002616:	f023 030f 	bic.w	r3, r3, #15
 800261a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800261c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800261e:	e009      	b.n	8002634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002632:	e000      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002634:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800263e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002642:	4618      	mov	r0, r3
 8002644:	3764      	adds	r7, #100	; 0x64
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	50000100 	.word	0x50000100
 8002654:	50000300 	.word	0x50000300

08002658 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800266e:	2b00      	cmp	r3, #0
 8002670:	d126      	bne.n	80026c0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002688:	2b00      	cmp	r3, #0
 800268a:	d115      	bne.n	80026b8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff f95b 	bl	8001974 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026be:	e004      	b.n	80026ca <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff f951 	bl	8001988 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	f043 0204 	orr.w	r2, r3, #4
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff f941 	bl	800199c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <ADC_Enable+0x2c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <ADC_Enable+0x2c>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <ADC_Enable+0x2e>
 8002750:	2300      	movs	r3, #0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d143      	bne.n	80027de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <ADC_Enable+0xc4>)
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e02f      	b.n	80027e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002790:	f7ff f8e4 	bl	800195c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002796:	e01b      	b.n	80027d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002798:	f7ff f8e0 	bl	800195c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d914      	bls.n	80027d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d00d      	beq.n	80027d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d1dc      	bne.n	8002798 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	8000003f 	.word	0x8000003f

080027ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <ADC_Disable+0x2c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <ADC_Disable+0x2c>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <ADC_Disable+0x2e>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d047      	beq.n	80028ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030d 	and.w	r3, r3, #13
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10f      	bne.n	800284c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0202 	orr.w	r2, r2, #2
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2203      	movs	r2, #3
 8002842:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002844:	f7ff f88a 	bl	800195c <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800284a:	e029      	b.n	80028a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0210 	orr.w	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e023      	b.n	80028b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002868:	f7ff f878 	bl	800195c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d914      	bls.n	80028a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e007      	b.n	80028b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d0dc      	beq.n	8002868 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 809b 	beq.w	8002a14 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ec:	d12a      	bne.n	8002944 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d126      	bne.n	8002944 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d122      	bne.n	8002944 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80028fe:	230c      	movs	r3, #12
 8002900:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002902:	e014      	b.n	800292e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4a46      	ldr	r2, [pc, #280]	; (8002a20 <ADC_ConversionStop+0x168>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d90d      	bls.n	8002928 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0210 	orr.w	r2, r3, #16
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e076      	b.n	8002a16 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	3301      	adds	r3, #1
 800292c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d1e3      	bne.n	8002904 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2240      	movs	r2, #64	; 0x40
 8002942:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b60      	cmp	r3, #96	; 0x60
 8002948:	d015      	beq.n	8002976 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d10e      	bne.n	8002976 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0210 	orr.w	r2, r2, #16
 8002974:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d015      	beq.n	80029a8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d10e      	bne.n	80029a8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002994:	2b00      	cmp	r3, #0
 8002996:	d107      	bne.n	80029a8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0220 	orr.w	r2, r2, #32
 80029a6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b60      	cmp	r3, #96	; 0x60
 80029ac:	d005      	beq.n	80029ba <ADC_ConversionStop+0x102>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b6c      	cmp	r3, #108	; 0x6c
 80029b2:	d105      	bne.n	80029c0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029b4:	230c      	movs	r3, #12
 80029b6:	617b      	str	r3, [r7, #20]
        break;
 80029b8:	e005      	b.n	80029c6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029ba:	2308      	movs	r3, #8
 80029bc:	617b      	str	r3, [r7, #20]
        break;
 80029be:	e002      	b.n	80029c6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029c0:	2304      	movs	r3, #4
 80029c2:	617b      	str	r3, [r7, #20]
        break;
 80029c4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029c6:	f7fe ffc9 	bl	800195c <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029cc:	e01b      	b.n	8002a06 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029ce:	f7fe ffc5 	bl	800195c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b0b      	cmp	r3, #11
 80029da:	d914      	bls.n	8002a06 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e007      	b.n	8002a16 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1dc      	bne.n	80029ce <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	000993ff 	.word	0x000993ff

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db0c      	blt.n	8002af0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <__NVIC_ClearPendingIRQ+0x38>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	3360      	adds	r3, #96	; 0x60
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f1c3 0307 	rsb	r3, r3, #7
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf28      	it	cs
 8002b72:	2304      	movcs	r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d902      	bls.n	8002b84 <NVIC_EncodePriority+0x30>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b03      	subs	r3, #3
 8002b82:	e000      	b.n	8002b86 <NVIC_EncodePriority+0x32>
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4313      	orrs	r3, r2
         );
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bcc:	d301      	bcc.n	8002bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00f      	b.n	8002bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <SysTick_Config+0x40>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bda:	210f      	movs	r1, #15
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002be0:	f7ff ff8e 	bl	8002b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <SysTick_Config+0x40>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <SysTick_Config+0x40>)
 8002bec:	2207      	movs	r2, #7
 8002bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	e000e010 	.word	0xe000e010

08002c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff0b 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c28:	f7ff ff20 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f7ff ff8e 	bl	8002b54 <NVIC_EncodePriority>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff5d 	bl	8002b00 <__NVIC_SetPriority>
}
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff13 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ffa2 	bl	8002bbc <SysTick_Config>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff17 	bl	8002ac4 <__NVIC_ClearPendingIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e037      	b.n	8002d24 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f97a 	bl	8003000 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}  
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Start_IT+0x20>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e04a      	b.n	8002de2 <HAL_DMA_Start_IT+0xb6>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d13a      	bne.n	8002dd4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f90d 	bl	8002fa2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 020e 	orr.w	r2, r2, #14
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e00f      	b.n	8002dc2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 020a 	orr.w	r2, r2, #10
 8002db0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0204 	bic.w	r2, r2, #4
 8002dc0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e005      	b.n	8002de0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d008      	beq.n	8002e0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e020      	b.n	8002e50 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 020e 	bic.w	r2, r2, #14
 8002e1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2204      	movs	r2, #4
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d024      	beq.n	8002ece <HAL_DMA_IRQHandler+0x72>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01f      	beq.n	8002ece <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2104      	movs	r1, #4
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d06a      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ecc:	e065      	b.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_IRQHandler+0xdc>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 020a 	bic.w	r2, r2, #10
 8002f04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	2102      	movs	r1, #2
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d035      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002f36:	e030      	b.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d028      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d023      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 020e 	bic.w	r2, r2, #14
 8002f60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
    }
  }
}  
 8002f98:	e7ff      	b.n	8002f9a <HAL_DMA_IRQHandler+0x13e>
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d108      	bne.n	8002fe2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fe0:	e007      	b.n	8002ff2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	60da      	str	r2, [r3, #12]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <DMA_CalcBaseAndBitshift+0x34>)
 8003010:	4413      	add	r3, r2
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <DMA_CalcBaseAndBitshift+0x38>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a06      	ldr	r2, [pc, #24]	; (800303c <DMA_CalcBaseAndBitshift+0x3c>)
 8003024:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	bffdfff8 	.word	0xbffdfff8
 8003038:	cccccccd 	.word	0xcccccccd
 800303c:	40020000 	.word	0x40020000

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e14e      	b.n	80032ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8140 	beq.w	80032e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_GPIO_Init+0x40>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d130      	bne.n	80030e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b6:	2201      	movs	r2, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 0201 	and.w	r2, r3, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d017      	beq.n	800311e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d123      	bne.n	8003172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 809a 	beq.w	80032e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_GPIO_Init+0x2cc>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <HAL_GPIO_Init+0x2cc>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6193      	str	r3, [r2, #24]
 80031c0:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_GPIO_Init+0x2cc>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_GPIO_Init+0x2d0>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f6:	d013      	beq.n	8003220 <HAL_GPIO_Init+0x1e0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_GPIO_Init+0x2d4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00d      	beq.n	800321c <HAL_GPIO_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a45      	ldr	r2, [pc, #276]	; (8003318 <HAL_GPIO_Init+0x2d8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_Init+0x1d8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a44      	ldr	r2, [pc, #272]	; (800331c <HAL_GPIO_Init+0x2dc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_GPIO_Init+0x1d4>
 8003210:	2303      	movs	r3, #3
 8003212:	e006      	b.n	8003222 <HAL_GPIO_Init+0x1e2>
 8003214:	2305      	movs	r3, #5
 8003216:	e004      	b.n	8003222 <HAL_GPIO_Init+0x1e2>
 8003218:	2302      	movs	r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x1e2>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_GPIO_Init+0x1e2>
 8003220:	2300      	movs	r3, #0
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4093      	lsls	r3, r2
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003232:	4937      	ldr	r1, [pc, #220]	; (8003310 <HAL_GPIO_Init+0x2d0>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003264:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032e2:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <HAL_GPIO_Init+0x2e0>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f aea9 	bne.w	8003050 <HAL_GPIO_Init+0x10>
  }
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	48000400 	.word	0x48000400
 8003318:	48000800 	.word	0x48000800
 800331c:	48000c00 	.word	0x48000c00
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800335a:	af00      	add	r7, sp, #0
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003364:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f001 b823 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 817d 	beq.w	800368a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003390:	4bbc      	ldr	r3, [pc, #752]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b04      	cmp	r3, #4
 800339a:	d00c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800339c:	4bb9      	ldr	r3, [pc, #740]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d15c      	bne.n	8003462 <HAL_RCC_OscConfig+0x10e>
 80033a8:	4bb6      	ldr	r3, [pc, #728]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d155      	bne.n	8003462 <HAL_RCC_OscConfig+0x10e>
 80033b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_OscConfig+0x94>
 80033e2:	4ba8      	ldr	r3, [pc, #672]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e015      	b.n	8003414 <HAL_RCC_OscConfig+0xc0>
 80033e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003400:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003404:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003410:	4b9c      	ldr	r3, [pc, #624]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003418:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800341c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003420:	fa92 f2a2 	rbit	r2, r2
 8003424:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003428:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 811f 	beq.w	8003688 <HAL_RCC_OscConfig+0x334>
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 8116 	bne.w	8003688 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f000 bfaf 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x12e>
 8003474:	4b83      	ldr	r3, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a82      	ldr	r2, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e036      	b.n	80034f0 <HAL_RCC_OscConfig+0x19c>
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x158>
 8003492:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7b      	ldr	r2, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b79      	ldr	r3, [pc, #484]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a78      	ldr	r2, [pc, #480]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e021      	b.n	80034f0 <HAL_RCC_OscConfig+0x19c>
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x184>
 80034be:	4b71      	ldr	r3, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a70      	ldr	r2, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b6e      	ldr	r3, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6d      	ldr	r2, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0x19c>
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a69      	ldr	r2, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a66      	ldr	r2, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f023 020f 	bic.w	r2, r3, #15
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	495f      	ldr	r1, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003506:	4313      	orrs	r3, r2
 8003508:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d059      	beq.n	80035ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351a:	f7fe fa1f 	bl	800195c <HAL_GetTick>
 800351e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe fa1a 	bl	800195c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b64      	cmp	r3, #100	; 0x64
 8003532:	d902      	bls.n	800353a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	f000 bf43 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 800353a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800353e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800354e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <HAL_RCC_OscConfig+0x218>
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x244>
 800356c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003570:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003584:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003588:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800359c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80035ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	f002 021f 	and.w	r2, r2, #31
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ab      	beq.n	8003524 <HAL_RCC_OscConfig+0x1d0>
 80035cc:	e05d      	b.n	800368a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe f9c5 	bl	800195c <HAL_GetTick>
 80035d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe f9c0 	bl	800195c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d902      	bls.n	80035ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	f000 bee9 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 80035ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003602:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_RCC_OscConfig+0x2cc>
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e015      	b.n	800364c <HAL_RCC_OscConfig+0x2f8>
 8003620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003624:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003638:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800363c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCC_OscConfig+0x330>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003650:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003654:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003660:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f002 021f 	and.w	r2, r2, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ab      	bne.n	80035d8 <HAL_RCC_OscConfig+0x284>
 8003680:	e003      	b.n	800368a <HAL_RCC_OscConfig+0x336>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 817d 	beq.w	800399a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036a0:	4ba6      	ldr	r3, [pc, #664]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036ac:	4ba3      	ldr	r3, [pc, #652]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d172      	bne.n	800379e <HAL_RCC_OscConfig+0x44a>
 80036b8:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d16c      	bne.n	800379e <HAL_RCC_OscConfig+0x44a>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3a0>
 80036ee:	4b93      	ldr	r3, [pc, #588]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e013      	b.n	800371c <HAL_RCC_OscConfig+0x3c8>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800370c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003718:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2202      	movs	r2, #2
 800371e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003722:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003726:	fa92 f2a2 	rbit	r2, r2
 800372a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800372e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCC_OscConfig+0x410>
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d002      	beq.n	8003764 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f000 be2e 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b75      	ldr	r3, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	21f8      	movs	r1, #248	; 0xf8
 800377a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003782:	fa91 f1a1 	rbit	r1, r1
 8003786:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800378a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800378e:	fab1 f181 	clz	r1, r1
 8003792:	b2c9      	uxtb	r1, r1
 8003794:	408b      	lsls	r3, r1
 8003796:	4969      	ldr	r1, [pc, #420]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379c:	e0fd      	b.n	800399a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8088 	beq.w	80038c0 <HAL_RCC_OscConfig+0x56c>
 80037b0:	2301      	movs	r3, #1
 80037b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80037c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	461a      	mov	r2, r3
 80037d8:	2301      	movs	r3, #1
 80037da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe f8be 	bl	800195c <HAL_GetTick>
 80037e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fe f8b9 	bl	800195c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	f000 bde2 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800380e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_RCC_OscConfig+0x4d8>
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	e013      	b.n	8003854 <HAL_RCC_OscConfig+0x500>
 800382c:	2302      	movs	r3, #2
 800382e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800383e:	2302      	movs	r3, #2
 8003840:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003844:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003850:	4b3a      	ldr	r3, [pc, #232]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	2202      	movs	r2, #2
 8003856:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800385a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800385e:	fa92 f2a2 	rbit	r2, r2
 8003862:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003866:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800386a:	fab2 f282 	clz	r2, r2
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f042 0220 	orr.w	r2, r2, #32
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f002 021f 	and.w	r2, r2, #31
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0af      	beq.n	80037e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	21f8      	movs	r1, #248	; 0xf8
 800389c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038a4:	fa91 f1a1 	rbit	r1, r1
 80038a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038b0:	fab1 f181 	clz	r1, r1
 80038b4:	b2c9      	uxtb	r1, r1
 80038b6:	408b      	lsls	r3, r1
 80038b8:	4920      	ldr	r1, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
 80038be:	e06c      	b.n	800399a <HAL_RCC_OscConfig+0x646>
 80038c0:	2301      	movs	r3, #1
 80038c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe f836 	bl	800195c <HAL_GetTick>
 80038f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f6:	f7fe f831 	bl	800195c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	f000 bd5a 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800391e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d104      	bne.n	8003940 <HAL_RCC_OscConfig+0x5ec>
 8003936:	4b01      	ldr	r3, [pc, #4]	; (800393c <HAL_RCC_OscConfig+0x5e8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	e015      	b.n	8003968 <HAL_RCC_OscConfig+0x614>
 800393c:	40021000 	.word	0x40021000
 8003940:	2302      	movs	r3, #2
 8003942:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003952:	2302      	movs	r3, #2
 8003954:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003958:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003964:	4bc8      	ldr	r3, [pc, #800]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2202      	movs	r2, #2
 800396a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800396e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003972:	fa92 f2a2 	rbit	r2, r2
 8003976:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800397a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800397e:	fab2 f282 	clz	r2, r2
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	f042 0220 	orr.w	r2, r2, #32
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	f002 021f 	and.w	r2, r2, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f202 	lsl.w	r2, r1, r2
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ad      	bne.n	80038f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8110 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d079      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x760>
 80039c0:	2301      	movs	r3, #1
 80039c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	4bab      	ldr	r3, [pc, #684]	; (8003c8c <HAL_RCC_OscConfig+0x938>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	2301      	movs	r3, #1
 80039e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fd ffb7 	bl	800195c <HAL_GetTick>
 80039ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fd ffb2 	bl	800195c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	f000 bcdb 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a24:	2202      	movs	r2, #2
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a48:	2202      	movs	r2, #2
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a64:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a70:	2102      	movs	r1, #2
 8003a72:	6019      	str	r1, [r3, #0]
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f1a3 	rbit	r1, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a8a:	6019      	str	r1, [r3, #0]
  return result;
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0a0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x6a0>
 8003ab2:	e08d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x87c>
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fa93 f2a3 	rbit	r2, r3
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ad6:	601a      	str	r2, [r3, #0]
  return result;
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ae0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCC_OscConfig+0x938>)
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fd ff31 	bl	800195c <HAL_GetTick>
 8003afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd ff2c 	bl	800195c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	f000 bc55 	b.w	80043c0 <HAL_RCC_OscConfig+0x106c>
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	fa93 f2a3 	rbit	r2, r3
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fa93 f2a3 	rbit	r2, r3
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b8e:	2102      	movs	r1, #2
 8003b90:	6019      	str	r1, [r3, #0]
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fa93 f1a3 	rbit	r1, r3
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ba8:	6019      	str	r1, [r3, #0]
  return result;
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d197      	bne.n	8003b00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 81a1 	beq.w	8003f28 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bec:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d116      	bne.n	8003c26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	61d3      	str	r3, [r2, #28]
 8003c04:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003c1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x93c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x93c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <HAL_RCC_OscConfig+0x93c>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fe8d 	bl	800195c <HAL_GetTick>
 8003c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	e009      	b.n	8003c5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fd fe88 	bl	800195c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e3b1      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x93c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCC_OscConfig+0x940>
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_RCC_OscConfig+0x934>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e03c      	b.n	8003d00 <HAL_RCC_OscConfig+0x9ac>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	10908120 	.word	0x10908120
 8003c90:	40007000 	.word	0x40007000
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCC_OscConfig+0x96a>
 8003ca4:	4bc1      	ldr	r3, [pc, #772]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4ac0      	ldr	r2, [pc, #768]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6213      	str	r3, [r2, #32]
 8003cb0:	4bbe      	ldr	r3, [pc, #760]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4abd      	ldr	r2, [pc, #756]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cb6:	f023 0304 	bic.w	r3, r3, #4
 8003cba:	6213      	str	r3, [r2, #32]
 8003cbc:	e020      	b.n	8003d00 <HAL_RCC_OscConfig+0x9ac>
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x994>
 8003cce:	4bb7      	ldr	r3, [pc, #732]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4ab6      	ldr	r2, [pc, #728]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	4bb4      	ldr	r3, [pc, #720]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4ab3      	ldr	r2, [pc, #716]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x9ac>
 8003ce8:	4bb0      	ldr	r3, [pc, #704]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4aaf      	ldr	r2, [pc, #700]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6213      	str	r3, [r2, #32]
 8003cf4:	4bad      	ldr	r3, [pc, #692]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4aac      	ldr	r2, [pc, #688]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003cfa:	f023 0304 	bic.w	r3, r3, #4
 8003cfe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8081 	beq.w	8003e14 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fd fe23 	bl	800195c <HAL_GetTick>
 8003d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1c:	f7fd fe1e 	bl	800195c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e345      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	fa93 f2a3 	rbit	r2, r3
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d60:	2202      	movs	r2, #2
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	fa93 f2a3 	rbit	r2, r3
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d7a:	601a      	str	r2, [r3, #0]
  return result;
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0xa4c>
 8003d9a:	4b84      	ldr	r3, [pc, #528]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	e013      	b.n	8003dc8 <HAL_RCC_OscConfig+0xa74>
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003da8:	2202      	movs	r2, #2
 8003daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	fa93 f2a3 	rbit	r2, r3
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	4b79      	ldr	r3, [pc, #484]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dcc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	6011      	str	r1, [r2, #0]
 8003dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	fa92 f1a2 	rbit	r1, r2
 8003de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003dea:	6011      	str	r1, [r2, #0]
  return result;
 8003dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	fab2 f282 	clz	r2, r2
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f002 021f 	and.w	r2, r2, #31
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d084      	beq.n	8003d1c <HAL_RCC_OscConfig+0x9c8>
 8003e12:	e07f      	b.n	8003f14 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fd fda2 	bl	800195c <HAL_GetTick>
 8003e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1c:	e00b      	b.n	8003e36 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd fd9d 	bl	800195c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e2c4      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
 8003e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e3e:	2202      	movs	r2, #2
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e62:	2202      	movs	r2, #2
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e7c:	601a      	str	r2, [r3, #0]
  return result;
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f043 0302 	orr.w	r3, r3, #2
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RCC_OscConfig+0xb4e>
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	e013      	b.n	8003eca <HAL_RCC_OscConfig+0xb76>
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003eaa:	2202      	movs	r2, #2
 8003eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	fa93 f2a3 	rbit	r2, r3
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ece:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	fa92 f1a2 	rbit	r1, r2
 8003ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003eec:	6011      	str	r1, [r2, #0]
  return result;
 8003eee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f002 021f 	and.w	r2, r2, #31
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d184      	bne.n	8003e1e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f14:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8242 	beq.w	80043be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f3a:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_RCC_OscConfig+0xc58>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	f000 8213 	beq.w	800436e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	f040 8162 	bne.w	800421e <HAL_RCC_OscConfig+0xeca>
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f7e:	601a      	str	r2, [r3, #0]
  return result;
 8003f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fcdc 	bl	800195c <HAL_GetTick>
 8003fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	e00c      	b.n	8003fc4 <HAL_RCC_OscConfig+0xc70>
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fcd4 	bl	800195c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1fd      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fa93 f2a3 	rbit	r2, r3
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003fe8:	601a      	str	r2, [r3, #0]
  return result;
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ff2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <HAL_RCC_OscConfig+0xcba>
 8004008:	4bb0      	ldr	r3, [pc, #704]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	e027      	b.n	800405e <HAL_RCC_OscConfig+0xd0a>
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800403c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004062:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004066:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800406a:	6011      	str	r1, [r2, #0]
 800406c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004070:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	fa92 f1a2 	rbit	r1, r2
 800407a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800407e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004082:	6011      	str	r1, [r2, #0]
  return result;
 8004084:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004088:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d182      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040aa:	4b88      	ldr	r3, [pc, #544]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	430b      	orrs	r3, r1
 80040cc:	497f      	ldr	r1, [pc, #508]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80040da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	fa93 f2a3 	rbit	r2, r3
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040f6:	601a      	str	r2, [r3, #0]
  return result;
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004100:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800410c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	461a      	mov	r2, r3
 8004114:	2301      	movs	r3, #1
 8004116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd fc20 	bl	800195c <HAL_GetTick>
 800411c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004120:	e009      	b.n	8004136 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004122:	f7fd fc1b 	bl	800195c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e144      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800413e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004156:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800415a:	601a      	str	r2, [r3, #0]
  return result;
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0xe2c>
 800417a:	4b54      	ldr	r3, [pc, #336]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e027      	b.n	80041d0 <HAL_RCC_OscConfig+0xe7c>
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80041ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80041d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	fa92 f1a2 	rbit	r1, r2
 80041ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041f4:	6011      	str	r1, [r2, #0]
  return result;
 80041f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	fab2 f282 	clz	r2, r2
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f002 021f 	and.w	r2, r2, #31
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f202 	lsl.w	r2, r1, r2
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d082      	beq.n	8004122 <HAL_RCC_OscConfig+0xdce>
 800421c:	e0cf      	b.n	80043be <HAL_RCC_OscConfig+0x106a>
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800422a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004230:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004242:	601a      	str	r2, [r3, #0]
  return result;
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800424c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fb7a 	bl	800195c <HAL_GetTick>
 8004268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426c:	e009      	b.n	8004282 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd fb75 	bl	800195c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e09e      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80042a6:	601a      	str	r2, [r3, #0]
  return result;
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80042b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d104      	bne.n	80042d0 <HAL_RCC_OscConfig+0xf7c>
 80042c6:	4b01      	ldr	r3, [pc, #4]	; (80042cc <HAL_RCC_OscConfig+0xf78>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	e029      	b.n	8004320 <HAL_RCC_OscConfig+0xfcc>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80042d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	fa93 f2a3 	rbit	r2, r3
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80042fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004308:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004316:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_RCC_OscConfig+0x1078>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004324:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004328:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004332:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	fa92 f1a2 	rbit	r1, r2
 800433c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004340:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004344:	6011      	str	r1, [r2, #0]
  return result;
 8004346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800434a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	fab2 f282 	clz	r2, r2
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f042 0220 	orr.w	r2, r2, #32
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f002 021f 	and.w	r2, r2, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d180      	bne.n	800426e <HAL_RCC_OscConfig+0xf1a>
 800436c:	e027      	b.n	80043be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e01e      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_RCC_OscConfig+0x1078>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800438a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800438e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d10b      	bne.n	80043ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b09e      	sub	sp, #120	; 0x78
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e162      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b90      	ldr	r3, [pc, #576]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d910      	bls.n	8004418 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b8d      	ldr	r3, [pc, #564]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	498b      	ldr	r1, [pc, #556]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e14a      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b82      	ldr	r3, [pc, #520]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	497f      	ldr	r1, [pc, #508]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80dc 	beq.w	80045fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d13c      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xf6>
 800444c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004450:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d102      	bne.n	8004476 <HAL_RCC_ClockConfig+0xa6>
 8004470:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	e00f      	b.n	8004496 <HAL_RCC_ClockConfig+0xc6>
 8004476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800447a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	667b      	str	r3, [r7, #100]	; 0x64
 8004484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004488:	663b      	str	r3, [r7, #96]	; 0x60
 800448a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004492:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800449a:	65ba      	str	r2, [r7, #88]	; 0x58
 800449c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800449e:	fa92 f2a2 	rbit	r2, r2
 80044a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80044a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044a6:	fab2 f282 	clz	r2, r2
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f002 021f 	and.w	r2, r2, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f202 	lsl.w	r2, r1, r2
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d17b      	bne.n	80045ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0f3      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d13c      	bne.n	8004548 <HAL_RCC_ClockConfig+0x178>
 80044ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x128>
 80044f2:	4b4f      	ldr	r3, [pc, #316]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	e00f      	b.n	8004518 <HAL_RCC_ClockConfig+0x148>
 80044f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	647b      	str	r3, [r7, #68]	; 0x44
 8004506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800451c:	63ba      	str	r2, [r7, #56]	; 0x38
 800451e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004520:	fa92 f2a2 	rbit	r2, r2
 8004524:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004528:	fab2 f282 	clz	r2, r2
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	f002 021f 	and.w	r2, r2, #31
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d13a      	bne.n	80045ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b2      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
 8004548:	2302      	movs	r3, #2
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d102      	bne.n	8004570 <HAL_RCC_ClockConfig+0x1a0>
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e00d      	b.n	800458c <HAL_RCC_ClockConfig+0x1bc>
 8004570:	2302      	movs	r3, #2
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
 800457c:	2302      	movs	r3, #2
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2202      	movs	r2, #2
 800458e:	61ba      	str	r2, [r7, #24]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	fa92 f2a2 	rbit	r2, r2
 8004596:	617a      	str	r2, [r7, #20]
  return result;
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	fab2 f282 	clz	r2, r2
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	f042 0220 	orr.w	r2, r2, #32
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	f002 021f 	and.w	r2, r2, #31
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f202 	lsl.w	r2, r1, r2
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e079      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	491a      	ldr	r1, [pc, #104]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fd f9c6 	bl	800195c <HAL_GetTick>
 80045d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fd f9c2 	bl	800195c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e061      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_ClockConfig+0x260>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d214      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	4906      	ldr	r1, [pc, #24]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_RCC_ClockConfig+0x25c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e040      	b.n	80046ae <HAL_RCC_ClockConfig+0x2de>
 800462c:	40022000 	.word	0x40022000
 8004630:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	491a      	ldr	r1, [pc, #104]	; (80046b8 <HAL_RCC_ClockConfig+0x2e8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4912      	ldr	r1, [pc, #72]	; (80046b8 <HAL_RCC_ClockConfig+0x2e8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004672:	f000 f829 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 8004676:	4601      	mov	r1, r0
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <HAL_RCC_ClockConfig+0x2e8>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	22f0      	movs	r2, #240	; 0xf0
 8004682:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	fa92 f2a2 	rbit	r2, r2
 800468a:	60fa      	str	r2, [r7, #12]
  return result;
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	fab2 f282 	clz	r2, r2
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	40d3      	lsrs	r3, r2
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <HAL_RCC_ClockConfig+0x2ec>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	fa21 f303 	lsr.w	r3, r1, r3
 800469e:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <HAL_RCC_ClockConfig+0x2f0>)
 80046a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_RCC_ClockConfig+0x2f4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd f914 	bl	80018d4 <HAL_InitTick>
  
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3778      	adds	r7, #120	; 0x78
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	08008f68 	.word	0x08008f68
 80046c0:	20000000 	.word	0x20000000
 80046c4:	20000004 	.word	0x20000004

080046c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b08b      	sub	sp, #44	; 0x2c
 80046cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d002      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x30>
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x36>
 80046f6:	e03c      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046fa:	623b      	str	r3, [r7, #32]
      break;
 80046fc:	e03c      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004704:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004708:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	fa92 f2a2 	rbit	r2, r2
 8004710:	607a      	str	r2, [r7, #4]
  return result;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	fab2 f282 	clz	r2, r2
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	40d3      	lsrs	r3, r2
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_RCC_GetSysClockFreq+0xc8>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	220f      	movs	r2, #15
 800472c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	fa92 f2a2 	rbit	r2, r2
 8004734:	60fa      	str	r2, [r7, #12]
  return result;
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	fab2 f282 	clz	r2, r2
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	40d3      	lsrs	r3, r2
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004750:	4a0e      	ldr	r2, [pc, #56]	; (800478c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	fbb2 f2f3 	udiv	r2, r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	e004      	b.n	800476c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	623b      	str	r3, [r7, #32]
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004774:	623b      	str	r3, [r7, #32]
      break;
 8004776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004778:	6a3b      	ldr	r3, [r7, #32]
}
 800477a:	4618      	mov	r0, r3
 800477c:	372c      	adds	r7, #44	; 0x2c
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	007a1200 	.word	0x007a1200
 8004790:	08008f78 	.word	0x08008f78
 8004794:	08008f88 	.word	0x08008f88
 8004798:	003d0900 	.word	0x003d0900

0800479c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b092      	sub	sp, #72	; 0x48
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80cd 	beq.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c0:	4b8e      	ldr	r3, [pc, #568]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10e      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4a8a      	ldr	r2, [pc, #552]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	61d3      	str	r3, [r2, #28]
 80047d8:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b85      	ldr	r3, [pc, #532]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a81      	ldr	r2, [pc, #516]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fd f8ab 	bl	800195c <HAL_GetTick>
 8004806:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fd f8a7 	bl	800195c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b64      	cmp	r3, #100	; 0x64
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0ea      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b78      	ldr	r3, [pc, #480]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004828:	4b74      	ldr	r3, [pc, #464]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d07d      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004842:	429a      	cmp	r2, r3
 8004844:	d076      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004846:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	461a      	mov	r2, r3
 8004870:	2301      	movs	r3, #1
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004898:	4a58      	ldr	r2, [pc, #352]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d045      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd f858 	bl	800195c <HAL_GetTick>
 80048ac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd f854 	bl	800195c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e095      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80048c6:	2302      	movs	r3, #2
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	2302      	movs	r3, #2
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	61fb      	str	r3, [r7, #28]
  return result;
 80048de:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d102      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	e007      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2202      	movs	r2, #2
 800490c:	613a      	str	r2, [r7, #16]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	fa92 f2a2 	rbit	r2, r2
 8004914:	60fa      	str	r2, [r7, #12]
  return result;
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	fab2 f282 	clz	r2, r2
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	f002 021f 	and.w	r2, r2, #31
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0bd      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004934:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	492e      	ldr	r1, [pc, #184]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	4313      	orrs	r3, r2
 8004944:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004946:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004958:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4922      	ldr	r1, [pc, #136]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f023 0210 	bic.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	491a      	ldr	r1, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	4313      	orrs	r3, r2
 8004994:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	4913      	ldr	r1, [pc, #76]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	490b      	ldr	r1, [pc, #44]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3748      	adds	r7, #72	; 0x48
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
 8004a04:	10908100 	.word	0x10908100

08004a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e049      	b.n	8004aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fcd4 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f000 feb2 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d001      	beq.n	8004ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e038      	b.n	8004b42 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <HAL_TIM_Base_Start+0x98>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_TIM_Base_Start+0x48>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d009      	beq.n	8004b00 <HAL_TIM_Base_Start+0x48>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_TIM_Base_Start+0x9c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_Base_Start+0x48>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_TIM_Base_Start+0xa0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d115      	bne.n	8004b2c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_TIM_Base_Start+0xa4>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d015      	beq.n	8004b3e <HAL_TIM_Base_Start+0x86>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d011      	beq.n	8004b3e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	e008      	b.n	8004b3e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e000      	b.n	8004b40 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	00010007 	.word	0x00010007

08004b60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e049      	b.n	8004c06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f841 	bl	8004c0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fe06 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_OC_Start_IT+0x28>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e03c      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xa2>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d109      	bne.n	8004c66 <HAL_TIM_OC_Start_IT+0x42>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	bf14      	ite	ne
 8004c5e:	2301      	movne	r3, #1
 8004c60:	2300      	moveq	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e02f      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xa2>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d109      	bne.n	8004c80 <HAL_TIM_OC_Start_IT+0x5c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	e022      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xa2>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d109      	bne.n	8004c9a <HAL_TIM_OC_Start_IT+0x76>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e015      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xa2>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d109      	bne.n	8004cb4 <HAL_TIM_OC_Start_IT+0x90>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_TIM_OC_Start_IT+0xa2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0d3      	b.n	8004e76 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_OC_Start_IT+0xba>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	e023      	b.n	8004d26 <HAL_TIM_OC_Start_IT+0x102>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_OC_Start_IT+0xca>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	e01b      	b.n	8004d26 <HAL_TIM_OC_Start_IT+0x102>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_OC_Start_IT+0xda>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_OC_Start_IT+0x102>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_OC_Start_IT+0xea>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_OC_Start_IT+0x102>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_OC_Start_IT+0xfa>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_OC_Start_IT+0x102>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d841      	bhi.n	8004db0 <HAL_TIM_OC_Start_IT+0x18c>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_TIM_OC_Start_IT+0x110>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004db1 	.word	0x08004db1
 8004d3c:	08004db1 	.word	0x08004db1
 8004d40:	08004db1 	.word	0x08004db1
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004db1 	.word	0x08004db1
 8004d4c:	08004db1 	.word	0x08004db1
 8004d50:	08004db1 	.word	0x08004db1
 8004d54:	08004d8d 	.word	0x08004d8d
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004d9f 	.word	0x08004d9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0202 	orr.w	r2, r2, #2
 8004d76:	60da      	str	r2, [r3, #12]
      break;
 8004d78:	e01d      	b.n	8004db6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0204 	orr.w	r2, r2, #4
 8004d88:	60da      	str	r2, [r3, #12]
      break;
 8004d8a:	e014      	b.n	8004db6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	60da      	str	r2, [r3, #12]
      break;
 8004d9c:	e00b      	b.n	8004db6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0210 	orr.w	r2, r2, #16
 8004dac:	60da      	str	r2, [r3, #12]
      break;
 8004dae:	e002      	b.n	8004db6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d15b      	bne.n	8004e74 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fa51 	bl	800626c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <HAL_TIM_OC_Start_IT+0x25c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00e      	beq.n	8004df2 <HAL_TIM_OC_Start_IT+0x1ce>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_TIM_OC_Start_IT+0x260>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_TIM_OC_Start_IT+0x1ce>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <HAL_TIM_OC_Start_IT+0x264>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_TIM_OC_Start_IT+0x1ce>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <HAL_TIM_OC_Start_IT+0x268>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_OC_Start_IT+0x1d2>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_OC_Start_IT+0x1d4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_TIM_OC_Start_IT+0x25c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_TIM_OC_Start_IT+0x210>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	d009      	beq.n	8004e34 <HAL_TIM_OC_Start_IT+0x210>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_TIM_OC_Start_IT+0x26c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_TIM_OC_Start_IT+0x210>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_TIM_OC_Start_IT+0x260>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d115      	bne.n	8004e60 <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <HAL_TIM_OC_Start_IT+0x270>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d015      	beq.n	8004e72 <HAL_TIM_OC_Start_IT+0x24e>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d011      	beq.n	8004e72 <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e008      	b.n	8004e72 <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800
 8004e90:	40000400 	.word	0x40000400
 8004e94:	00010007 	.word	0x00010007

08004e98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e049      	b.n	8004f3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f841 	bl	8004f46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 fc6a 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e041      	b.n	8004ff2 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f839 	bl	8004ffa <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fc08 	bl	80057b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0208 	bic.w	r2, r2, #8
 8004fae:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005020:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005028:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005030:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005038:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d108      	bne.n	8005052 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d105      	bne.n	8005052 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005046:	7b7b      	ldrb	r3, [r7, #13]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800504c:	7b3b      	ldrb	r3, [r7, #12]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d001      	beq.n	8005056 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e03f      	b.n	80050d6 <HAL_TIM_OnePulse_Start+0xc6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f001 f8f4 	bl	800626c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	2104      	movs	r1, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f001 f8ed 	bl	800626c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <HAL_TIM_OnePulse_Start+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIM_OnePulse_Start+0xaa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <HAL_TIM_OnePulse_Start+0xd4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIM_OnePulse_Start+0xaa>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <HAL_TIM_OnePulse_Start+0xd8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIM_OnePulse_Start+0xaa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <HAL_TIM_OnePulse_Start+0xdc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_TIM_OnePulse_Start+0xae>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_OnePulse_Start+0xb0>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_OnePulse_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0202 	mvn.w	r2, #2
 800511c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb1d 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc f86a 	bl	8001214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fb20 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d122      	bne.n	80051a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d11b      	bne.n	80051a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0204 	mvn.w	r2, #4
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 faf3 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc f840 	bl	8001214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 faf6 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0208 	mvn.w	r2, #8
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2204      	movs	r2, #4
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fac9 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc f816 	bl	8001214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 facc 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b10      	cmp	r3, #16
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0210 	mvn.w	r2, #16
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2208      	movs	r2, #8
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa9f 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fb ffec 	bl	8001214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 faa2 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d10e      	bne.n	8005274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d107      	bne.n	8005274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0201 	mvn.w	r2, #1
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fff6 	bl	8001260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	2b80      	cmp	r3, #128	; 0x80
 8005280:	d10e      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d107      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 f8fc 	bl	8006498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	d10e      	bne.n	80052ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d107      	bne.n	80052ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 f8ef 	bl	80064ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d10e      	bne.n	80052fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fa50 	bl	800579a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d10e      	bne.n	8005326 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b20      	cmp	r3, #32
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0220 	mvn.w	r2, #32
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 f8af 	bl	8006484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_TIM_OC_ConfigChannel+0x1e>
 800534a:	2302      	movs	r3, #2
 800534c:	e066      	b.n	800541c <HAL_TIM_OC_ConfigChannel+0xec>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b14      	cmp	r3, #20
 800535a:	d857      	bhi.n	800540c <HAL_TIM_OC_ConfigChannel+0xdc>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <HAL_TIM_OC_ConfigChannel+0x34>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	080053b9 	.word	0x080053b9
 8005368:	0800540d 	.word	0x0800540d
 800536c:	0800540d 	.word	0x0800540d
 8005370:	0800540d 	.word	0x0800540d
 8005374:	080053c7 	.word	0x080053c7
 8005378:	0800540d 	.word	0x0800540d
 800537c:	0800540d 	.word	0x0800540d
 8005380:	0800540d 	.word	0x0800540d
 8005384:	080053d5 	.word	0x080053d5
 8005388:	0800540d 	.word	0x0800540d
 800538c:	0800540d 	.word	0x0800540d
 8005390:	0800540d 	.word	0x0800540d
 8005394:	080053e3 	.word	0x080053e3
 8005398:	0800540d 	.word	0x0800540d
 800539c:	0800540d 	.word	0x0800540d
 80053a0:	0800540d 	.word	0x0800540d
 80053a4:	080053f1 	.word	0x080053f1
 80053a8:	0800540d 	.word	0x0800540d
 80053ac:	0800540d 	.word	0x0800540d
 80053b0:	0800540d 	.word	0x0800540d
 80053b4:	080053ff 	.word	0x080053ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa6e 	bl	80058a0 <TIM_OC1_SetConfig>
      break;
 80053c4:	e025      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 faed 	bl	80059ac <TIM_OC2_SetConfig>
      break;
 80053d2:	e01e      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb66 	bl	8005aac <TIM_OC3_SetConfig>
      break;
 80053e0:	e017      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fbdd 	bl	8005ba8 <TIM_OC4_SetConfig>
      break;
 80053ee:	e010      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fc3a 	bl	8005c70 <TIM_OC5_SetConfig>
      break;
 80053fc:	e009      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fc91 	bl	8005d2c <TIM_OC6_SetConfig>
      break;
 800540a:	e002      	b.n	8005412 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
      break;
 8005410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_TIM_IC_ConfigChannel+0x1e>
 800543e:	2302      	movs	r3, #2
 8005440:	e088      	b.n	8005554 <HAL_TIM_IC_ConfigChannel+0x130>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6819      	ldr	r1, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f000 fd58 	bl	8005f14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 020c 	bic.w	r2, r2, #12
 8005472:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e060      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d11c      	bne.n	80054c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6819      	ldr	r1, [r3, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f000 fdc4 	bl	800602a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6999      	ldr	r1, [r3, #24]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	021a      	lsls	r2, r3, #8
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	619a      	str	r2, [r3, #24]
 80054c6:	e040      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f000 fe11 	bl	8006104 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 020c 	bic.w	r2, r2, #12
 80054f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
 8005504:	e021      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b0c      	cmp	r3, #12
 800550a:	d11c      	bne.n	8005546 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 fe2e 	bl	800617c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800552e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69d9      	ldr	r1, [r3, #28]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	61da      	str	r2, [r3, #28]
 8005544:	e001      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_TIM_ConfigClockSource+0x1c>
 8005574:	2302      	movs	r3, #2
 8005576:	e0b6      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x18a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800559a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d03e      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xd8>
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	f200 8087 	bhi.w	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_TIM_ConfigClockSource+0x176>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d87f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055cc:	2b70      	cmp	r3, #112	; 0x70
 80055ce:	d01a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xaa>
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d87b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d050      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x11e>
 80055d8:	2b60      	cmp	r3, #96	; 0x60
 80055da:	d877      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d03c      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xfe>
 80055e0:	2b50      	cmp	r3, #80	; 0x50
 80055e2:	d873      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d058      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x13e>
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d86f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d064      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15e>
 80055f0:	2b30      	cmp	r3, #48	; 0x30
 80055f2:	d86b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d060      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15e>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d867      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15e>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d05a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15e>
 8005604:	e062      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f000 fe09 	bl	800622c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
      break;
 8005632:	e04f      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f000 fdf2 	bl	800622c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e03c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fcb0 	bl	8005fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2150      	movs	r1, #80	; 0x50
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fdbf 	bl	80061f6 <TIM_ITRx_SetConfig>
      break;
 8005678:	e02c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fd0c 	bl	80060a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2160      	movs	r1, #96	; 0x60
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fdaf 	bl	80061f6 <TIM_ITRx_SetConfig>
      break;
 8005698:	e01c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fc90 	bl	8005fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fd9f 	bl	80061f6 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 fd96 	bl	80061f6 <TIM_ITRx_SetConfig>
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005702:	2302      	movs	r3, #2
 8005704:	e031      	b.n	800576a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb67 	bl	8005dec <TIM_SlaveTimer_SetConfig>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e018      	b.n	800576a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005746:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005756:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a32      	ldr	r2, [pc, #200]	; (800588c <TIM_Base_SetConfig+0xdc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x28>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x28>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <TIM_Base_SetConfig+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a27      	ldr	r2, [pc, #156]	; (800588c <TIM_Base_SetConfig+0xdc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0x6a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0x6a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <TIM_Base_SetConfig+0xe0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0x6a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <TIM_Base_SetConfig+0xe4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0x6a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <TIM_Base_SetConfig+0xe8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0x6a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_Base_SetConfig+0xec>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <TIM_Base_SetConfig+0xdc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0xc0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <TIM_Base_SetConfig+0xe4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0xc0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <TIM_Base_SetConfig+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0xc0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a0c      	ldr	r2, [pc, #48]	; (800589c <TIM_Base_SetConfig+0xec>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	615a      	str	r2, [r3, #20]
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40000400 	.word	0x40000400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0302 	bic.w	r3, r3, #2
 80058ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a28      	ldr	r2, [pc, #160]	; (800599c <TIM_OC1_SetConfig+0xfc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_OC1_SetConfig+0x78>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_OC1_SetConfig+0x100>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_OC1_SetConfig+0x78>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <TIM_OC1_SetConfig+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC1_SetConfig+0x78>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <TIM_OC1_SetConfig+0x108>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10c      	bne.n	8005932 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0308 	bic.w	r3, r3, #8
 800591e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <TIM_OC1_SetConfig+0xfc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_OC1_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a18      	ldr	r2, [pc, #96]	; (80059a0 <TIM_OC1_SetConfig+0x100>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_OC1_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <TIM_OC1_SetConfig+0x104>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC1_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <TIM_OC1_SetConfig+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d111      	bne.n	8005976 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800

080059ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0210 	bic.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0320 	bic.w	r3, r3, #32
 80059fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a24      	ldr	r2, [pc, #144]	; (8005a9c <TIM_OC2_SetConfig+0xf0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10d      	bne.n	8005a2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <TIM_OC2_SetConfig+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00b      	beq.n	8005a4c <TIM_OC2_SetConfig+0xa0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <TIM_OC2_SetConfig+0xf4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <TIM_OC2_SetConfig+0xa0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <TIM_OC2_SetConfig+0xf8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0xa0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <TIM_OC2_SetConfig+0xfc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d113      	bne.n	8005a74 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a52:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800

08005aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <TIM_OC3_SetConfig+0xec>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10d      	bne.n	8005b2a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b28:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <TIM_OC3_SetConfig+0xec>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_OC3_SetConfig+0xf0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_OC3_SetConfig+0xf4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_OC3_SetConfig+0x9e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC3_SetConfig+0xf8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	621a      	str	r2, [r3, #32]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <TIM_OC4_SetConfig+0xb8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC4_SetConfig+0x7c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <TIM_OC4_SetConfig+0xbc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC4_SetConfig+0x7c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <TIM_OC4_SetConfig+0xc0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <TIM_OC4_SetConfig+0xc4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d109      	bne.n	8005c38 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	019b      	lsls	r3, r3, #6
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC5_SetConfig+0xac>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_OC5_SetConfig+0x72>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <TIM_OC5_SetConfig+0xb0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC5_SetConfig+0x72>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <TIM_OC5_SetConfig+0xb4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC5_SetConfig+0x72>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <TIM_OC5_SetConfig+0xb8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d109      	bne.n	8005cf6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	051b      	lsls	r3, r3, #20
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC6_SetConfig+0xb0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_OC6_SetConfig+0x74>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC6_SetConfig+0xb4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_OC6_SetConfig+0x74>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <TIM_OC6_SetConfig+0xb8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC6_SetConfig+0x74>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <TIM_OC6_SetConfig+0xbc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	029b      	lsls	r3, r3, #10
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b70      	cmp	r3, #112	; 0x70
 8005e38:	d01a      	beq.n	8005e70 <TIM_SlaveTimer_SetConfig+0x84>
 8005e3a:	2b70      	cmp	r3, #112	; 0x70
 8005e3c:	d860      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e3e:	2b60      	cmp	r3, #96	; 0x60
 8005e40:	d054      	beq.n	8005eec <TIM_SlaveTimer_SetConfig+0x100>
 8005e42:	2b60      	cmp	r3, #96	; 0x60
 8005e44:	d85c      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e46:	2b50      	cmp	r3, #80	; 0x50
 8005e48:	d046      	beq.n	8005ed8 <TIM_SlaveTimer_SetConfig+0xec>
 8005e4a:	2b50      	cmp	r3, #80	; 0x50
 8005e4c:	d858      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d019      	beq.n	8005e86 <TIM_SlaveTimer_SetConfig+0x9a>
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d854      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e56:	2b30      	cmp	r3, #48	; 0x30
 8005e58:	d055      	beq.n	8005f06 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d850      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d051      	beq.n	8005f06 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d84c      	bhi.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04d      	beq.n	8005f06 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d04b      	beq.n	8005f06 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e6e:	e047      	b.n	8005f00 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68d9      	ldr	r1, [r3, #12]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f000 f9d4 	bl	800622c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005e84:	e040      	b.n	8005f08 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d101      	bne.n	8005e92 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e03b      	b.n	8005f0a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
      break;
 8005ed6:	e017      	b.n	8005f08 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6899      	ldr	r1, [r3, #8]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f000 f871 	bl	8005fcc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005eea:	e00d      	b.n	8005f08 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f000 f8d3 	bl	80060a4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005efe:	e003      	b.n	8005f08 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
      break;
 8005f04:	e000      	b.n	8005f08 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005f06:	bf00      	nop
  }

  return status;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	; (8005fc0 <TIM_TI1_SetConfig+0xac>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00b      	beq.n	8005f5a <TIM_TI1_SetConfig+0x46>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d007      	beq.n	8005f5a <TIM_TI1_SetConfig+0x46>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <TIM_TI1_SetConfig+0xb0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_TI1_SetConfig+0x46>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <TIM_TI1_SetConfig+0xb4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <TIM_TI1_SetConfig+0x4a>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <TIM_TI1_SetConfig+0x4c>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e003      	b.n	8005f7e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f023 030a 	bic.w	r3, r3, #10
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 030a 	and.w	r3, r3, #10
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40014000 	.word	0x40014000

08005fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 030a 	bic.w	r3, r3, #10
 8006008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0210 	bic.w	r2, r3, #16
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	b29b      	uxth	r3, r3
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800607c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f023 0210 	bic.w	r2, r3, #16
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	b2db      	uxtb	r3, r3
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006154:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	031b      	lsls	r3, r3, #12
 80061d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	f043 0307 	orr.w	r3, r3, #7
 8006218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	431a      	orrs	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4313      	orrs	r3, r2
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	609a      	str	r2, [r3, #8]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2201      	movs	r2, #1
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e054      	b.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a24      	ldr	r2, [pc, #144]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006300:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006338:	d009      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a13      	ldr	r2, [pc, #76]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a11      	ldr	r2, [pc, #68]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10c      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4313      	orrs	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40000400 	.word	0x40000400
 8006390:	40014000 	.word	0x40014000

08006394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e060      	b.n	8006472 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a14      	ldr	r2, [pc, #80]	; (8006480 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d115      	bne.n	8006460 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	051b      	lsls	r3, r3, #20
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00

08006484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <__errno>:
 80064c0:	4b01      	ldr	r3, [pc, #4]	; (80064c8 <__errno+0x8>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	2000000c 	.word	0x2000000c

080064cc <__libc_init_array>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4d0d      	ldr	r5, [pc, #52]	; (8006504 <__libc_init_array+0x38>)
 80064d0:	4c0d      	ldr	r4, [pc, #52]	; (8006508 <__libc_init_array+0x3c>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	2600      	movs	r6, #0
 80064d8:	42a6      	cmp	r6, r4
 80064da:	d109      	bne.n	80064f0 <__libc_init_array+0x24>
 80064dc:	4d0b      	ldr	r5, [pc, #44]	; (800650c <__libc_init_array+0x40>)
 80064de:	4c0c      	ldr	r4, [pc, #48]	; (8006510 <__libc_init_array+0x44>)
 80064e0:	f002 fd36 	bl	8008f50 <_init>
 80064e4:	1b64      	subs	r4, r4, r5
 80064e6:	10a4      	asrs	r4, r4, #2
 80064e8:	2600      	movs	r6, #0
 80064ea:	42a6      	cmp	r6, r4
 80064ec:	d105      	bne.n	80064fa <__libc_init_array+0x2e>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f4:	4798      	blx	r3
 80064f6:	3601      	adds	r6, #1
 80064f8:	e7ee      	b.n	80064d8 <__libc_init_array+0xc>
 80064fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fe:	4798      	blx	r3
 8006500:	3601      	adds	r6, #1
 8006502:	e7f2      	b.n	80064ea <__libc_init_array+0x1e>
 8006504:	08009374 	.word	0x08009374
 8006508:	08009374 	.word	0x08009374
 800650c:	08009374 	.word	0x08009374
 8006510:	08009378 	.word	0x08009378

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <__cvt>:
 8006524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	ec55 4b10 	vmov	r4, r5, d0
 800652c:	2d00      	cmp	r5, #0
 800652e:	460e      	mov	r6, r1
 8006530:	4619      	mov	r1, r3
 8006532:	462b      	mov	r3, r5
 8006534:	bfbb      	ittet	lt
 8006536:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800653a:	461d      	movlt	r5, r3
 800653c:	2300      	movge	r3, #0
 800653e:	232d      	movlt	r3, #45	; 0x2d
 8006540:	700b      	strb	r3, [r1, #0]
 8006542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006544:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006548:	4691      	mov	r9, r2
 800654a:	f023 0820 	bic.w	r8, r3, #32
 800654e:	bfbc      	itt	lt
 8006550:	4622      	movlt	r2, r4
 8006552:	4614      	movlt	r4, r2
 8006554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006558:	d005      	beq.n	8006566 <__cvt+0x42>
 800655a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800655e:	d100      	bne.n	8006562 <__cvt+0x3e>
 8006560:	3601      	adds	r6, #1
 8006562:	2102      	movs	r1, #2
 8006564:	e000      	b.n	8006568 <__cvt+0x44>
 8006566:	2103      	movs	r1, #3
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	ab02      	add	r3, sp, #8
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	ec45 4b10 	vmov	d0, r4, r5
 8006574:	4653      	mov	r3, sl
 8006576:	4632      	mov	r2, r6
 8006578:	f000 fcca 	bl	8006f10 <_dtoa_r>
 800657c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006580:	4607      	mov	r7, r0
 8006582:	d102      	bne.n	800658a <__cvt+0x66>
 8006584:	f019 0f01 	tst.w	r9, #1
 8006588:	d022      	beq.n	80065d0 <__cvt+0xac>
 800658a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800658e:	eb07 0906 	add.w	r9, r7, r6
 8006592:	d110      	bne.n	80065b6 <__cvt+0x92>
 8006594:	783b      	ldrb	r3, [r7, #0]
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d10a      	bne.n	80065b0 <__cvt+0x8c>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a6:	b918      	cbnz	r0, 80065b0 <__cvt+0x8c>
 80065a8:	f1c6 0601 	rsb	r6, r6, #1
 80065ac:	f8ca 6000 	str.w	r6, [sl]
 80065b0:	f8da 3000 	ldr.w	r3, [sl]
 80065b4:	4499      	add	r9, r3
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c2:	b108      	cbz	r0, 80065c8 <__cvt+0xa4>
 80065c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c8:	2230      	movs	r2, #48	; 0x30
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	454b      	cmp	r3, r9
 80065ce:	d307      	bcc.n	80065e0 <__cvt+0xbc>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065d4:	1bdb      	subs	r3, r3, r7
 80065d6:	4638      	mov	r0, r7
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	b004      	add	sp, #16
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e7f0      	b.n	80065ca <__cvt+0xa6>

080065e8 <__exponent>:
 80065e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ea:	4603      	mov	r3, r0
 80065ec:	2900      	cmp	r1, #0
 80065ee:	bfb8      	it	lt
 80065f0:	4249      	neglt	r1, r1
 80065f2:	f803 2b02 	strb.w	r2, [r3], #2
 80065f6:	bfb4      	ite	lt
 80065f8:	222d      	movlt	r2, #45	; 0x2d
 80065fa:	222b      	movge	r2, #43	; 0x2b
 80065fc:	2909      	cmp	r1, #9
 80065fe:	7042      	strb	r2, [r0, #1]
 8006600:	dd2a      	ble.n	8006658 <__exponent+0x70>
 8006602:	f10d 0407 	add.w	r4, sp, #7
 8006606:	46a4      	mov	ip, r4
 8006608:	270a      	movs	r7, #10
 800660a:	46a6      	mov	lr, r4
 800660c:	460a      	mov	r2, r1
 800660e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006612:	fb07 1516 	mls	r5, r7, r6, r1
 8006616:	3530      	adds	r5, #48	; 0x30
 8006618:	2a63      	cmp	r2, #99	; 0x63
 800661a:	f104 34ff 	add.w	r4, r4, #4294967295
 800661e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006622:	4631      	mov	r1, r6
 8006624:	dcf1      	bgt.n	800660a <__exponent+0x22>
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	f1ae 0502 	sub.w	r5, lr, #2
 800662c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006630:	1c44      	adds	r4, r0, #1
 8006632:	4629      	mov	r1, r5
 8006634:	4561      	cmp	r1, ip
 8006636:	d30a      	bcc.n	800664e <__exponent+0x66>
 8006638:	f10d 0209 	add.w	r2, sp, #9
 800663c:	eba2 020e 	sub.w	r2, r2, lr
 8006640:	4565      	cmp	r5, ip
 8006642:	bf88      	it	hi
 8006644:	2200      	movhi	r2, #0
 8006646:	4413      	add	r3, r2
 8006648:	1a18      	subs	r0, r3, r0
 800664a:	b003      	add	sp, #12
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006652:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006656:	e7ed      	b.n	8006634 <__exponent+0x4c>
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	3130      	adds	r1, #48	; 0x30
 800665c:	7083      	strb	r3, [r0, #2]
 800665e:	70c1      	strb	r1, [r0, #3]
 8006660:	1d03      	adds	r3, r0, #4
 8006662:	e7f1      	b.n	8006648 <__exponent+0x60>

08006664 <_printf_float>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	ed2d 8b02 	vpush	{d8}
 800666c:	b08d      	sub	sp, #52	; 0x34
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006674:	4616      	mov	r6, r2
 8006676:	461f      	mov	r7, r3
 8006678:	4605      	mov	r5, r0
 800667a:	f001 fa37 	bl	8007aec <_localeconv_r>
 800667e:	f8d0 a000 	ldr.w	sl, [r0]
 8006682:	4650      	mov	r0, sl
 8006684:	f7f9 fda4 	bl	80001d0 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	930a      	str	r3, [sp, #40]	; 0x28
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	f8d8 3000 	ldr.w	r3, [r8]
 8006694:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	f8c8 2000 	str.w	r2, [r8]
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80066bc:	ee08 0a10 	vmov	s16, r0
 80066c0:	4b9f      	ldr	r3, [pc, #636]	; (8006940 <_printf_float+0x2dc>)
 80066c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	f7fa fa2f 	bl	8000b2c <__aeabi_dcmpun>
 80066ce:	bb88      	cbnz	r0, 8006734 <_printf_float+0xd0>
 80066d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d4:	4b9a      	ldr	r3, [pc, #616]	; (8006940 <_printf_float+0x2dc>)
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	f7fa fa09 	bl	8000af0 <__aeabi_dcmple>
 80066de:	bb48      	cbnz	r0, 8006734 <_printf_float+0xd0>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	4640      	mov	r0, r8
 80066e6:	4649      	mov	r1, r9
 80066e8:	f7fa f9f8 	bl	8000adc <__aeabi_dcmplt>
 80066ec:	b110      	cbz	r0, 80066f4 <_printf_float+0x90>
 80066ee:	232d      	movs	r3, #45	; 0x2d
 80066f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f4:	4b93      	ldr	r3, [pc, #588]	; (8006944 <_printf_float+0x2e0>)
 80066f6:	4894      	ldr	r0, [pc, #592]	; (8006948 <_printf_float+0x2e4>)
 80066f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066fc:	bf94      	ite	ls
 80066fe:	4698      	movls	r8, r3
 8006700:	4680      	movhi	r8, r0
 8006702:	2303      	movs	r3, #3
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	9b05      	ldr	r3, [sp, #20]
 8006708:	f023 0204 	bic.w	r2, r3, #4
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	f04f 0900 	mov.w	r9, #0
 8006712:	9700      	str	r7, [sp, #0]
 8006714:	4633      	mov	r3, r6
 8006716:	aa0b      	add	r2, sp, #44	; 0x2c
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f9d8 	bl	8006ad0 <_printf_common>
 8006720:	3001      	adds	r0, #1
 8006722:	f040 8090 	bne.w	8006846 <_printf_float+0x1e2>
 8006726:	f04f 30ff 	mov.w	r0, #4294967295
 800672a:	b00d      	add	sp, #52	; 0x34
 800672c:	ecbd 8b02 	vpop	{d8}
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	f7fa f9f6 	bl	8000b2c <__aeabi_dcmpun>
 8006740:	b140      	cbz	r0, 8006754 <_printf_float+0xf0>
 8006742:	464b      	mov	r3, r9
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbc      	itt	lt
 8006748:	232d      	movlt	r3, #45	; 0x2d
 800674a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674e:	487f      	ldr	r0, [pc, #508]	; (800694c <_printf_float+0x2e8>)
 8006750:	4b7f      	ldr	r3, [pc, #508]	; (8006950 <_printf_float+0x2ec>)
 8006752:	e7d1      	b.n	80066f8 <_printf_float+0x94>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800675a:	9206      	str	r2, [sp, #24]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	d13f      	bne.n	80067e0 <_printf_float+0x17c>
 8006760:	2306      	movs	r3, #6
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	9b05      	ldr	r3, [sp, #20]
 8006766:	6861      	ldr	r1, [r4, #4]
 8006768:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800676c:	2300      	movs	r3, #0
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	ab0a      	add	r3, sp, #40	; 0x28
 8006772:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006776:	ab09      	add	r3, sp, #36	; 0x24
 8006778:	ec49 8b10 	vmov	d0, r8, r9
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006784:	4628      	mov	r0, r5
 8006786:	f7ff fecd 	bl	8006524 <__cvt>
 800678a:	9b06      	ldr	r3, [sp, #24]
 800678c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678e:	2b47      	cmp	r3, #71	; 0x47
 8006790:	4680      	mov	r8, r0
 8006792:	d108      	bne.n	80067a6 <_printf_float+0x142>
 8006794:	1cc8      	adds	r0, r1, #3
 8006796:	db02      	blt.n	800679e <_printf_float+0x13a>
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	4299      	cmp	r1, r3
 800679c:	dd41      	ble.n	8006822 <_printf_float+0x1be>
 800679e:	f1ab 0b02 	sub.w	fp, fp, #2
 80067a2:	fa5f fb8b 	uxtb.w	fp, fp
 80067a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067aa:	d820      	bhi.n	80067ee <_printf_float+0x18a>
 80067ac:	3901      	subs	r1, #1
 80067ae:	465a      	mov	r2, fp
 80067b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b4:	9109      	str	r1, [sp, #36]	; 0x24
 80067b6:	f7ff ff17 	bl	80065e8 <__exponent>
 80067ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067bc:	1813      	adds	r3, r2, r0
 80067be:	2a01      	cmp	r2, #1
 80067c0:	4681      	mov	r9, r0
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	dc02      	bgt.n	80067cc <_printf_float+0x168>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	07d2      	lsls	r2, r2, #31
 80067ca:	d501      	bpl.n	80067d0 <_printf_float+0x16c>
 80067cc:	3301      	adds	r3, #1
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d09c      	beq.n	8006712 <_printf_float+0xae>
 80067d8:	232d      	movs	r3, #45	; 0x2d
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067de:	e798      	b.n	8006712 <_printf_float+0xae>
 80067e0:	9a06      	ldr	r2, [sp, #24]
 80067e2:	2a47      	cmp	r2, #71	; 0x47
 80067e4:	d1be      	bne.n	8006764 <_printf_float+0x100>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1bc      	bne.n	8006764 <_printf_float+0x100>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e7b9      	b.n	8006762 <_printf_float+0xfe>
 80067ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067f2:	d118      	bne.n	8006826 <_printf_float+0x1c2>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	dd0b      	ble.n	8006812 <_printf_float+0x1ae>
 80067fa:	6121      	str	r1, [r4, #16]
 80067fc:	b913      	cbnz	r3, 8006804 <_printf_float+0x1a0>
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	07d0      	lsls	r0, r2, #31
 8006802:	d502      	bpl.n	800680a <_printf_float+0x1a6>
 8006804:	3301      	adds	r3, #1
 8006806:	440b      	add	r3, r1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	65a1      	str	r1, [r4, #88]	; 0x58
 800680c:	f04f 0900 	mov.w	r9, #0
 8006810:	e7de      	b.n	80067d0 <_printf_float+0x16c>
 8006812:	b913      	cbnz	r3, 800681a <_printf_float+0x1b6>
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	07d2      	lsls	r2, r2, #31
 8006818:	d501      	bpl.n	800681e <_printf_float+0x1ba>
 800681a:	3302      	adds	r3, #2
 800681c:	e7f4      	b.n	8006808 <_printf_float+0x1a4>
 800681e:	2301      	movs	r3, #1
 8006820:	e7f2      	b.n	8006808 <_printf_float+0x1a4>
 8006822:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	4299      	cmp	r1, r3
 800682a:	db05      	blt.n	8006838 <_printf_float+0x1d4>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	6121      	str	r1, [r4, #16]
 8006830:	07d8      	lsls	r0, r3, #31
 8006832:	d5ea      	bpl.n	800680a <_printf_float+0x1a6>
 8006834:	1c4b      	adds	r3, r1, #1
 8006836:	e7e7      	b.n	8006808 <_printf_float+0x1a4>
 8006838:	2900      	cmp	r1, #0
 800683a:	bfd4      	ite	le
 800683c:	f1c1 0202 	rsble	r2, r1, #2
 8006840:	2201      	movgt	r2, #1
 8006842:	4413      	add	r3, r2
 8006844:	e7e0      	b.n	8006808 <_printf_float+0x1a4>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	055a      	lsls	r2, r3, #21
 800684a:	d407      	bmi.n	800685c <_printf_float+0x1f8>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	4642      	mov	r2, r8
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	d12c      	bne.n	80068b4 <_printf_float+0x250>
 800685a:	e764      	b.n	8006726 <_printf_float+0xc2>
 800685c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006860:	f240 80e0 	bls.w	8006a24 <_printf_float+0x3c0>
 8006864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	f7fa f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006870:	2800      	cmp	r0, #0
 8006872:	d034      	beq.n	80068de <_printf_float+0x27a>
 8006874:	4a37      	ldr	r2, [pc, #220]	; (8006954 <_printf_float+0x2f0>)
 8006876:	2301      	movs	r3, #1
 8006878:	4631      	mov	r1, r6
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	f43f af51 	beq.w	8006726 <_printf_float+0xc2>
 8006884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006888:	429a      	cmp	r2, r3
 800688a:	db02      	blt.n	8006892 <_printf_float+0x22e>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07d8      	lsls	r0, r3, #31
 8006890:	d510      	bpl.n	80068b4 <_printf_float+0x250>
 8006892:	ee18 3a10 	vmov	r3, s16
 8006896:	4652      	mov	r2, sl
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af41 	beq.w	8006726 <_printf_float+0xc2>
 80068a4:	f04f 0800 	mov.w	r8, #0
 80068a8:	f104 091a 	add.w	r9, r4, #26
 80068ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ae:	3b01      	subs	r3, #1
 80068b0:	4543      	cmp	r3, r8
 80068b2:	dc09      	bgt.n	80068c8 <_printf_float+0x264>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	f100 8105 	bmi.w	8006ac6 <_printf_float+0x462>
 80068bc:	68e0      	ldr	r0, [r4, #12]
 80068be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c0:	4298      	cmp	r0, r3
 80068c2:	bfb8      	it	lt
 80068c4:	4618      	movlt	r0, r3
 80068c6:	e730      	b.n	800672a <_printf_float+0xc6>
 80068c8:	2301      	movs	r3, #1
 80068ca:	464a      	mov	r2, r9
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af27 	beq.w	8006726 <_printf_float+0xc2>
 80068d8:	f108 0801 	add.w	r8, r8, #1
 80068dc:	e7e6      	b.n	80068ac <_printf_float+0x248>
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc39      	bgt.n	8006958 <_printf_float+0x2f4>
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <_printf_float+0x2f0>)
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af19 	beq.w	8006726 <_printf_float+0xc2>
 80068f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d102      	bne.n	8006902 <_printf_float+0x29e>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	07d9      	lsls	r1, r3, #31
 8006900:	d5d8      	bpl.n	80068b4 <_printf_float+0x250>
 8006902:	ee18 3a10 	vmov	r3, s16
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af09 	beq.w	8006726 <_printf_float+0xc2>
 8006914:	f04f 0900 	mov.w	r9, #0
 8006918:	f104 0a1a 	add.w	sl, r4, #26
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	425b      	negs	r3, r3
 8006920:	454b      	cmp	r3, r9
 8006922:	dc01      	bgt.n	8006928 <_printf_float+0x2c4>
 8006924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006926:	e792      	b.n	800684e <_printf_float+0x1ea>
 8006928:	2301      	movs	r3, #1
 800692a:	4652      	mov	r2, sl
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f aef7 	beq.w	8006726 <_printf_float+0xc2>
 8006938:	f109 0901 	add.w	r9, r9, #1
 800693c:	e7ee      	b.n	800691c <_printf_float+0x2b8>
 800693e:	bf00      	nop
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	08008f9c 	.word	0x08008f9c
 8006948:	08008fa0 	.word	0x08008fa0
 800694c:	08008fa8 	.word	0x08008fa8
 8006950:	08008fa4 	.word	0x08008fa4
 8006954:	08008fac 	.word	0x08008fac
 8006958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695c:	429a      	cmp	r2, r3
 800695e:	bfa8      	it	ge
 8006960:	461a      	movge	r2, r3
 8006962:	2a00      	cmp	r2, #0
 8006964:	4691      	mov	r9, r2
 8006966:	dc37      	bgt.n	80069d8 <_printf_float+0x374>
 8006968:	f04f 0b00 	mov.w	fp, #0
 800696c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006970:	f104 021a 	add.w	r2, r4, #26
 8006974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	eba3 0309 	sub.w	r3, r3, r9
 800697c:	455b      	cmp	r3, fp
 800697e:	dc33      	bgt.n	80069e8 <_printf_float+0x384>
 8006980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006984:	429a      	cmp	r2, r3
 8006986:	db3b      	blt.n	8006a00 <_printf_float+0x39c>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d438      	bmi.n	8006a00 <_printf_float+0x39c>
 800698e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006990:	9a05      	ldr	r2, [sp, #20]
 8006992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006994:	1a9a      	subs	r2, r3, r2
 8006996:	eba3 0901 	sub.w	r9, r3, r1
 800699a:	4591      	cmp	r9, r2
 800699c:	bfa8      	it	ge
 800699e:	4691      	movge	r9, r2
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	dc35      	bgt.n	8006a12 <_printf_float+0x3ae>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ae:	f104 0a1a 	add.w	sl, r4, #26
 80069b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	eba3 0309 	sub.w	r3, r3, r9
 80069bc:	4543      	cmp	r3, r8
 80069be:	f77f af79 	ble.w	80068b4 <_printf_float+0x250>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f aeaa 	beq.w	8006726 <_printf_float+0xc2>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	e7ec      	b.n	80069b2 <_printf_float+0x34e>
 80069d8:	4613      	mov	r3, r2
 80069da:	4631      	mov	r1, r6
 80069dc:	4642      	mov	r2, r8
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	d1c0      	bne.n	8006968 <_printf_float+0x304>
 80069e6:	e69e      	b.n	8006726 <_printf_float+0xc2>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	9205      	str	r2, [sp, #20]
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f ae97 	beq.w	8006726 <_printf_float+0xc2>
 80069f8:	9a05      	ldr	r2, [sp, #20]
 80069fa:	f10b 0b01 	add.w	fp, fp, #1
 80069fe:	e7b9      	b.n	8006974 <_printf_float+0x310>
 8006a00:	ee18 3a10 	vmov	r3, s16
 8006a04:	4652      	mov	r2, sl
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d1be      	bne.n	800698e <_printf_float+0x32a>
 8006a10:	e689      	b.n	8006726 <_printf_float+0xc2>
 8006a12:	9a05      	ldr	r2, [sp, #20]
 8006a14:	464b      	mov	r3, r9
 8006a16:	4442      	add	r2, r8
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1c1      	bne.n	80069a6 <_printf_float+0x342>
 8006a22:	e680      	b.n	8006726 <_printf_float+0xc2>
 8006a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	dc01      	bgt.n	8006a2e <_printf_float+0x3ca>
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d538      	bpl.n	8006aa0 <_printf_float+0x43c>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4642      	mov	r2, r8
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae74 	beq.w	8006726 <_printf_float+0xc2>
 8006a3e:	ee18 3a10 	vmov	r3, s16
 8006a42:	4652      	mov	r2, sl
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f ae6b 	beq.w	8006726 <_printf_float+0xc2>
 8006a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	f7fa f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a5c:	b9d8      	cbnz	r0, 8006a96 <_printf_float+0x432>
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	f108 0201 	add.w	r2, r8, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d10e      	bne.n	8006a8e <_printf_float+0x42a>
 8006a70:	e659      	b.n	8006726 <_printf_float+0xc2>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae52 	beq.w	8006726 <_printf_float+0xc2>
 8006a82:	f108 0801 	add.w	r8, r8, #1
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	dcf1      	bgt.n	8006a72 <_printf_float+0x40e>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a94:	e6dc      	b.n	8006850 <_printf_float+0x1ec>
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	f104 0a1a 	add.w	sl, r4, #26
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x422>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	e7df      	b.n	8006a66 <_printf_float+0x402>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae38 	beq.w	8006726 <_printf_float+0xc2>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006abe:	1a5b      	subs	r3, r3, r1
 8006ac0:	4543      	cmp	r3, r8
 8006ac2:	dcf0      	bgt.n	8006aa6 <_printf_float+0x442>
 8006ac4:	e6fa      	b.n	80068bc <_printf_float+0x258>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	f104 0919 	add.w	r9, r4, #25
 8006ace:	e7f4      	b.n	8006aba <_printf_float+0x456>

08006ad0 <_printf_common>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	688a      	ldr	r2, [r1, #8]
 8006ada:	690b      	ldr	r3, [r1, #16]
 8006adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfb8      	it	lt
 8006ae4:	4613      	movlt	r3, r2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aec:	4607      	mov	r7, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b10a      	cbz	r2, 8006af6 <_printf_common+0x26>
 8006af2:	3301      	adds	r3, #1
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	0699      	lsls	r1, r3, #26
 8006afa:	bf42      	ittt	mi
 8006afc:	6833      	ldrmi	r3, [r6, #0]
 8006afe:	3302      	addmi	r3, #2
 8006b00:	6033      	strmi	r3, [r6, #0]
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	f015 0506 	ands.w	r5, r5, #6
 8006b08:	d106      	bne.n	8006b18 <_printf_common+0x48>
 8006b0a:	f104 0a19 	add.w	sl, r4, #25
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	6832      	ldr	r2, [r6, #0]
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dc26      	bgt.n	8006b66 <_printf_common+0x96>
 8006b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b1c:	1e13      	subs	r3, r2, #0
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	0692      	lsls	r2, r2, #26
 8006b26:	d42b      	bmi.n	8006b80 <_printf_common+0xb0>
 8006b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d01e      	beq.n	8006b74 <_printf_common+0xa4>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	68e5      	ldr	r5, [r4, #12]
 8006b3a:	6832      	ldr	r2, [r6, #0]
 8006b3c:	f003 0306 	and.w	r3, r3, #6
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	bf08      	it	eq
 8006b44:	1aad      	subeq	r5, r5, r2
 8006b46:	68a3      	ldr	r3, [r4, #8]
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	bf0c      	ite	eq
 8006b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b50:	2500      	movne	r5, #0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfc4      	itt	gt
 8006b56:	1a9b      	subgt	r3, r3, r2
 8006b58:	18ed      	addgt	r5, r5, r3
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	341a      	adds	r4, #26
 8006b5e:	42b5      	cmp	r5, r6
 8006b60:	d11a      	bne.n	8006b98 <_printf_common+0xc8>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e008      	b.n	8006b78 <_printf_common+0xa8>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	47c0      	blx	r8
 8006b70:	3001      	adds	r0, #1
 8006b72:	d103      	bne.n	8006b7c <_printf_common+0xac>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e7c6      	b.n	8006b0e <_printf_common+0x3e>
 8006b80:	18e1      	adds	r1, r4, r3
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	2030      	movs	r0, #48	; 0x30
 8006b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b8a:	4422      	add	r2, r4
 8006b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b94:	3302      	adds	r3, #2
 8006b96:	e7c7      	b.n	8006b28 <_printf_common+0x58>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	47c0      	blx	r8
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d0e6      	beq.n	8006b74 <_printf_common+0xa4>
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7d9      	b.n	8006b5e <_printf_common+0x8e>
	...

08006bac <_printf_i>:
 8006bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	7e0f      	ldrb	r7, [r1, #24]
 8006bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	4680      	mov	r8, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bc2:	d807      	bhi.n	8006bd4 <_printf_i+0x28>
 8006bc4:	2f62      	cmp	r7, #98	; 0x62
 8006bc6:	d80a      	bhi.n	8006bde <_printf_i+0x32>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f000 80d8 	beq.w	8006d7e <_printf_i+0x1d2>
 8006bce:	2f58      	cmp	r7, #88	; 0x58
 8006bd0:	f000 80a3 	beq.w	8006d1a <_printf_i+0x16e>
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bdc:	e03a      	b.n	8006c54 <_printf_i+0xa8>
 8006bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006be2:	2b15      	cmp	r3, #21
 8006be4:	d8f6      	bhi.n	8006bd4 <_printf_i+0x28>
 8006be6:	a101      	add	r1, pc, #4	; (adr r1, 8006bec <_printf_i+0x40>)
 8006be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c59 	.word	0x08006c59
 8006bf4:	08006bd5 	.word	0x08006bd5
 8006bf8:	08006bd5 	.word	0x08006bd5
 8006bfc:	08006bd5 	.word	0x08006bd5
 8006c00:	08006bd5 	.word	0x08006bd5
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006bd5 	.word	0x08006bd5
 8006c0c:	08006bd5 	.word	0x08006bd5
 8006c10:	08006bd5 	.word	0x08006bd5
 8006c14:	08006bd5 	.word	0x08006bd5
 8006c18:	08006d65 	.word	0x08006d65
 8006c1c:	08006c89 	.word	0x08006c89
 8006c20:	08006d47 	.word	0x08006d47
 8006c24:	08006bd5 	.word	0x08006bd5
 8006c28:	08006bd5 	.word	0x08006bd5
 8006c2c:	08006d87 	.word	0x08006d87
 8006c30:	08006bd5 	.word	0x08006bd5
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006bd5 	.word	0x08006bd5
 8006c3c:	08006bd5 	.word	0x08006bd5
 8006c40:	08006d4f 	.word	0x08006d4f
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0a3      	b.n	8006da0 <_printf_i+0x1f4>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	6829      	ldr	r1, [r5, #0]
 8006c5c:	0606      	lsls	r6, r0, #24
 8006c5e:	f101 0304 	add.w	r3, r1, #4
 8006c62:	d50a      	bpl.n	8006c7a <_printf_i+0xce>
 8006c64:	680e      	ldr	r6, [r1, #0]
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	da03      	bge.n	8006c74 <_printf_i+0xc8>
 8006c6c:	232d      	movs	r3, #45	; 0x2d
 8006c6e:	4276      	negs	r6, r6
 8006c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c74:	485e      	ldr	r0, [pc, #376]	; (8006df0 <_printf_i+0x244>)
 8006c76:	230a      	movs	r3, #10
 8006c78:	e019      	b.n	8006cae <_printf_i+0x102>
 8006c7a:	680e      	ldr	r6, [r1, #0]
 8006c7c:	602b      	str	r3, [r5, #0]
 8006c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c82:	bf18      	it	ne
 8006c84:	b236      	sxthne	r6, r6
 8006c86:	e7ef      	b.n	8006c68 <_printf_i+0xbc>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	1d19      	adds	r1, r3, #4
 8006c8e:	6029      	str	r1, [r5, #0]
 8006c90:	0601      	lsls	r1, r0, #24
 8006c92:	d501      	bpl.n	8006c98 <_printf_i+0xec>
 8006c94:	681e      	ldr	r6, [r3, #0]
 8006c96:	e002      	b.n	8006c9e <_printf_i+0xf2>
 8006c98:	0646      	lsls	r6, r0, #25
 8006c9a:	d5fb      	bpl.n	8006c94 <_printf_i+0xe8>
 8006c9c:	881e      	ldrh	r6, [r3, #0]
 8006c9e:	4854      	ldr	r0, [pc, #336]	; (8006df0 <_printf_i+0x244>)
 8006ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ca2:	bf0c      	ite	eq
 8006ca4:	2308      	moveq	r3, #8
 8006ca6:	230a      	movne	r3, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cae:	6865      	ldr	r5, [r4, #4]
 8006cb0:	60a5      	str	r5, [r4, #8]
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	bfa2      	ittt	ge
 8006cb6:	6821      	ldrge	r1, [r4, #0]
 8006cb8:	f021 0104 	bicge.w	r1, r1, #4
 8006cbc:	6021      	strge	r1, [r4, #0]
 8006cbe:	b90e      	cbnz	r6, 8006cc4 <_printf_i+0x118>
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	d04d      	beq.n	8006d60 <_printf_i+0x1b4>
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cca:	fb03 6711 	mls	r7, r3, r1, r6
 8006cce:	5dc7      	ldrb	r7, [r0, r7]
 8006cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cd4:	4637      	mov	r7, r6
 8006cd6:	42bb      	cmp	r3, r7
 8006cd8:	460e      	mov	r6, r1
 8006cda:	d9f4      	bls.n	8006cc6 <_printf_i+0x11a>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d10b      	bne.n	8006cf8 <_printf_i+0x14c>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	07de      	lsls	r6, r3, #31
 8006ce4:	d508      	bpl.n	8006cf8 <_printf_i+0x14c>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	6861      	ldr	r1, [r4, #4]
 8006cea:	4299      	cmp	r1, r3
 8006cec:	bfde      	ittt	le
 8006cee:	2330      	movle	r3, #48	; 0x30
 8006cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf8:	1b52      	subs	r2, r2, r5
 8006cfa:	6122      	str	r2, [r4, #16]
 8006cfc:	f8cd a000 	str.w	sl, [sp]
 8006d00:	464b      	mov	r3, r9
 8006d02:	aa03      	add	r2, sp, #12
 8006d04:	4621      	mov	r1, r4
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff fee2 	bl	8006ad0 <_printf_common>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d14c      	bne.n	8006daa <_printf_i+0x1fe>
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	b004      	add	sp, #16
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	4835      	ldr	r0, [pc, #212]	; (8006df0 <_printf_i+0x244>)
 8006d1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d20:	6829      	ldr	r1, [r5, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d28:	6029      	str	r1, [r5, #0]
 8006d2a:	061d      	lsls	r5, r3, #24
 8006d2c:	d514      	bpl.n	8006d58 <_printf_i+0x1ac>
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	bf44      	itt	mi
 8006d32:	f043 0320 	orrmi.w	r3, r3, #32
 8006d36:	6023      	strmi	r3, [r4, #0]
 8006d38:	b91e      	cbnz	r6, 8006d42 <_printf_i+0x196>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	f023 0320 	bic.w	r3, r3, #32
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	2310      	movs	r3, #16
 8006d44:	e7b0      	b.n	8006ca8 <_printf_i+0xfc>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f043 0320 	orr.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	2378      	movs	r3, #120	; 0x78
 8006d50:	4828      	ldr	r0, [pc, #160]	; (8006df4 <_printf_i+0x248>)
 8006d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d56:	e7e3      	b.n	8006d20 <_printf_i+0x174>
 8006d58:	0659      	lsls	r1, r3, #25
 8006d5a:	bf48      	it	mi
 8006d5c:	b2b6      	uxthmi	r6, r6
 8006d5e:	e7e6      	b.n	8006d2e <_printf_i+0x182>
 8006d60:	4615      	mov	r5, r2
 8006d62:	e7bb      	b.n	8006cdc <_printf_i+0x130>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	6826      	ldr	r6, [r4, #0]
 8006d68:	6961      	ldr	r1, [r4, #20]
 8006d6a:	1d18      	adds	r0, r3, #4
 8006d6c:	6028      	str	r0, [r5, #0]
 8006d6e:	0635      	lsls	r5, r6, #24
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	d501      	bpl.n	8006d78 <_printf_i+0x1cc>
 8006d74:	6019      	str	r1, [r3, #0]
 8006d76:	e002      	b.n	8006d7e <_printf_i+0x1d2>
 8006d78:	0670      	lsls	r0, r6, #25
 8006d7a:	d5fb      	bpl.n	8006d74 <_printf_i+0x1c8>
 8006d7c:	8019      	strh	r1, [r3, #0]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	4615      	mov	r5, r2
 8006d84:	e7ba      	b.n	8006cfc <_printf_i+0x150>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	602a      	str	r2, [r5, #0]
 8006d8c:	681d      	ldr	r5, [r3, #0]
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	2100      	movs	r1, #0
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7f9 fa24 	bl	80001e0 <memchr>
 8006d98:	b108      	cbz	r0, 8006d9e <_printf_i+0x1f2>
 8006d9a:	1b40      	subs	r0, r0, r5
 8006d9c:	6060      	str	r0, [r4, #4]
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	2300      	movs	r3, #0
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	e7a8      	b.n	8006cfc <_printf_i+0x150>
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	47d0      	blx	sl
 8006db4:	3001      	adds	r0, #1
 8006db6:	d0ab      	beq.n	8006d10 <_printf_i+0x164>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	079b      	lsls	r3, r3, #30
 8006dbc:	d413      	bmi.n	8006de6 <_printf_i+0x23a>
 8006dbe:	68e0      	ldr	r0, [r4, #12]
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	4298      	cmp	r0, r3
 8006dc4:	bfb8      	it	lt
 8006dc6:	4618      	movlt	r0, r3
 8006dc8:	e7a4      	b.n	8006d14 <_printf_i+0x168>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4632      	mov	r2, r6
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	47d0      	blx	sl
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d09b      	beq.n	8006d10 <_printf_i+0x164>
 8006dd8:	3501      	adds	r5, #1
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	9903      	ldr	r1, [sp, #12]
 8006dde:	1a5b      	subs	r3, r3, r1
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dcf2      	bgt.n	8006dca <_printf_i+0x21e>
 8006de4:	e7eb      	b.n	8006dbe <_printf_i+0x212>
 8006de6:	2500      	movs	r5, #0
 8006de8:	f104 0619 	add.w	r6, r4, #25
 8006dec:	e7f5      	b.n	8006dda <_printf_i+0x22e>
 8006dee:	bf00      	nop
 8006df0:	08008fae 	.word	0x08008fae
 8006df4:	08008fbf 	.word	0x08008fbf

08006df8 <quorem>:
 8006df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	6903      	ldr	r3, [r0, #16]
 8006dfe:	690c      	ldr	r4, [r1, #16]
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	4607      	mov	r7, r0
 8006e04:	f2c0 8081 	blt.w	8006f0a <quorem+0x112>
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	f101 0814 	add.w	r8, r1, #20
 8006e0e:	f100 0514 	add.w	r5, r0, #20
 8006e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e20:	3301      	adds	r3, #1
 8006e22:	429a      	cmp	r2, r3
 8006e24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e30:	d331      	bcc.n	8006e96 <quorem+0x9e>
 8006e32:	f04f 0e00 	mov.w	lr, #0
 8006e36:	4640      	mov	r0, r8
 8006e38:	46ac      	mov	ip, r5
 8006e3a:	46f2      	mov	sl, lr
 8006e3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e40:	b293      	uxth	r3, r2
 8006e42:	fb06 e303 	mla	r3, r6, r3, lr
 8006e46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e50:	f8dc a000 	ldr.w	sl, [ip]
 8006e54:	0c12      	lsrs	r2, r2, #16
 8006e56:	fa13 f38a 	uxtah	r3, r3, sl
 8006e5a:	fb06 e202 	mla	r2, r6, r2, lr
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	9b00      	ldr	r3, [sp, #0]
 8006e62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e66:	b292      	uxth	r2, r2
 8006e68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e70:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e74:	4581      	cmp	r9, r0
 8006e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e82:	d2db      	bcs.n	8006e3c <quorem+0x44>
 8006e84:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e88:	b92b      	cbnz	r3, 8006e96 <quorem+0x9e>
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	3b04      	subs	r3, #4
 8006e8e:	429d      	cmp	r5, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	d32e      	bcc.n	8006ef2 <quorem+0xfa>
 8006e94:	613c      	str	r4, [r7, #16]
 8006e96:	4638      	mov	r0, r7
 8006e98:	f001 f8c4 	bl	8008024 <__mcmp>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	db24      	blt.n	8006eea <quorem+0xf2>
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f04f 0c00 	mov.w	ip, #0
 8006ea8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eac:	f8d0 e000 	ldr.w	lr, [r0]
 8006eb0:	b293      	uxth	r3, r2
 8006eb2:	ebac 0303 	sub.w	r3, ip, r3
 8006eb6:	0c12      	lsrs	r2, r2, #16
 8006eb8:	fa13 f38e 	uxtah	r3, r3, lr
 8006ebc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eca:	45c1      	cmp	r9, r8
 8006ecc:	f840 3b04 	str.w	r3, [r0], #4
 8006ed0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ed4:	d2e8      	bcs.n	8006ea8 <quorem+0xb0>
 8006ed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ede:	b922      	cbnz	r2, 8006eea <quorem+0xf2>
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	d30a      	bcc.n	8006efe <quorem+0x106>
 8006ee8:	613c      	str	r4, [r7, #16]
 8006eea:	4630      	mov	r0, r6
 8006eec:	b003      	add	sp, #12
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	d1cc      	bne.n	8006e94 <quorem+0x9c>
 8006efa:	3c01      	subs	r4, #1
 8006efc:	e7c7      	b.n	8006e8e <quorem+0x96>
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	3b04      	subs	r3, #4
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d1f0      	bne.n	8006ee8 <quorem+0xf0>
 8006f06:	3c01      	subs	r4, #1
 8006f08:	e7eb      	b.n	8006ee2 <quorem+0xea>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e7ee      	b.n	8006eec <quorem+0xf4>
	...

08006f10 <_dtoa_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ed2d 8b04 	vpush	{d8-d9}
 8006f18:	ec57 6b10 	vmov	r6, r7, d0
 8006f1c:	b093      	sub	sp, #76	; 0x4c
 8006f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f24:	9106      	str	r1, [sp, #24]
 8006f26:	ee10 aa10 	vmov	sl, s0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f30:	46bb      	mov	fp, r7
 8006f32:	b975      	cbnz	r5, 8006f52 <_dtoa_r+0x42>
 8006f34:	2010      	movs	r0, #16
 8006f36:	f000 fddd 	bl	8007af4 <malloc>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f3e:	b920      	cbnz	r0, 8006f4a <_dtoa_r+0x3a>
 8006f40:	4ba7      	ldr	r3, [pc, #668]	; (80071e0 <_dtoa_r+0x2d0>)
 8006f42:	21ea      	movs	r1, #234	; 0xea
 8006f44:	48a7      	ldr	r0, [pc, #668]	; (80071e4 <_dtoa_r+0x2d4>)
 8006f46:	f001 fa75 	bl	8008434 <__assert_func>
 8006f4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	60c5      	str	r5, [r0, #12]
 8006f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	b151      	cbz	r1, 8006f6e <_dtoa_r+0x5e>
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	604a      	str	r2, [r1, #4]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4093      	lsls	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fe1c 	bl	8007ba0 <_Bfree>
 8006f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	1e3b      	subs	r3, r7, #0
 8006f70:	bfaa      	itet	ge
 8006f72:	2300      	movge	r3, #0
 8006f74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f78:	f8c8 3000 	strge.w	r3, [r8]
 8006f7c:	4b9a      	ldr	r3, [pc, #616]	; (80071e8 <_dtoa_r+0x2d8>)
 8006f7e:	bfbc      	itt	lt
 8006f80:	2201      	movlt	r2, #1
 8006f82:	f8c8 2000 	strlt.w	r2, [r8]
 8006f86:	ea33 030b 	bics.w	r3, r3, fp
 8006f8a:	d11b      	bne.n	8006fc4 <_dtoa_r+0xb4>
 8006f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f98:	4333      	orrs	r3, r6
 8006f9a:	f000 8592 	beq.w	8007ac2 <_dtoa_r+0xbb2>
 8006f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa0:	b963      	cbnz	r3, 8006fbc <_dtoa_r+0xac>
 8006fa2:	4b92      	ldr	r3, [pc, #584]	; (80071ec <_dtoa_r+0x2dc>)
 8006fa4:	e022      	b.n	8006fec <_dtoa_r+0xdc>
 8006fa6:	4b92      	ldr	r3, [pc, #584]	; (80071f0 <_dtoa_r+0x2e0>)
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	3308      	adds	r3, #8
 8006fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	9801      	ldr	r0, [sp, #4]
 8006fb2:	b013      	add	sp, #76	; 0x4c
 8006fb4:	ecbd 8b04 	vpop	{d8-d9}
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	4b8b      	ldr	r3, [pc, #556]	; (80071ec <_dtoa_r+0x2dc>)
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	3303      	adds	r3, #3
 8006fc2:	e7f3      	b.n	8006fac <_dtoa_r+0x9c>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4650      	mov	r0, sl
 8006fca:	4659      	mov	r1, fp
 8006fcc:	f7f9 fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd0:	ec4b ab19 	vmov	d9, sl, fp
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	b158      	cbz	r0, 8006ff0 <_dtoa_r+0xe0>
 8006fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 856b 	beq.w	8007abc <_dtoa_r+0xbac>
 8006fe6:	4883      	ldr	r0, [pc, #524]	; (80071f4 <_dtoa_r+0x2e4>)
 8006fe8:	6018      	str	r0, [r3, #0]
 8006fea:	1e43      	subs	r3, r0, #1
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	e7df      	b.n	8006fb0 <_dtoa_r+0xa0>
 8006ff0:	ec4b ab10 	vmov	d0, sl, fp
 8006ff4:	aa10      	add	r2, sp, #64	; 0x40
 8006ff6:	a911      	add	r1, sp, #68	; 0x44
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 f8b9 	bl	8008170 <__d2b>
 8006ffe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007002:	ee08 0a10 	vmov	s16, r0
 8007006:	2d00      	cmp	r5, #0
 8007008:	f000 8084 	beq.w	8007114 <_dtoa_r+0x204>
 800700c:	ee19 3a90 	vmov	r3, s19
 8007010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007014:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007018:	4656      	mov	r6, sl
 800701a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800701e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007022:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007026:	4b74      	ldr	r3, [pc, #464]	; (80071f8 <_dtoa_r+0x2e8>)
 8007028:	2200      	movs	r2, #0
 800702a:	4630      	mov	r0, r6
 800702c:	4639      	mov	r1, r7
 800702e:	f7f9 f92b 	bl	8000288 <__aeabi_dsub>
 8007032:	a365      	add	r3, pc, #404	; (adr r3, 80071c8 <_dtoa_r+0x2b8>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f7f9 fade 	bl	80005f8 <__aeabi_dmul>
 800703c:	a364      	add	r3, pc, #400	; (adr r3, 80071d0 <_dtoa_r+0x2c0>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f923 	bl	800028c <__adddf3>
 8007046:	4606      	mov	r6, r0
 8007048:	4628      	mov	r0, r5
 800704a:	460f      	mov	r7, r1
 800704c:	f7f9 fa6a 	bl	8000524 <__aeabi_i2d>
 8007050:	a361      	add	r3, pc, #388	; (adr r3, 80071d8 <_dtoa_r+0x2c8>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	f7f9 f913 	bl	800028c <__adddf3>
 8007066:	4606      	mov	r6, r0
 8007068:	460f      	mov	r7, r1
 800706a:	f7f9 fd75 	bl	8000b58 <__aeabi_d2iz>
 800706e:	2200      	movs	r2, #0
 8007070:	9000      	str	r0, [sp, #0]
 8007072:	2300      	movs	r3, #0
 8007074:	4630      	mov	r0, r6
 8007076:	4639      	mov	r1, r7
 8007078:	f7f9 fd30 	bl	8000adc <__aeabi_dcmplt>
 800707c:	b150      	cbz	r0, 8007094 <_dtoa_r+0x184>
 800707e:	9800      	ldr	r0, [sp, #0]
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	f7f9 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800708c:	b910      	cbnz	r0, 8007094 <_dtoa_r+0x184>
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	2b16      	cmp	r3, #22
 8007098:	d85a      	bhi.n	8007150 <_dtoa_r+0x240>
 800709a:	9a00      	ldr	r2, [sp, #0]
 800709c:	4b57      	ldr	r3, [pc, #348]	; (80071fc <_dtoa_r+0x2ec>)
 800709e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	ec51 0b19 	vmov	r0, r1, d9
 80070aa:	f7f9 fd17 	bl	8000adc <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d050      	beq.n	8007154 <_dtoa_r+0x244>
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80070bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070be:	1b5d      	subs	r5, r3, r5
 80070c0:	1e6b      	subs	r3, r5, #1
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	bf45      	ittet	mi
 80070c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80070ca:	9304      	strmi	r3, [sp, #16]
 80070cc:	2300      	movpl	r3, #0
 80070ce:	2300      	movmi	r3, #0
 80070d0:	bf4c      	ite	mi
 80070d2:	9305      	strmi	r3, [sp, #20]
 80070d4:	9304      	strpl	r3, [sp, #16]
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db3d      	blt.n	8007158 <_dtoa_r+0x248>
 80070dc:	9b05      	ldr	r3, [sp, #20]
 80070de:	9a00      	ldr	r2, [sp, #0]
 80070e0:	920a      	str	r2, [sp, #40]	; 0x28
 80070e2:	4413      	add	r3, r2
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	2300      	movs	r3, #0
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	f200 8089 	bhi.w	8007204 <_dtoa_r+0x2f4>
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	bfc4      	itt	gt
 80070f6:	3b04      	subgt	r3, #4
 80070f8:	9306      	strgt	r3, [sp, #24]
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	f1a3 0302 	sub.w	r3, r3, #2
 8007100:	bfcc      	ite	gt
 8007102:	2500      	movgt	r5, #0
 8007104:	2501      	movle	r5, #1
 8007106:	2b03      	cmp	r3, #3
 8007108:	f200 8087 	bhi.w	800721a <_dtoa_r+0x30a>
 800710c:	e8df f003 	tbb	[pc, r3]
 8007110:	59383a2d 	.word	0x59383a2d
 8007114:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007118:	441d      	add	r5, r3
 800711a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800711e:	2b20      	cmp	r3, #32
 8007120:	bfc1      	itttt	gt
 8007122:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007126:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800712a:	fa0b f303 	lslgt.w	r3, fp, r3
 800712e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007132:	bfda      	itte	le
 8007134:	f1c3 0320 	rsble	r3, r3, #32
 8007138:	fa06 f003 	lslle.w	r0, r6, r3
 800713c:	4318      	orrgt	r0, r3
 800713e:	f7f9 f9e1 	bl	8000504 <__aeabi_ui2d>
 8007142:	2301      	movs	r3, #1
 8007144:	4606      	mov	r6, r0
 8007146:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800714a:	3d01      	subs	r5, #1
 800714c:	930e      	str	r3, [sp, #56]	; 0x38
 800714e:	e76a      	b.n	8007026 <_dtoa_r+0x116>
 8007150:	2301      	movs	r3, #1
 8007152:	e7b2      	b.n	80070ba <_dtoa_r+0x1aa>
 8007154:	900b      	str	r0, [sp, #44]	; 0x2c
 8007156:	e7b1      	b.n	80070bc <_dtoa_r+0x1ac>
 8007158:	9b04      	ldr	r3, [sp, #16]
 800715a:	9a00      	ldr	r2, [sp, #0]
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	4253      	negs	r3, r2
 8007162:	9307      	str	r3, [sp, #28]
 8007164:	2300      	movs	r3, #0
 8007166:	930a      	str	r3, [sp, #40]	; 0x28
 8007168:	e7bf      	b.n	80070ea <_dtoa_r+0x1da>
 800716a:	2300      	movs	r3, #0
 800716c:	9308      	str	r3, [sp, #32]
 800716e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc55      	bgt.n	8007220 <_dtoa_r+0x310>
 8007174:	2301      	movs	r3, #1
 8007176:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800717a:	461a      	mov	r2, r3
 800717c:	9209      	str	r2, [sp, #36]	; 0x24
 800717e:	e00c      	b.n	800719a <_dtoa_r+0x28a>
 8007180:	2301      	movs	r3, #1
 8007182:	e7f3      	b.n	800716c <_dtoa_r+0x25c>
 8007184:	2300      	movs	r3, #0
 8007186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007188:	9308      	str	r3, [sp, #32]
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	4413      	add	r3, r2
 800718e:	9302      	str	r3, [sp, #8]
 8007190:	3301      	adds	r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	9303      	str	r3, [sp, #12]
 8007196:	bfb8      	it	lt
 8007198:	2301      	movlt	r3, #1
 800719a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800719c:	2200      	movs	r2, #0
 800719e:	6042      	str	r2, [r0, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	f102 0614 	add.w	r6, r2, #20
 80071a6:	429e      	cmp	r6, r3
 80071a8:	6841      	ldr	r1, [r0, #4]
 80071aa:	d93d      	bls.n	8007228 <_dtoa_r+0x318>
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fcb7 	bl	8007b20 <_Balloc>
 80071b2:	9001      	str	r0, [sp, #4]
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d13b      	bne.n	8007230 <_dtoa_r+0x320>
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <_dtoa_r+0x2f0>)
 80071ba:	4602      	mov	r2, r0
 80071bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071c0:	e6c0      	b.n	8006f44 <_dtoa_r+0x34>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7df      	b.n	8007186 <_dtoa_r+0x276>
 80071c6:	bf00      	nop
 80071c8:	636f4361 	.word	0x636f4361
 80071cc:	3fd287a7 	.word	0x3fd287a7
 80071d0:	8b60c8b3 	.word	0x8b60c8b3
 80071d4:	3fc68a28 	.word	0x3fc68a28
 80071d8:	509f79fb 	.word	0x509f79fb
 80071dc:	3fd34413 	.word	0x3fd34413
 80071e0:	08008fdd 	.word	0x08008fdd
 80071e4:	08008ff4 	.word	0x08008ff4
 80071e8:	7ff00000 	.word	0x7ff00000
 80071ec:	08008fd9 	.word	0x08008fd9
 80071f0:	08008fd0 	.word	0x08008fd0
 80071f4:	08008fad 	.word	0x08008fad
 80071f8:	3ff80000 	.word	0x3ff80000
 80071fc:	080090e8 	.word	0x080090e8
 8007200:	0800904f 	.word	0x0800904f
 8007204:	2501      	movs	r5, #1
 8007206:	2300      	movs	r3, #0
 8007208:	9306      	str	r3, [sp, #24]
 800720a:	9508      	str	r5, [sp, #32]
 800720c:	f04f 33ff 	mov.w	r3, #4294967295
 8007210:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	2312      	movs	r3, #18
 8007218:	e7b0      	b.n	800717c <_dtoa_r+0x26c>
 800721a:	2301      	movs	r3, #1
 800721c:	9308      	str	r3, [sp, #32]
 800721e:	e7f5      	b.n	800720c <_dtoa_r+0x2fc>
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007226:	e7b8      	b.n	800719a <_dtoa_r+0x28a>
 8007228:	3101      	adds	r1, #1
 800722a:	6041      	str	r1, [r0, #4]
 800722c:	0052      	lsls	r2, r2, #1
 800722e:	e7b8      	b.n	80071a2 <_dtoa_r+0x292>
 8007230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007232:	9a01      	ldr	r2, [sp, #4]
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	2b0e      	cmp	r3, #14
 800723a:	f200 809d 	bhi.w	8007378 <_dtoa_r+0x468>
 800723e:	2d00      	cmp	r5, #0
 8007240:	f000 809a 	beq.w	8007378 <_dtoa_r+0x468>
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd32      	ble.n	80072b0 <_dtoa_r+0x3a0>
 800724a:	4ab7      	ldr	r2, [pc, #732]	; (8007528 <_dtoa_r+0x618>)
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007258:	9b00      	ldr	r3, [sp, #0]
 800725a:	05d8      	lsls	r0, r3, #23
 800725c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007260:	d516      	bpl.n	8007290 <_dtoa_r+0x380>
 8007262:	4bb2      	ldr	r3, [pc, #712]	; (800752c <_dtoa_r+0x61c>)
 8007264:	ec51 0b19 	vmov	r0, r1, d9
 8007268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800726c:	f7f9 faee 	bl	800084c <__aeabi_ddiv>
 8007270:	f007 070f 	and.w	r7, r7, #15
 8007274:	4682      	mov	sl, r0
 8007276:	468b      	mov	fp, r1
 8007278:	2503      	movs	r5, #3
 800727a:	4eac      	ldr	r6, [pc, #688]	; (800752c <_dtoa_r+0x61c>)
 800727c:	b957      	cbnz	r7, 8007294 <_dtoa_r+0x384>
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	4650      	mov	r0, sl
 8007284:	4659      	mov	r1, fp
 8007286:	f7f9 fae1 	bl	800084c <__aeabi_ddiv>
 800728a:	4682      	mov	sl, r0
 800728c:	468b      	mov	fp, r1
 800728e:	e028      	b.n	80072e2 <_dtoa_r+0x3d2>
 8007290:	2502      	movs	r5, #2
 8007292:	e7f2      	b.n	800727a <_dtoa_r+0x36a>
 8007294:	07f9      	lsls	r1, r7, #31
 8007296:	d508      	bpl.n	80072aa <_dtoa_r+0x39a>
 8007298:	4640      	mov	r0, r8
 800729a:	4649      	mov	r1, r9
 800729c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	3501      	adds	r5, #1
 80072a6:	4680      	mov	r8, r0
 80072a8:	4689      	mov	r9, r1
 80072aa:	107f      	asrs	r7, r7, #1
 80072ac:	3608      	adds	r6, #8
 80072ae:	e7e5      	b.n	800727c <_dtoa_r+0x36c>
 80072b0:	f000 809b 	beq.w	80073ea <_dtoa_r+0x4da>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	4f9d      	ldr	r7, [pc, #628]	; (800752c <_dtoa_r+0x61c>)
 80072b8:	425e      	negs	r6, r3
 80072ba:	4b9b      	ldr	r3, [pc, #620]	; (8007528 <_dtoa_r+0x618>)
 80072bc:	f006 020f 	and.w	r2, r6, #15
 80072c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	ec51 0b19 	vmov	r0, r1, d9
 80072cc:	f7f9 f994 	bl	80005f8 <__aeabi_dmul>
 80072d0:	1136      	asrs	r6, r6, #4
 80072d2:	4682      	mov	sl, r0
 80072d4:	468b      	mov	fp, r1
 80072d6:	2300      	movs	r3, #0
 80072d8:	2502      	movs	r5, #2
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d17a      	bne.n	80073d4 <_dtoa_r+0x4c4>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1d3      	bne.n	800728a <_dtoa_r+0x37a>
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8082 	beq.w	80073ee <_dtoa_r+0x4de>
 80072ea:	4b91      	ldr	r3, [pc, #580]	; (8007530 <_dtoa_r+0x620>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	4650      	mov	r0, sl
 80072f0:	4659      	mov	r1, fp
 80072f2:	f7f9 fbf3 	bl	8000adc <__aeabi_dcmplt>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d079      	beq.n	80073ee <_dtoa_r+0x4de>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d076      	beq.n	80073ee <_dtoa_r+0x4de>
 8007300:	9b02      	ldr	r3, [sp, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dd36      	ble.n	8007374 <_dtoa_r+0x464>
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	1e5f      	subs	r7, r3, #1
 800730e:	2200      	movs	r2, #0
 8007310:	4b88      	ldr	r3, [pc, #544]	; (8007534 <_dtoa_r+0x624>)
 8007312:	f7f9 f971 	bl	80005f8 <__aeabi_dmul>
 8007316:	9e02      	ldr	r6, [sp, #8]
 8007318:	4682      	mov	sl, r0
 800731a:	468b      	mov	fp, r1
 800731c:	3501      	adds	r5, #1
 800731e:	4628      	mov	r0, r5
 8007320:	f7f9 f900 	bl	8000524 <__aeabi_i2d>
 8007324:	4652      	mov	r2, sl
 8007326:	465b      	mov	r3, fp
 8007328:	f7f9 f966 	bl	80005f8 <__aeabi_dmul>
 800732c:	4b82      	ldr	r3, [pc, #520]	; (8007538 <_dtoa_r+0x628>)
 800732e:	2200      	movs	r2, #0
 8007330:	f7f8 ffac 	bl	800028c <__adddf3>
 8007334:	46d0      	mov	r8, sl
 8007336:	46d9      	mov	r9, fp
 8007338:	4682      	mov	sl, r0
 800733a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800733e:	2e00      	cmp	r6, #0
 8007340:	d158      	bne.n	80073f4 <_dtoa_r+0x4e4>
 8007342:	4b7e      	ldr	r3, [pc, #504]	; (800753c <_dtoa_r+0x62c>)
 8007344:	2200      	movs	r2, #0
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f7f8 ff9d 	bl	8000288 <__aeabi_dsub>
 800734e:	4652      	mov	r2, sl
 8007350:	465b      	mov	r3, fp
 8007352:	4680      	mov	r8, r0
 8007354:	4689      	mov	r9, r1
 8007356:	f7f9 fbdf 	bl	8000b18 <__aeabi_dcmpgt>
 800735a:	2800      	cmp	r0, #0
 800735c:	f040 8295 	bne.w	800788a <_dtoa_r+0x97a>
 8007360:	4652      	mov	r2, sl
 8007362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007366:	4640      	mov	r0, r8
 8007368:	4649      	mov	r1, r9
 800736a:	f7f9 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f040 8289 	bne.w	8007886 <_dtoa_r+0x976>
 8007374:	ec5b ab19 	vmov	sl, fp, d9
 8007378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800737a:	2b00      	cmp	r3, #0
 800737c:	f2c0 8148 	blt.w	8007610 <_dtoa_r+0x700>
 8007380:	9a00      	ldr	r2, [sp, #0]
 8007382:	2a0e      	cmp	r2, #14
 8007384:	f300 8144 	bgt.w	8007610 <_dtoa_r+0x700>
 8007388:	4b67      	ldr	r3, [pc, #412]	; (8007528 <_dtoa_r+0x618>)
 800738a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	f280 80d5 	bge.w	8007544 <_dtoa_r+0x634>
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f300 80d1 	bgt.w	8007544 <_dtoa_r+0x634>
 80073a2:	f040 826f 	bne.w	8007884 <_dtoa_r+0x974>
 80073a6:	4b65      	ldr	r3, [pc, #404]	; (800753c <_dtoa_r+0x62c>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	4640      	mov	r0, r8
 80073ac:	4649      	mov	r1, r9
 80073ae:	f7f9 f923 	bl	80005f8 <__aeabi_dmul>
 80073b2:	4652      	mov	r2, sl
 80073b4:	465b      	mov	r3, fp
 80073b6:	f7f9 fba5 	bl	8000b04 <__aeabi_dcmpge>
 80073ba:	9e03      	ldr	r6, [sp, #12]
 80073bc:	4637      	mov	r7, r6
 80073be:	2800      	cmp	r0, #0
 80073c0:	f040 8245 	bne.w	800784e <_dtoa_r+0x93e>
 80073c4:	9d01      	ldr	r5, [sp, #4]
 80073c6:	2331      	movs	r3, #49	; 0x31
 80073c8:	f805 3b01 	strb.w	r3, [r5], #1
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	e240      	b.n	8007856 <_dtoa_r+0x946>
 80073d4:	07f2      	lsls	r2, r6, #31
 80073d6:	d505      	bpl.n	80073e4 <_dtoa_r+0x4d4>
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	f7f9 f90c 	bl	80005f8 <__aeabi_dmul>
 80073e0:	3501      	adds	r5, #1
 80073e2:	2301      	movs	r3, #1
 80073e4:	1076      	asrs	r6, r6, #1
 80073e6:	3708      	adds	r7, #8
 80073e8:	e777      	b.n	80072da <_dtoa_r+0x3ca>
 80073ea:	2502      	movs	r5, #2
 80073ec:	e779      	b.n	80072e2 <_dtoa_r+0x3d2>
 80073ee:	9f00      	ldr	r7, [sp, #0]
 80073f0:	9e03      	ldr	r6, [sp, #12]
 80073f2:	e794      	b.n	800731e <_dtoa_r+0x40e>
 80073f4:	9901      	ldr	r1, [sp, #4]
 80073f6:	4b4c      	ldr	r3, [pc, #304]	; (8007528 <_dtoa_r+0x618>)
 80073f8:	4431      	add	r1, r6
 80073fa:	910d      	str	r1, [sp, #52]	; 0x34
 80073fc:	9908      	ldr	r1, [sp, #32]
 80073fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007402:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007406:	2900      	cmp	r1, #0
 8007408:	d043      	beq.n	8007492 <_dtoa_r+0x582>
 800740a:	494d      	ldr	r1, [pc, #308]	; (8007540 <_dtoa_r+0x630>)
 800740c:	2000      	movs	r0, #0
 800740e:	f7f9 fa1d 	bl	800084c <__aeabi_ddiv>
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	f7f8 ff37 	bl	8000288 <__aeabi_dsub>
 800741a:	9d01      	ldr	r5, [sp, #4]
 800741c:	4682      	mov	sl, r0
 800741e:	468b      	mov	fp, r1
 8007420:	4649      	mov	r1, r9
 8007422:	4640      	mov	r0, r8
 8007424:	f7f9 fb98 	bl	8000b58 <__aeabi_d2iz>
 8007428:	4606      	mov	r6, r0
 800742a:	f7f9 f87b 	bl	8000524 <__aeabi_i2d>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4640      	mov	r0, r8
 8007434:	4649      	mov	r1, r9
 8007436:	f7f8 ff27 	bl	8000288 <__aeabi_dsub>
 800743a:	3630      	adds	r6, #48	; 0x30
 800743c:	f805 6b01 	strb.w	r6, [r5], #1
 8007440:	4652      	mov	r2, sl
 8007442:	465b      	mov	r3, fp
 8007444:	4680      	mov	r8, r0
 8007446:	4689      	mov	r9, r1
 8007448:	f7f9 fb48 	bl	8000adc <__aeabi_dcmplt>
 800744c:	2800      	cmp	r0, #0
 800744e:	d163      	bne.n	8007518 <_dtoa_r+0x608>
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	4936      	ldr	r1, [pc, #216]	; (8007530 <_dtoa_r+0x620>)
 8007456:	2000      	movs	r0, #0
 8007458:	f7f8 ff16 	bl	8000288 <__aeabi_dsub>
 800745c:	4652      	mov	r2, sl
 800745e:	465b      	mov	r3, fp
 8007460:	f7f9 fb3c 	bl	8000adc <__aeabi_dcmplt>
 8007464:	2800      	cmp	r0, #0
 8007466:	f040 80b5 	bne.w	80075d4 <_dtoa_r+0x6c4>
 800746a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800746c:	429d      	cmp	r5, r3
 800746e:	d081      	beq.n	8007374 <_dtoa_r+0x464>
 8007470:	4b30      	ldr	r3, [pc, #192]	; (8007534 <_dtoa_r+0x624>)
 8007472:	2200      	movs	r2, #0
 8007474:	4650      	mov	r0, sl
 8007476:	4659      	mov	r1, fp
 8007478:	f7f9 f8be 	bl	80005f8 <__aeabi_dmul>
 800747c:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <_dtoa_r+0x624>)
 800747e:	4682      	mov	sl, r0
 8007480:	468b      	mov	fp, r1
 8007482:	4640      	mov	r0, r8
 8007484:	4649      	mov	r1, r9
 8007486:	2200      	movs	r2, #0
 8007488:	f7f9 f8b6 	bl	80005f8 <__aeabi_dmul>
 800748c:	4680      	mov	r8, r0
 800748e:	4689      	mov	r9, r1
 8007490:	e7c6      	b.n	8007420 <_dtoa_r+0x510>
 8007492:	4650      	mov	r0, sl
 8007494:	4659      	mov	r1, fp
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800749c:	9d01      	ldr	r5, [sp, #4]
 800749e:	930f      	str	r3, [sp, #60]	; 0x3c
 80074a0:	4682      	mov	sl, r0
 80074a2:	468b      	mov	fp, r1
 80074a4:	4649      	mov	r1, r9
 80074a6:	4640      	mov	r0, r8
 80074a8:	f7f9 fb56 	bl	8000b58 <__aeabi_d2iz>
 80074ac:	4606      	mov	r6, r0
 80074ae:	f7f9 f839 	bl	8000524 <__aeabi_i2d>
 80074b2:	3630      	adds	r6, #48	; 0x30
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4640      	mov	r0, r8
 80074ba:	4649      	mov	r1, r9
 80074bc:	f7f8 fee4 	bl	8000288 <__aeabi_dsub>
 80074c0:	f805 6b01 	strb.w	r6, [r5], #1
 80074c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c6:	429d      	cmp	r5, r3
 80074c8:	4680      	mov	r8, r0
 80074ca:	4689      	mov	r9, r1
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	d124      	bne.n	800751c <_dtoa_r+0x60c>
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <_dtoa_r+0x630>)
 80074d4:	4650      	mov	r0, sl
 80074d6:	4659      	mov	r1, fp
 80074d8:	f7f8 fed8 	bl	800028c <__adddf3>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f9 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	d173      	bne.n	80075d4 <_dtoa_r+0x6c4>
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	4913      	ldr	r1, [pc, #76]	; (8007540 <_dtoa_r+0x630>)
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7f8 fec8 	bl	8000288 <__aeabi_dsub>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 faec 	bl	8000adc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f43f af35 	beq.w	8007374 <_dtoa_r+0x464>
 800750a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800750c:	1e6b      	subs	r3, r5, #1
 800750e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d0f8      	beq.n	800750a <_dtoa_r+0x5fa>
 8007518:	9700      	str	r7, [sp, #0]
 800751a:	e049      	b.n	80075b0 <_dtoa_r+0x6a0>
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <_dtoa_r+0x624>)
 800751e:	f7f9 f86b 	bl	80005f8 <__aeabi_dmul>
 8007522:	4680      	mov	r8, r0
 8007524:	4689      	mov	r9, r1
 8007526:	e7bd      	b.n	80074a4 <_dtoa_r+0x594>
 8007528:	080090e8 	.word	0x080090e8
 800752c:	080090c0 	.word	0x080090c0
 8007530:	3ff00000 	.word	0x3ff00000
 8007534:	40240000 	.word	0x40240000
 8007538:	401c0000 	.word	0x401c0000
 800753c:	40140000 	.word	0x40140000
 8007540:	3fe00000 	.word	0x3fe00000
 8007544:	9d01      	ldr	r5, [sp, #4]
 8007546:	4656      	mov	r6, sl
 8007548:	465f      	mov	r7, fp
 800754a:	4642      	mov	r2, r8
 800754c:	464b      	mov	r3, r9
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f9 f97b 	bl	800084c <__aeabi_ddiv>
 8007556:	f7f9 faff 	bl	8000b58 <__aeabi_d2iz>
 800755a:	4682      	mov	sl, r0
 800755c:	f7f8 ffe2 	bl	8000524 <__aeabi_i2d>
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	f7f9 f848 	bl	80005f8 <__aeabi_dmul>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4630      	mov	r0, r6
 800756e:	4639      	mov	r1, r7
 8007570:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007574:	f7f8 fe88 	bl	8000288 <__aeabi_dsub>
 8007578:	f805 6b01 	strb.w	r6, [r5], #1
 800757c:	9e01      	ldr	r6, [sp, #4]
 800757e:	9f03      	ldr	r7, [sp, #12]
 8007580:	1bae      	subs	r6, r5, r6
 8007582:	42b7      	cmp	r7, r6
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	d135      	bne.n	80075f6 <_dtoa_r+0x6e6>
 800758a:	f7f8 fe7f 	bl	800028c <__adddf3>
 800758e:	4642      	mov	r2, r8
 8007590:	464b      	mov	r3, r9
 8007592:	4606      	mov	r6, r0
 8007594:	460f      	mov	r7, r1
 8007596:	f7f9 fabf 	bl	8000b18 <__aeabi_dcmpgt>
 800759a:	b9d0      	cbnz	r0, 80075d2 <_dtoa_r+0x6c2>
 800759c:	4642      	mov	r2, r8
 800759e:	464b      	mov	r3, r9
 80075a0:	4630      	mov	r0, r6
 80075a2:	4639      	mov	r1, r7
 80075a4:	f7f9 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a8:	b110      	cbz	r0, 80075b0 <_dtoa_r+0x6a0>
 80075aa:	f01a 0f01 	tst.w	sl, #1
 80075ae:	d110      	bne.n	80075d2 <_dtoa_r+0x6c2>
 80075b0:	4620      	mov	r0, r4
 80075b2:	ee18 1a10 	vmov	r1, s16
 80075b6:	f000 faf3 	bl	8007ba0 <_Bfree>
 80075ba:	2300      	movs	r3, #0
 80075bc:	9800      	ldr	r0, [sp, #0]
 80075be:	702b      	strb	r3, [r5, #0]
 80075c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075c2:	3001      	adds	r0, #1
 80075c4:	6018      	str	r0, [r3, #0]
 80075c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f43f acf1 	beq.w	8006fb0 <_dtoa_r+0xa0>
 80075ce:	601d      	str	r5, [r3, #0]
 80075d0:	e4ee      	b.n	8006fb0 <_dtoa_r+0xa0>
 80075d2:	9f00      	ldr	r7, [sp, #0]
 80075d4:	462b      	mov	r3, r5
 80075d6:	461d      	mov	r5, r3
 80075d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075dc:	2a39      	cmp	r2, #57	; 0x39
 80075de:	d106      	bne.n	80075ee <_dtoa_r+0x6de>
 80075e0:	9a01      	ldr	r2, [sp, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d1f7      	bne.n	80075d6 <_dtoa_r+0x6c6>
 80075e6:	9901      	ldr	r1, [sp, #4]
 80075e8:	2230      	movs	r2, #48	; 0x30
 80075ea:	3701      	adds	r7, #1
 80075ec:	700a      	strb	r2, [r1, #0]
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	3201      	adds	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e790      	b.n	8007518 <_dtoa_r+0x608>
 80075f6:	4ba6      	ldr	r3, [pc, #664]	; (8007890 <_dtoa_r+0x980>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	2200      	movs	r2, #0
 8007600:	2300      	movs	r3, #0
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	f7f9 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800760a:	2800      	cmp	r0, #0
 800760c:	d09d      	beq.n	800754a <_dtoa_r+0x63a>
 800760e:	e7cf      	b.n	80075b0 <_dtoa_r+0x6a0>
 8007610:	9a08      	ldr	r2, [sp, #32]
 8007612:	2a00      	cmp	r2, #0
 8007614:	f000 80d7 	beq.w	80077c6 <_dtoa_r+0x8b6>
 8007618:	9a06      	ldr	r2, [sp, #24]
 800761a:	2a01      	cmp	r2, #1
 800761c:	f300 80ba 	bgt.w	8007794 <_dtoa_r+0x884>
 8007620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007622:	2a00      	cmp	r2, #0
 8007624:	f000 80b2 	beq.w	800778c <_dtoa_r+0x87c>
 8007628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800762c:	9e07      	ldr	r6, [sp, #28]
 800762e:	9d04      	ldr	r5, [sp, #16]
 8007630:	9a04      	ldr	r2, [sp, #16]
 8007632:	441a      	add	r2, r3
 8007634:	9204      	str	r2, [sp, #16]
 8007636:	9a05      	ldr	r2, [sp, #20]
 8007638:	2101      	movs	r1, #1
 800763a:	441a      	add	r2, r3
 800763c:	4620      	mov	r0, r4
 800763e:	9205      	str	r2, [sp, #20]
 8007640:	f000 fb66 	bl	8007d10 <__i2b>
 8007644:	4607      	mov	r7, r0
 8007646:	2d00      	cmp	r5, #0
 8007648:	dd0c      	ble.n	8007664 <_dtoa_r+0x754>
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dd09      	ble.n	8007664 <_dtoa_r+0x754>
 8007650:	42ab      	cmp	r3, r5
 8007652:	9a04      	ldr	r2, [sp, #16]
 8007654:	bfa8      	it	ge
 8007656:	462b      	movge	r3, r5
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	9204      	str	r2, [sp, #16]
 800765c:	9a05      	ldr	r2, [sp, #20]
 800765e:	1aed      	subs	r5, r5, r3
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	9305      	str	r3, [sp, #20]
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	b31b      	cbz	r3, 80076b0 <_dtoa_r+0x7a0>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80af 	beq.w	80077ce <_dtoa_r+0x8be>
 8007670:	2e00      	cmp	r6, #0
 8007672:	dd13      	ble.n	800769c <_dtoa_r+0x78c>
 8007674:	4639      	mov	r1, r7
 8007676:	4632      	mov	r2, r6
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fc09 	bl	8007e90 <__pow5mult>
 800767e:	ee18 2a10 	vmov	r2, s16
 8007682:	4601      	mov	r1, r0
 8007684:	4607      	mov	r7, r0
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fb58 	bl	8007d3c <__multiply>
 800768c:	ee18 1a10 	vmov	r1, s16
 8007690:	4680      	mov	r8, r0
 8007692:	4620      	mov	r0, r4
 8007694:	f000 fa84 	bl	8007ba0 <_Bfree>
 8007698:	ee08 8a10 	vmov	s16, r8
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	1b9a      	subs	r2, r3, r6
 80076a0:	d006      	beq.n	80076b0 <_dtoa_r+0x7a0>
 80076a2:	ee18 1a10 	vmov	r1, s16
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 fbf2 	bl	8007e90 <__pow5mult>
 80076ac:	ee08 0a10 	vmov	s16, r0
 80076b0:	2101      	movs	r1, #1
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fb2c 	bl	8007d10 <__i2b>
 80076b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	4606      	mov	r6, r0
 80076be:	f340 8088 	ble.w	80077d2 <_dtoa_r+0x8c2>
 80076c2:	461a      	mov	r2, r3
 80076c4:	4601      	mov	r1, r0
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fbe2 	bl	8007e90 <__pow5mult>
 80076cc:	9b06      	ldr	r3, [sp, #24]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	4606      	mov	r6, r0
 80076d2:	f340 8081 	ble.w	80077d8 <_dtoa_r+0x8c8>
 80076d6:	f04f 0800 	mov.w	r8, #0
 80076da:	6933      	ldr	r3, [r6, #16]
 80076dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076e0:	6918      	ldr	r0, [r3, #16]
 80076e2:	f000 fac5 	bl	8007c70 <__hi0bits>
 80076e6:	f1c0 0020 	rsb	r0, r0, #32
 80076ea:	9b05      	ldr	r3, [sp, #20]
 80076ec:	4418      	add	r0, r3
 80076ee:	f010 001f 	ands.w	r0, r0, #31
 80076f2:	f000 8092 	beq.w	800781a <_dtoa_r+0x90a>
 80076f6:	f1c0 0320 	rsb	r3, r0, #32
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	f340 808a 	ble.w	8007814 <_dtoa_r+0x904>
 8007700:	f1c0 001c 	rsb	r0, r0, #28
 8007704:	9b04      	ldr	r3, [sp, #16]
 8007706:	4403      	add	r3, r0
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	9b05      	ldr	r3, [sp, #20]
 800770c:	4403      	add	r3, r0
 800770e:	4405      	add	r5, r0
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	9b04      	ldr	r3, [sp, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dd07      	ble.n	8007728 <_dtoa_r+0x818>
 8007718:	ee18 1a10 	vmov	r1, s16
 800771c:	461a      	mov	r2, r3
 800771e:	4620      	mov	r0, r4
 8007720:	f000 fc10 	bl	8007f44 <__lshift>
 8007724:	ee08 0a10 	vmov	s16, r0
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dd05      	ble.n	800773a <_dtoa_r+0x82a>
 800772e:	4631      	mov	r1, r6
 8007730:	461a      	mov	r2, r3
 8007732:	4620      	mov	r0, r4
 8007734:	f000 fc06 	bl	8007f44 <__lshift>
 8007738:	4606      	mov	r6, r0
 800773a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d06e      	beq.n	800781e <_dtoa_r+0x90e>
 8007740:	ee18 0a10 	vmov	r0, s16
 8007744:	4631      	mov	r1, r6
 8007746:	f000 fc6d 	bl	8008024 <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	da67      	bge.n	800781e <_dtoa_r+0x90e>
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	3b01      	subs	r3, #1
 8007752:	ee18 1a10 	vmov	r1, s16
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	220a      	movs	r2, #10
 800775a:	2300      	movs	r3, #0
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fa41 	bl	8007be4 <__multadd>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	ee08 0a10 	vmov	s16, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 81b1 	beq.w	8007ad0 <_dtoa_r+0xbc0>
 800776e:	2300      	movs	r3, #0
 8007770:	4639      	mov	r1, r7
 8007772:	220a      	movs	r2, #10
 8007774:	4620      	mov	r0, r4
 8007776:	f000 fa35 	bl	8007be4 <__multadd>
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	4607      	mov	r7, r0
 8007780:	f300 808e 	bgt.w	80078a0 <_dtoa_r+0x990>
 8007784:	9b06      	ldr	r3, [sp, #24]
 8007786:	2b02      	cmp	r3, #2
 8007788:	dc51      	bgt.n	800782e <_dtoa_r+0x91e>
 800778a:	e089      	b.n	80078a0 <_dtoa_r+0x990>
 800778c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800778e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007792:	e74b      	b.n	800762c <_dtoa_r+0x71c>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	1e5e      	subs	r6, r3, #1
 8007798:	9b07      	ldr	r3, [sp, #28]
 800779a:	42b3      	cmp	r3, r6
 800779c:	bfbf      	itttt	lt
 800779e:	9b07      	ldrlt	r3, [sp, #28]
 80077a0:	9607      	strlt	r6, [sp, #28]
 80077a2:	1af2      	sublt	r2, r6, r3
 80077a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80077a6:	bfb6      	itet	lt
 80077a8:	189b      	addlt	r3, r3, r2
 80077aa:	1b9e      	subge	r6, r3, r6
 80077ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	bfb8      	it	lt
 80077b2:	2600      	movlt	r6, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	bfb7      	itett	lt
 80077b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80077bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80077c0:	1a9d      	sublt	r5, r3, r2
 80077c2:	2300      	movlt	r3, #0
 80077c4:	e734      	b.n	8007630 <_dtoa_r+0x720>
 80077c6:	9e07      	ldr	r6, [sp, #28]
 80077c8:	9d04      	ldr	r5, [sp, #16]
 80077ca:	9f08      	ldr	r7, [sp, #32]
 80077cc:	e73b      	b.n	8007646 <_dtoa_r+0x736>
 80077ce:	9a07      	ldr	r2, [sp, #28]
 80077d0:	e767      	b.n	80076a2 <_dtoa_r+0x792>
 80077d2:	9b06      	ldr	r3, [sp, #24]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	dc18      	bgt.n	800780a <_dtoa_r+0x8fa>
 80077d8:	f1ba 0f00 	cmp.w	sl, #0
 80077dc:	d115      	bne.n	800780a <_dtoa_r+0x8fa>
 80077de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e2:	b993      	cbnz	r3, 800780a <_dtoa_r+0x8fa>
 80077e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077e8:	0d1b      	lsrs	r3, r3, #20
 80077ea:	051b      	lsls	r3, r3, #20
 80077ec:	b183      	cbz	r3, 8007810 <_dtoa_r+0x900>
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	3301      	adds	r3, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	f04f 0801 	mov.w	r8, #1
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	2b00      	cmp	r3, #0
 8007802:	f47f af6a 	bne.w	80076da <_dtoa_r+0x7ca>
 8007806:	2001      	movs	r0, #1
 8007808:	e76f      	b.n	80076ea <_dtoa_r+0x7da>
 800780a:	f04f 0800 	mov.w	r8, #0
 800780e:	e7f6      	b.n	80077fe <_dtoa_r+0x8ee>
 8007810:	4698      	mov	r8, r3
 8007812:	e7f4      	b.n	80077fe <_dtoa_r+0x8ee>
 8007814:	f43f af7d 	beq.w	8007712 <_dtoa_r+0x802>
 8007818:	4618      	mov	r0, r3
 800781a:	301c      	adds	r0, #28
 800781c:	e772      	b.n	8007704 <_dtoa_r+0x7f4>
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	dc37      	bgt.n	8007894 <_dtoa_r+0x984>
 8007824:	9b06      	ldr	r3, [sp, #24]
 8007826:	2b02      	cmp	r3, #2
 8007828:	dd34      	ble.n	8007894 <_dtoa_r+0x984>
 800782a:	9b03      	ldr	r3, [sp, #12]
 800782c:	9302      	str	r3, [sp, #8]
 800782e:	9b02      	ldr	r3, [sp, #8]
 8007830:	b96b      	cbnz	r3, 800784e <_dtoa_r+0x93e>
 8007832:	4631      	mov	r1, r6
 8007834:	2205      	movs	r2, #5
 8007836:	4620      	mov	r0, r4
 8007838:	f000 f9d4 	bl	8007be4 <__multadd>
 800783c:	4601      	mov	r1, r0
 800783e:	4606      	mov	r6, r0
 8007840:	ee18 0a10 	vmov	r0, s16
 8007844:	f000 fbee 	bl	8008024 <__mcmp>
 8007848:	2800      	cmp	r0, #0
 800784a:	f73f adbb 	bgt.w	80073c4 <_dtoa_r+0x4b4>
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	9d01      	ldr	r5, [sp, #4]
 8007852:	43db      	mvns	r3, r3
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	4631      	mov	r1, r6
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f99f 	bl	8007ba0 <_Bfree>
 8007862:	2f00      	cmp	r7, #0
 8007864:	f43f aea4 	beq.w	80075b0 <_dtoa_r+0x6a0>
 8007868:	f1b8 0f00 	cmp.w	r8, #0
 800786c:	d005      	beq.n	800787a <_dtoa_r+0x96a>
 800786e:	45b8      	cmp	r8, r7
 8007870:	d003      	beq.n	800787a <_dtoa_r+0x96a>
 8007872:	4641      	mov	r1, r8
 8007874:	4620      	mov	r0, r4
 8007876:	f000 f993 	bl	8007ba0 <_Bfree>
 800787a:	4639      	mov	r1, r7
 800787c:	4620      	mov	r0, r4
 800787e:	f000 f98f 	bl	8007ba0 <_Bfree>
 8007882:	e695      	b.n	80075b0 <_dtoa_r+0x6a0>
 8007884:	2600      	movs	r6, #0
 8007886:	4637      	mov	r7, r6
 8007888:	e7e1      	b.n	800784e <_dtoa_r+0x93e>
 800788a:	9700      	str	r7, [sp, #0]
 800788c:	4637      	mov	r7, r6
 800788e:	e599      	b.n	80073c4 <_dtoa_r+0x4b4>
 8007890:	40240000 	.word	0x40240000
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80ca 	beq.w	8007a30 <_dtoa_r+0xb20>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	9302      	str	r3, [sp, #8]
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	dd05      	ble.n	80078b0 <_dtoa_r+0x9a0>
 80078a4:	4639      	mov	r1, r7
 80078a6:	462a      	mov	r2, r5
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fb4b 	bl	8007f44 <__lshift>
 80078ae:	4607      	mov	r7, r0
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	d05b      	beq.n	800796e <_dtoa_r+0xa5e>
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 f931 	bl	8007b20 <_Balloc>
 80078be:	4605      	mov	r5, r0
 80078c0:	b928      	cbnz	r0, 80078ce <_dtoa_r+0x9be>
 80078c2:	4b87      	ldr	r3, [pc, #540]	; (8007ae0 <_dtoa_r+0xbd0>)
 80078c4:	4602      	mov	r2, r0
 80078c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80078ca:	f7ff bb3b 	b.w	8006f44 <_dtoa_r+0x34>
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	3202      	adds	r2, #2
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	f107 010c 	add.w	r1, r7, #12
 80078d8:	300c      	adds	r0, #12
 80078da:	f000 f913 	bl	8007b04 <memcpy>
 80078de:	2201      	movs	r2, #1
 80078e0:	4629      	mov	r1, r5
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 fb2e 	bl	8007f44 <__lshift>
 80078e8:	9b01      	ldr	r3, [sp, #4]
 80078ea:	f103 0901 	add.w	r9, r3, #1
 80078ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	f00a 0301 	and.w	r3, sl, #1
 80078fa:	46b8      	mov	r8, r7
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	4607      	mov	r7, r0
 8007900:	4631      	mov	r1, r6
 8007902:	ee18 0a10 	vmov	r0, s16
 8007906:	f7ff fa77 	bl	8006df8 <quorem>
 800790a:	4641      	mov	r1, r8
 800790c:	9002      	str	r0, [sp, #8]
 800790e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007912:	ee18 0a10 	vmov	r0, s16
 8007916:	f000 fb85 	bl	8008024 <__mcmp>
 800791a:	463a      	mov	r2, r7
 800791c:	9003      	str	r0, [sp, #12]
 800791e:	4631      	mov	r1, r6
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fb9b 	bl	800805c <__mdiff>
 8007926:	68c2      	ldr	r2, [r0, #12]
 8007928:	f109 3bff 	add.w	fp, r9, #4294967295
 800792c:	4605      	mov	r5, r0
 800792e:	bb02      	cbnz	r2, 8007972 <_dtoa_r+0xa62>
 8007930:	4601      	mov	r1, r0
 8007932:	ee18 0a10 	vmov	r0, s16
 8007936:	f000 fb75 	bl	8008024 <__mcmp>
 800793a:	4602      	mov	r2, r0
 800793c:	4629      	mov	r1, r5
 800793e:	4620      	mov	r0, r4
 8007940:	9207      	str	r2, [sp, #28]
 8007942:	f000 f92d 	bl	8007ba0 <_Bfree>
 8007946:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800794a:	ea43 0102 	orr.w	r1, r3, r2
 800794e:	9b04      	ldr	r3, [sp, #16]
 8007950:	430b      	orrs	r3, r1
 8007952:	464d      	mov	r5, r9
 8007954:	d10f      	bne.n	8007976 <_dtoa_r+0xa66>
 8007956:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800795a:	d02a      	beq.n	80079b2 <_dtoa_r+0xaa2>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd02      	ble.n	8007968 <_dtoa_r+0xa58>
 8007962:	9b02      	ldr	r3, [sp, #8]
 8007964:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007968:	f88b a000 	strb.w	sl, [fp]
 800796c:	e775      	b.n	800785a <_dtoa_r+0x94a>
 800796e:	4638      	mov	r0, r7
 8007970:	e7ba      	b.n	80078e8 <_dtoa_r+0x9d8>
 8007972:	2201      	movs	r2, #1
 8007974:	e7e2      	b.n	800793c <_dtoa_r+0xa2c>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	db04      	blt.n	8007986 <_dtoa_r+0xa76>
 800797c:	9906      	ldr	r1, [sp, #24]
 800797e:	430b      	orrs	r3, r1
 8007980:	9904      	ldr	r1, [sp, #16]
 8007982:	430b      	orrs	r3, r1
 8007984:	d122      	bne.n	80079cc <_dtoa_r+0xabc>
 8007986:	2a00      	cmp	r2, #0
 8007988:	ddee      	ble.n	8007968 <_dtoa_r+0xa58>
 800798a:	ee18 1a10 	vmov	r1, s16
 800798e:	2201      	movs	r2, #1
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fad7 	bl	8007f44 <__lshift>
 8007996:	4631      	mov	r1, r6
 8007998:	ee08 0a10 	vmov	s16, r0
 800799c:	f000 fb42 	bl	8008024 <__mcmp>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	dc03      	bgt.n	80079ac <_dtoa_r+0xa9c>
 80079a4:	d1e0      	bne.n	8007968 <_dtoa_r+0xa58>
 80079a6:	f01a 0f01 	tst.w	sl, #1
 80079aa:	d0dd      	beq.n	8007968 <_dtoa_r+0xa58>
 80079ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079b0:	d1d7      	bne.n	8007962 <_dtoa_r+0xa52>
 80079b2:	2339      	movs	r3, #57	; 0x39
 80079b4:	f88b 3000 	strb.w	r3, [fp]
 80079b8:	462b      	mov	r3, r5
 80079ba:	461d      	mov	r5, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079c2:	2a39      	cmp	r2, #57	; 0x39
 80079c4:	d071      	beq.n	8007aaa <_dtoa_r+0xb9a>
 80079c6:	3201      	adds	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e746      	b.n	800785a <_dtoa_r+0x94a>
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	dd07      	ble.n	80079e0 <_dtoa_r+0xad0>
 80079d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079d4:	d0ed      	beq.n	80079b2 <_dtoa_r+0xaa2>
 80079d6:	f10a 0301 	add.w	r3, sl, #1
 80079da:	f88b 3000 	strb.w	r3, [fp]
 80079de:	e73c      	b.n	800785a <_dtoa_r+0x94a>
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079e6:	4599      	cmp	r9, r3
 80079e8:	d047      	beq.n	8007a7a <_dtoa_r+0xb6a>
 80079ea:	ee18 1a10 	vmov	r1, s16
 80079ee:	2300      	movs	r3, #0
 80079f0:	220a      	movs	r2, #10
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f8f6 	bl	8007be4 <__multadd>
 80079f8:	45b8      	cmp	r8, r7
 80079fa:	ee08 0a10 	vmov	s16, r0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	f04f 020a 	mov.w	r2, #10
 8007a06:	4641      	mov	r1, r8
 8007a08:	4620      	mov	r0, r4
 8007a0a:	d106      	bne.n	8007a1a <_dtoa_r+0xb0a>
 8007a0c:	f000 f8ea 	bl	8007be4 <__multadd>
 8007a10:	4680      	mov	r8, r0
 8007a12:	4607      	mov	r7, r0
 8007a14:	f109 0901 	add.w	r9, r9, #1
 8007a18:	e772      	b.n	8007900 <_dtoa_r+0x9f0>
 8007a1a:	f000 f8e3 	bl	8007be4 <__multadd>
 8007a1e:	4639      	mov	r1, r7
 8007a20:	4680      	mov	r8, r0
 8007a22:	2300      	movs	r3, #0
 8007a24:	220a      	movs	r2, #10
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f8dc 	bl	8007be4 <__multadd>
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	e7f1      	b.n	8007a14 <_dtoa_r+0xb04>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	9302      	str	r3, [sp, #8]
 8007a34:	9d01      	ldr	r5, [sp, #4]
 8007a36:	ee18 0a10 	vmov	r0, s16
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	f7ff f9dc 	bl	8006df8 <quorem>
 8007a40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	f805 ab01 	strb.w	sl, [r5], #1
 8007a4a:	1aea      	subs	r2, r5, r3
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	dd09      	ble.n	8007a66 <_dtoa_r+0xb56>
 8007a52:	ee18 1a10 	vmov	r1, s16
 8007a56:	2300      	movs	r3, #0
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f8c2 	bl	8007be4 <__multadd>
 8007a60:	ee08 0a10 	vmov	s16, r0
 8007a64:	e7e7      	b.n	8007a36 <_dtoa_r+0xb26>
 8007a66:	9b02      	ldr	r3, [sp, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfc8      	it	gt
 8007a6c:	461d      	movgt	r5, r3
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	bfd8      	it	le
 8007a72:	2501      	movle	r5, #1
 8007a74:	441d      	add	r5, r3
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	ee18 1a10 	vmov	r1, s16
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fa5f 	bl	8007f44 <__lshift>
 8007a86:	4631      	mov	r1, r6
 8007a88:	ee08 0a10 	vmov	s16, r0
 8007a8c:	f000 faca 	bl	8008024 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dc91      	bgt.n	80079b8 <_dtoa_r+0xaa8>
 8007a94:	d102      	bne.n	8007a9c <_dtoa_r+0xb8c>
 8007a96:	f01a 0f01 	tst.w	sl, #1
 8007a9a:	d18d      	bne.n	80079b8 <_dtoa_r+0xaa8>
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aa4:	2a30      	cmp	r2, #48	; 0x30
 8007aa6:	d0fa      	beq.n	8007a9e <_dtoa_r+0xb8e>
 8007aa8:	e6d7      	b.n	800785a <_dtoa_r+0x94a>
 8007aaa:	9a01      	ldr	r2, [sp, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d184      	bne.n	80079ba <_dtoa_r+0xaaa>
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2331      	movs	r3, #49	; 0x31
 8007ab8:	7013      	strb	r3, [r2, #0]
 8007aba:	e6ce      	b.n	800785a <_dtoa_r+0x94a>
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <_dtoa_r+0xbd4>)
 8007abe:	f7ff ba95 	b.w	8006fec <_dtoa_r+0xdc>
 8007ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f47f aa6e 	bne.w	8006fa6 <_dtoa_r+0x96>
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <_dtoa_r+0xbd8>)
 8007acc:	f7ff ba8e 	b.w	8006fec <_dtoa_r+0xdc>
 8007ad0:	9b02      	ldr	r3, [sp, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dcae      	bgt.n	8007a34 <_dtoa_r+0xb24>
 8007ad6:	9b06      	ldr	r3, [sp, #24]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	f73f aea8 	bgt.w	800782e <_dtoa_r+0x91e>
 8007ade:	e7a9      	b.n	8007a34 <_dtoa_r+0xb24>
 8007ae0:	0800904f 	.word	0x0800904f
 8007ae4:	08008fac 	.word	0x08008fac
 8007ae8:	08008fd0 	.word	0x08008fd0

08007aec <_localeconv_r>:
 8007aec:	4800      	ldr	r0, [pc, #0]	; (8007af0 <_localeconv_r+0x4>)
 8007aee:	4770      	bx	lr
 8007af0:	20000160 	.word	0x20000160

08007af4 <malloc>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <malloc+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f000 bc17 	b.w	800832c <_malloc_r>
 8007afe:	bf00      	nop
 8007b00:	2000000c 	.word	0x2000000c

08007b04 <memcpy>:
 8007b04:	440a      	add	r2, r1
 8007b06:	4291      	cmp	r1, r2
 8007b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b0c:	d100      	bne.n	8007b10 <memcpy+0xc>
 8007b0e:	4770      	bx	lr
 8007b10:	b510      	push	{r4, lr}
 8007b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	d1f9      	bne.n	8007b12 <memcpy+0xe>
 8007b1e:	bd10      	pop	{r4, pc}

08007b20 <_Balloc>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	b976      	cbnz	r6, 8007b48 <_Balloc+0x28>
 8007b2a:	2010      	movs	r0, #16
 8007b2c:	f7ff ffe2 	bl	8007af4 <malloc>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6260      	str	r0, [r4, #36]	; 0x24
 8007b34:	b920      	cbnz	r0, 8007b40 <_Balloc+0x20>
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <_Balloc+0x78>)
 8007b38:	4818      	ldr	r0, [pc, #96]	; (8007b9c <_Balloc+0x7c>)
 8007b3a:	2166      	movs	r1, #102	; 0x66
 8007b3c:	f000 fc7a 	bl	8008434 <__assert_func>
 8007b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b44:	6006      	str	r6, [r0, #0]
 8007b46:	60c6      	str	r6, [r0, #12]
 8007b48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b4a:	68f3      	ldr	r3, [r6, #12]
 8007b4c:	b183      	cbz	r3, 8007b70 <_Balloc+0x50>
 8007b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b56:	b9b8      	cbnz	r0, 8007b88 <_Balloc+0x68>
 8007b58:	2101      	movs	r1, #1
 8007b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b5e:	1d72      	adds	r2, r6, #5
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fb60 	bl	8008228 <_calloc_r>
 8007b68:	b160      	cbz	r0, 8007b84 <_Balloc+0x64>
 8007b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b6e:	e00e      	b.n	8007b8e <_Balloc+0x6e>
 8007b70:	2221      	movs	r2, #33	; 0x21
 8007b72:	2104      	movs	r1, #4
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fb57 	bl	8008228 <_calloc_r>
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	60f0      	str	r0, [r6, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e4      	bne.n	8007b4e <_Balloc+0x2e>
 8007b84:	2000      	movs	r0, #0
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	6802      	ldr	r2, [r0, #0]
 8007b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b94:	e7f7      	b.n	8007b86 <_Balloc+0x66>
 8007b96:	bf00      	nop
 8007b98:	08008fdd 	.word	0x08008fdd
 8007b9c:	08009060 	.word	0x08009060

08007ba0 <_Bfree>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	b976      	cbnz	r6, 8007bc8 <_Bfree+0x28>
 8007baa:	2010      	movs	r0, #16
 8007bac:	f7ff ffa2 	bl	8007af4 <malloc>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6268      	str	r0, [r5, #36]	; 0x24
 8007bb4:	b920      	cbnz	r0, 8007bc0 <_Bfree+0x20>
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <_Bfree+0x3c>)
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <_Bfree+0x40>)
 8007bba:	218a      	movs	r1, #138	; 0x8a
 8007bbc:	f000 fc3a 	bl	8008434 <__assert_func>
 8007bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bc4:	6006      	str	r6, [r0, #0]
 8007bc6:	60c6      	str	r6, [r0, #12]
 8007bc8:	b13c      	cbz	r4, 8007bda <_Bfree+0x3a>
 8007bca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bcc:	6862      	ldr	r2, [r4, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bd4:	6021      	str	r1, [r4, #0]
 8007bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	08008fdd 	.word	0x08008fdd
 8007be0:	08009060 	.word	0x08009060

08007be4 <__multadd>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	690d      	ldr	r5, [r1, #16]
 8007bea:	4607      	mov	r7, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	461e      	mov	r6, r3
 8007bf0:	f101 0c14 	add.w	ip, r1, #20
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8007bfa:	b299      	uxth	r1, r3
 8007bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8007c00:	0c1e      	lsrs	r6, r3, #16
 8007c02:	0c0b      	lsrs	r3, r1, #16
 8007c04:	fb02 3306 	mla	r3, r2, r6, r3
 8007c08:	b289      	uxth	r1, r1
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c10:	4285      	cmp	r5, r0
 8007c12:	f84c 1b04 	str.w	r1, [ip], #4
 8007c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c1a:	dcec      	bgt.n	8007bf6 <__multadd+0x12>
 8007c1c:	b30e      	cbz	r6, 8007c62 <__multadd+0x7e>
 8007c1e:	68a3      	ldr	r3, [r4, #8]
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	dc19      	bgt.n	8007c58 <__multadd+0x74>
 8007c24:	6861      	ldr	r1, [r4, #4]
 8007c26:	4638      	mov	r0, r7
 8007c28:	3101      	adds	r1, #1
 8007c2a:	f7ff ff79 	bl	8007b20 <_Balloc>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <__multadd+0x5a>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <__multadd+0x84>)
 8007c36:	480d      	ldr	r0, [pc, #52]	; (8007c6c <__multadd+0x88>)
 8007c38:	21b5      	movs	r1, #181	; 0xb5
 8007c3a:	f000 fbfb 	bl	8008434 <__assert_func>
 8007c3e:	6922      	ldr	r2, [r4, #16]
 8007c40:	3202      	adds	r2, #2
 8007c42:	f104 010c 	add.w	r1, r4, #12
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f7ff ff5b 	bl	8007b04 <memcpy>
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff ffa5 	bl	8007ba0 <_Bfree>
 8007c56:	4644      	mov	r4, r8
 8007c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	615e      	str	r6, [r3, #20]
 8007c60:	6125      	str	r5, [r4, #16]
 8007c62:	4620      	mov	r0, r4
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c68:	0800904f 	.word	0x0800904f
 8007c6c:	08009060 	.word	0x08009060

08007c70 <__hi0bits>:
 8007c70:	0c03      	lsrs	r3, r0, #16
 8007c72:	041b      	lsls	r3, r3, #16
 8007c74:	b9d3      	cbnz	r3, 8007cac <__hi0bits+0x3c>
 8007c76:	0400      	lsls	r0, r0, #16
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c7e:	bf04      	itt	eq
 8007c80:	0200      	lsleq	r0, r0, #8
 8007c82:	3308      	addeq	r3, #8
 8007c84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c88:	bf04      	itt	eq
 8007c8a:	0100      	lsleq	r0, r0, #4
 8007c8c:	3304      	addeq	r3, #4
 8007c8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c92:	bf04      	itt	eq
 8007c94:	0080      	lsleq	r0, r0, #2
 8007c96:	3302      	addeq	r3, #2
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	db05      	blt.n	8007ca8 <__hi0bits+0x38>
 8007c9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ca0:	f103 0301 	add.w	r3, r3, #1
 8007ca4:	bf08      	it	eq
 8007ca6:	2320      	moveq	r3, #32
 8007ca8:	4618      	mov	r0, r3
 8007caa:	4770      	bx	lr
 8007cac:	2300      	movs	r3, #0
 8007cae:	e7e4      	b.n	8007c7a <__hi0bits+0xa>

08007cb0 <__lo0bits>:
 8007cb0:	6803      	ldr	r3, [r0, #0]
 8007cb2:	f013 0207 	ands.w	r2, r3, #7
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	d00b      	beq.n	8007cd2 <__lo0bits+0x22>
 8007cba:	07da      	lsls	r2, r3, #31
 8007cbc:	d423      	bmi.n	8007d06 <__lo0bits+0x56>
 8007cbe:	0798      	lsls	r0, r3, #30
 8007cc0:	bf49      	itett	mi
 8007cc2:	085b      	lsrmi	r3, r3, #1
 8007cc4:	089b      	lsrpl	r3, r3, #2
 8007cc6:	2001      	movmi	r0, #1
 8007cc8:	600b      	strmi	r3, [r1, #0]
 8007cca:	bf5c      	itt	pl
 8007ccc:	600b      	strpl	r3, [r1, #0]
 8007cce:	2002      	movpl	r0, #2
 8007cd0:	4770      	bx	lr
 8007cd2:	b298      	uxth	r0, r3
 8007cd4:	b9a8      	cbnz	r0, 8007d02 <__lo0bits+0x52>
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	2010      	movs	r0, #16
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	b90a      	cbnz	r2, 8007ce2 <__lo0bits+0x32>
 8007cde:	3008      	adds	r0, #8
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	071a      	lsls	r2, r3, #28
 8007ce4:	bf04      	itt	eq
 8007ce6:	091b      	lsreq	r3, r3, #4
 8007ce8:	3004      	addeq	r0, #4
 8007cea:	079a      	lsls	r2, r3, #30
 8007cec:	bf04      	itt	eq
 8007cee:	089b      	lsreq	r3, r3, #2
 8007cf0:	3002      	addeq	r0, #2
 8007cf2:	07da      	lsls	r2, r3, #31
 8007cf4:	d403      	bmi.n	8007cfe <__lo0bits+0x4e>
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	f100 0001 	add.w	r0, r0, #1
 8007cfc:	d005      	beq.n	8007d0a <__lo0bits+0x5a>
 8007cfe:	600b      	str	r3, [r1, #0]
 8007d00:	4770      	bx	lr
 8007d02:	4610      	mov	r0, r2
 8007d04:	e7e9      	b.n	8007cda <__lo0bits+0x2a>
 8007d06:	2000      	movs	r0, #0
 8007d08:	4770      	bx	lr
 8007d0a:	2020      	movs	r0, #32
 8007d0c:	4770      	bx	lr
	...

08007d10 <__i2b>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	460c      	mov	r4, r1
 8007d14:	2101      	movs	r1, #1
 8007d16:	f7ff ff03 	bl	8007b20 <_Balloc>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	b928      	cbnz	r0, 8007d2a <__i2b+0x1a>
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <__i2b+0x24>)
 8007d20:	4805      	ldr	r0, [pc, #20]	; (8007d38 <__i2b+0x28>)
 8007d22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d26:	f000 fb85 	bl	8008434 <__assert_func>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6144      	str	r4, [r0, #20]
 8007d2e:	6103      	str	r3, [r0, #16]
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	0800904f 	.word	0x0800904f
 8007d38:	08009060 	.word	0x08009060

08007d3c <__multiply>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4691      	mov	r9, r2
 8007d42:	690a      	ldr	r2, [r1, #16]
 8007d44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	460b      	movlt	r3, r1
 8007d4e:	460c      	mov	r4, r1
 8007d50:	bfbc      	itt	lt
 8007d52:	464c      	movlt	r4, r9
 8007d54:	4699      	movlt	r9, r3
 8007d56:	6927      	ldr	r7, [r4, #16]
 8007d58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	6861      	ldr	r1, [r4, #4]
 8007d60:	eb07 060a 	add.w	r6, r7, sl
 8007d64:	42b3      	cmp	r3, r6
 8007d66:	b085      	sub	sp, #20
 8007d68:	bfb8      	it	lt
 8007d6a:	3101      	addlt	r1, #1
 8007d6c:	f7ff fed8 	bl	8007b20 <_Balloc>
 8007d70:	b930      	cbnz	r0, 8007d80 <__multiply+0x44>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b44      	ldr	r3, [pc, #272]	; (8007e88 <__multiply+0x14c>)
 8007d76:	4845      	ldr	r0, [pc, #276]	; (8007e8c <__multiply+0x150>)
 8007d78:	f240 115d 	movw	r1, #349	; 0x15d
 8007d7c:	f000 fb5a 	bl	8008434 <__assert_func>
 8007d80:	f100 0514 	add.w	r5, r0, #20
 8007d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d88:	462b      	mov	r3, r5
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4543      	cmp	r3, r8
 8007d8e:	d321      	bcc.n	8007dd4 <__multiply+0x98>
 8007d90:	f104 0314 	add.w	r3, r4, #20
 8007d94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d98:	f109 0314 	add.w	r3, r9, #20
 8007d9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007da0:	9202      	str	r2, [sp, #8]
 8007da2:	1b3a      	subs	r2, r7, r4
 8007da4:	3a15      	subs	r2, #21
 8007da6:	f022 0203 	bic.w	r2, r2, #3
 8007daa:	3204      	adds	r2, #4
 8007dac:	f104 0115 	add.w	r1, r4, #21
 8007db0:	428f      	cmp	r7, r1
 8007db2:	bf38      	it	cc
 8007db4:	2204      	movcc	r2, #4
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	9a02      	ldr	r2, [sp, #8]
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d80c      	bhi.n	8007dda <__multiply+0x9e>
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	dd03      	ble.n	8007dcc <__multiply+0x90>
 8007dc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05a      	beq.n	8007e82 <__multiply+0x146>
 8007dcc:	6106      	str	r6, [r0, #16]
 8007dce:	b005      	add	sp, #20
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	f843 2b04 	str.w	r2, [r3], #4
 8007dd8:	e7d8      	b.n	8007d8c <__multiply+0x50>
 8007dda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007dde:	f1ba 0f00 	cmp.w	sl, #0
 8007de2:	d024      	beq.n	8007e2e <__multiply+0xf2>
 8007de4:	f104 0e14 	add.w	lr, r4, #20
 8007de8:	46a9      	mov	r9, r5
 8007dea:	f04f 0c00 	mov.w	ip, #0
 8007dee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007df2:	f8d9 1000 	ldr.w	r1, [r9]
 8007df6:	fa1f fb82 	uxth.w	fp, r2
 8007dfa:	b289      	uxth	r1, r1
 8007dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e04:	f8d9 2000 	ldr.w	r2, [r9]
 8007e08:	4461      	add	r1, ip
 8007e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e16:	b289      	uxth	r1, r1
 8007e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e1c:	4577      	cmp	r7, lr
 8007e1e:	f849 1b04 	str.w	r1, [r9], #4
 8007e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e26:	d8e2      	bhi.n	8007dee <__multiply+0xb2>
 8007e28:	9a01      	ldr	r2, [sp, #4]
 8007e2a:	f845 c002 	str.w	ip, [r5, r2]
 8007e2e:	9a03      	ldr	r2, [sp, #12]
 8007e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e34:	3304      	adds	r3, #4
 8007e36:	f1b9 0f00 	cmp.w	r9, #0
 8007e3a:	d020      	beq.n	8007e7e <__multiply+0x142>
 8007e3c:	6829      	ldr	r1, [r5, #0]
 8007e3e:	f104 0c14 	add.w	ip, r4, #20
 8007e42:	46ae      	mov	lr, r5
 8007e44:	f04f 0a00 	mov.w	sl, #0
 8007e48:	f8bc b000 	ldrh.w	fp, [ip]
 8007e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e50:	fb09 220b 	mla	r2, r9, fp, r2
 8007e54:	4492      	add	sl, r2
 8007e56:	b289      	uxth	r1, r1
 8007e58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e64:	f8be 1000 	ldrh.w	r1, [lr]
 8007e68:	0c12      	lsrs	r2, r2, #16
 8007e6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007e6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e72:	4567      	cmp	r7, ip
 8007e74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e78:	d8e6      	bhi.n	8007e48 <__multiply+0x10c>
 8007e7a:	9a01      	ldr	r2, [sp, #4]
 8007e7c:	50a9      	str	r1, [r5, r2]
 8007e7e:	3504      	adds	r5, #4
 8007e80:	e79a      	b.n	8007db8 <__multiply+0x7c>
 8007e82:	3e01      	subs	r6, #1
 8007e84:	e79c      	b.n	8007dc0 <__multiply+0x84>
 8007e86:	bf00      	nop
 8007e88:	0800904f 	.word	0x0800904f
 8007e8c:	08009060 	.word	0x08009060

08007e90 <__pow5mult>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	4615      	mov	r5, r2
 8007e96:	f012 0203 	ands.w	r2, r2, #3
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	d007      	beq.n	8007eb0 <__pow5mult+0x20>
 8007ea0:	4c25      	ldr	r4, [pc, #148]	; (8007f38 <__pow5mult+0xa8>)
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eaa:	f7ff fe9b 	bl	8007be4 <__multadd>
 8007eae:	4607      	mov	r7, r0
 8007eb0:	10ad      	asrs	r5, r5, #2
 8007eb2:	d03d      	beq.n	8007f30 <__pow5mult+0xa0>
 8007eb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007eb6:	b97c      	cbnz	r4, 8007ed8 <__pow5mult+0x48>
 8007eb8:	2010      	movs	r0, #16
 8007eba:	f7ff fe1b 	bl	8007af4 <malloc>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ec2:	b928      	cbnz	r0, 8007ed0 <__pow5mult+0x40>
 8007ec4:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <__pow5mult+0xac>)
 8007ec6:	481e      	ldr	r0, [pc, #120]	; (8007f40 <__pow5mult+0xb0>)
 8007ec8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ecc:	f000 fab2 	bl	8008434 <__assert_func>
 8007ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ed4:	6004      	str	r4, [r0, #0]
 8007ed6:	60c4      	str	r4, [r0, #12]
 8007ed8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007edc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ee0:	b94c      	cbnz	r4, 8007ef6 <__pow5mult+0x66>
 8007ee2:	f240 2171 	movw	r1, #625	; 0x271
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7ff ff12 	bl	8007d10 <__i2b>
 8007eec:	2300      	movs	r3, #0
 8007eee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	6003      	str	r3, [r0, #0]
 8007ef6:	f04f 0900 	mov.w	r9, #0
 8007efa:	07eb      	lsls	r3, r5, #31
 8007efc:	d50a      	bpl.n	8007f14 <__pow5mult+0x84>
 8007efe:	4639      	mov	r1, r7
 8007f00:	4622      	mov	r2, r4
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7ff ff1a 	bl	8007d3c <__multiply>
 8007f08:	4639      	mov	r1, r7
 8007f0a:	4680      	mov	r8, r0
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff fe47 	bl	8007ba0 <_Bfree>
 8007f12:	4647      	mov	r7, r8
 8007f14:	106d      	asrs	r5, r5, #1
 8007f16:	d00b      	beq.n	8007f30 <__pow5mult+0xa0>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	b938      	cbnz	r0, 8007f2c <__pow5mult+0x9c>
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ff0b 	bl	8007d3c <__multiply>
 8007f26:	6020      	str	r0, [r4, #0]
 8007f28:	f8c0 9000 	str.w	r9, [r0]
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e7e4      	b.n	8007efa <__pow5mult+0x6a>
 8007f30:	4638      	mov	r0, r7
 8007f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f36:	bf00      	nop
 8007f38:	080091b0 	.word	0x080091b0
 8007f3c:	08008fdd 	.word	0x08008fdd
 8007f40:	08009060 	.word	0x08009060

08007f44 <__lshift>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	460c      	mov	r4, r1
 8007f4a:	6849      	ldr	r1, [r1, #4]
 8007f4c:	6923      	ldr	r3, [r4, #16]
 8007f4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	4607      	mov	r7, r0
 8007f56:	4691      	mov	r9, r2
 8007f58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f5c:	f108 0601 	add.w	r6, r8, #1
 8007f60:	42b3      	cmp	r3, r6
 8007f62:	db0b      	blt.n	8007f7c <__lshift+0x38>
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff fddb 	bl	8007b20 <_Balloc>
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b948      	cbnz	r0, 8007f82 <__lshift+0x3e>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b2a      	ldr	r3, [pc, #168]	; (800801c <__lshift+0xd8>)
 8007f72:	482b      	ldr	r0, [pc, #172]	; (8008020 <__lshift+0xdc>)
 8007f74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f78:	f000 fa5c 	bl	8008434 <__assert_func>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	e7ee      	b.n	8007f60 <__lshift+0x1c>
 8007f82:	2300      	movs	r3, #0
 8007f84:	f100 0114 	add.w	r1, r0, #20
 8007f88:	f100 0210 	add.w	r2, r0, #16
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	4553      	cmp	r3, sl
 8007f90:	db37      	blt.n	8008002 <__lshift+0xbe>
 8007f92:	6920      	ldr	r0, [r4, #16]
 8007f94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f98:	f104 0314 	add.w	r3, r4, #20
 8007f9c:	f019 091f 	ands.w	r9, r9, #31
 8007fa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fa8:	d02f      	beq.n	800800a <__lshift+0xc6>
 8007faa:	f1c9 0e20 	rsb	lr, r9, #32
 8007fae:	468a      	mov	sl, r1
 8007fb0:	f04f 0c00 	mov.w	ip, #0
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	fa02 f209 	lsl.w	r2, r2, r9
 8007fba:	ea42 020c 	orr.w	r2, r2, ip
 8007fbe:	f84a 2b04 	str.w	r2, [sl], #4
 8007fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fcc:	d8f2      	bhi.n	8007fb4 <__lshift+0x70>
 8007fce:	1b03      	subs	r3, r0, r4
 8007fd0:	3b15      	subs	r3, #21
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	f104 0215 	add.w	r2, r4, #21
 8007fdc:	4290      	cmp	r0, r2
 8007fde:	bf38      	it	cc
 8007fe0:	2304      	movcc	r3, #4
 8007fe2:	f841 c003 	str.w	ip, [r1, r3]
 8007fe6:	f1bc 0f00 	cmp.w	ip, #0
 8007fea:	d001      	beq.n	8007ff0 <__lshift+0xac>
 8007fec:	f108 0602 	add.w	r6, r8, #2
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	612e      	str	r6, [r5, #16]
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f7ff fdd2 	bl	8007ba0 <_Bfree>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	f842 0f04 	str.w	r0, [r2, #4]!
 8008006:	3301      	adds	r3, #1
 8008008:	e7c1      	b.n	8007f8e <__lshift+0x4a>
 800800a:	3904      	subs	r1, #4
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	f841 2f04 	str.w	r2, [r1, #4]!
 8008014:	4298      	cmp	r0, r3
 8008016:	d8f9      	bhi.n	800800c <__lshift+0xc8>
 8008018:	e7ea      	b.n	8007ff0 <__lshift+0xac>
 800801a:	bf00      	nop
 800801c:	0800904f 	.word	0x0800904f
 8008020:	08009060 	.word	0x08009060

08008024 <__mcmp>:
 8008024:	b530      	push	{r4, r5, lr}
 8008026:	6902      	ldr	r2, [r0, #16]
 8008028:	690c      	ldr	r4, [r1, #16]
 800802a:	1b12      	subs	r2, r2, r4
 800802c:	d10e      	bne.n	800804c <__mcmp+0x28>
 800802e:	f100 0314 	add.w	r3, r0, #20
 8008032:	3114      	adds	r1, #20
 8008034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800803c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008044:	42a5      	cmp	r5, r4
 8008046:	d003      	beq.n	8008050 <__mcmp+0x2c>
 8008048:	d305      	bcc.n	8008056 <__mcmp+0x32>
 800804a:	2201      	movs	r2, #1
 800804c:	4610      	mov	r0, r2
 800804e:	bd30      	pop	{r4, r5, pc}
 8008050:	4283      	cmp	r3, r0
 8008052:	d3f3      	bcc.n	800803c <__mcmp+0x18>
 8008054:	e7fa      	b.n	800804c <__mcmp+0x28>
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	e7f7      	b.n	800804c <__mcmp+0x28>

0800805c <__mdiff>:
 800805c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460c      	mov	r4, r1
 8008062:	4606      	mov	r6, r0
 8008064:	4611      	mov	r1, r2
 8008066:	4620      	mov	r0, r4
 8008068:	4690      	mov	r8, r2
 800806a:	f7ff ffdb 	bl	8008024 <__mcmp>
 800806e:	1e05      	subs	r5, r0, #0
 8008070:	d110      	bne.n	8008094 <__mdiff+0x38>
 8008072:	4629      	mov	r1, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fd53 	bl	8007b20 <_Balloc>
 800807a:	b930      	cbnz	r0, 800808a <__mdiff+0x2e>
 800807c:	4b3a      	ldr	r3, [pc, #232]	; (8008168 <__mdiff+0x10c>)
 800807e:	4602      	mov	r2, r0
 8008080:	f240 2132 	movw	r1, #562	; 0x232
 8008084:	4839      	ldr	r0, [pc, #228]	; (800816c <__mdiff+0x110>)
 8008086:	f000 f9d5 	bl	8008434 <__assert_func>
 800808a:	2301      	movs	r3, #1
 800808c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	bfa4      	itt	ge
 8008096:	4643      	movge	r3, r8
 8008098:	46a0      	movge	r8, r4
 800809a:	4630      	mov	r0, r6
 800809c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080a0:	bfa6      	itte	ge
 80080a2:	461c      	movge	r4, r3
 80080a4:	2500      	movge	r5, #0
 80080a6:	2501      	movlt	r5, #1
 80080a8:	f7ff fd3a 	bl	8007b20 <_Balloc>
 80080ac:	b920      	cbnz	r0, 80080b8 <__mdiff+0x5c>
 80080ae:	4b2e      	ldr	r3, [pc, #184]	; (8008168 <__mdiff+0x10c>)
 80080b0:	4602      	mov	r2, r0
 80080b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080b6:	e7e5      	b.n	8008084 <__mdiff+0x28>
 80080b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080bc:	6926      	ldr	r6, [r4, #16]
 80080be:	60c5      	str	r5, [r0, #12]
 80080c0:	f104 0914 	add.w	r9, r4, #20
 80080c4:	f108 0514 	add.w	r5, r8, #20
 80080c8:	f100 0e14 	add.w	lr, r0, #20
 80080cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080d4:	f108 0210 	add.w	r2, r8, #16
 80080d8:	46f2      	mov	sl, lr
 80080da:	2100      	movs	r1, #0
 80080dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80080e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080e4:	fa1f f883 	uxth.w	r8, r3
 80080e8:	fa11 f18b 	uxtah	r1, r1, fp
 80080ec:	0c1b      	lsrs	r3, r3, #16
 80080ee:	eba1 0808 	sub.w	r8, r1, r8
 80080f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080fa:	fa1f f888 	uxth.w	r8, r8
 80080fe:	1419      	asrs	r1, r3, #16
 8008100:	454e      	cmp	r6, r9
 8008102:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008106:	f84a 3b04 	str.w	r3, [sl], #4
 800810a:	d8e7      	bhi.n	80080dc <__mdiff+0x80>
 800810c:	1b33      	subs	r3, r6, r4
 800810e:	3b15      	subs	r3, #21
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	3304      	adds	r3, #4
 8008116:	3415      	adds	r4, #21
 8008118:	42a6      	cmp	r6, r4
 800811a:	bf38      	it	cc
 800811c:	2304      	movcc	r3, #4
 800811e:	441d      	add	r5, r3
 8008120:	4473      	add	r3, lr
 8008122:	469e      	mov	lr, r3
 8008124:	462e      	mov	r6, r5
 8008126:	4566      	cmp	r6, ip
 8008128:	d30e      	bcc.n	8008148 <__mdiff+0xec>
 800812a:	f10c 0203 	add.w	r2, ip, #3
 800812e:	1b52      	subs	r2, r2, r5
 8008130:	f022 0203 	bic.w	r2, r2, #3
 8008134:	3d03      	subs	r5, #3
 8008136:	45ac      	cmp	ip, r5
 8008138:	bf38      	it	cc
 800813a:	2200      	movcc	r2, #0
 800813c:	441a      	add	r2, r3
 800813e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008142:	b17b      	cbz	r3, 8008164 <__mdiff+0x108>
 8008144:	6107      	str	r7, [r0, #16]
 8008146:	e7a3      	b.n	8008090 <__mdiff+0x34>
 8008148:	f856 8b04 	ldr.w	r8, [r6], #4
 800814c:	fa11 f288 	uxtah	r2, r1, r8
 8008150:	1414      	asrs	r4, r2, #16
 8008152:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008156:	b292      	uxth	r2, r2
 8008158:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800815c:	f84e 2b04 	str.w	r2, [lr], #4
 8008160:	1421      	asrs	r1, r4, #16
 8008162:	e7e0      	b.n	8008126 <__mdiff+0xca>
 8008164:	3f01      	subs	r7, #1
 8008166:	e7ea      	b.n	800813e <__mdiff+0xe2>
 8008168:	0800904f 	.word	0x0800904f
 800816c:	08009060 	.word	0x08009060

08008170 <__d2b>:
 8008170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4689      	mov	r9, r1
 8008176:	2101      	movs	r1, #1
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	4690      	mov	r8, r2
 800817e:	f7ff fccf 	bl	8007b20 <_Balloc>
 8008182:	4604      	mov	r4, r0
 8008184:	b930      	cbnz	r0, 8008194 <__d2b+0x24>
 8008186:	4602      	mov	r2, r0
 8008188:	4b25      	ldr	r3, [pc, #148]	; (8008220 <__d2b+0xb0>)
 800818a:	4826      	ldr	r0, [pc, #152]	; (8008224 <__d2b+0xb4>)
 800818c:	f240 310a 	movw	r1, #778	; 0x30a
 8008190:	f000 f950 	bl	8008434 <__assert_func>
 8008194:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800819c:	bb35      	cbnz	r5, 80081ec <__d2b+0x7c>
 800819e:	2e00      	cmp	r6, #0
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	d028      	beq.n	80081f6 <__d2b+0x86>
 80081a4:	4668      	mov	r0, sp
 80081a6:	9600      	str	r6, [sp, #0]
 80081a8:	f7ff fd82 	bl	8007cb0 <__lo0bits>
 80081ac:	9900      	ldr	r1, [sp, #0]
 80081ae:	b300      	cbz	r0, 80081f2 <__d2b+0x82>
 80081b0:	9a01      	ldr	r2, [sp, #4]
 80081b2:	f1c0 0320 	rsb	r3, r0, #32
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	430b      	orrs	r3, r1
 80081bc:	40c2      	lsrs	r2, r0
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	61a3      	str	r3, [r4, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf14      	ite	ne
 80081ca:	2202      	movne	r2, #2
 80081cc:	2201      	moveq	r2, #1
 80081ce:	6122      	str	r2, [r4, #16]
 80081d0:	b1d5      	cbz	r5, 8008208 <__d2b+0x98>
 80081d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80081d6:	4405      	add	r5, r0
 80081d8:	f8c9 5000 	str.w	r5, [r9]
 80081dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081e0:	f8c8 0000 	str.w	r0, [r8]
 80081e4:	4620      	mov	r0, r4
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081f0:	e7d5      	b.n	800819e <__d2b+0x2e>
 80081f2:	6161      	str	r1, [r4, #20]
 80081f4:	e7e5      	b.n	80081c2 <__d2b+0x52>
 80081f6:	a801      	add	r0, sp, #4
 80081f8:	f7ff fd5a 	bl	8007cb0 <__lo0bits>
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	2201      	movs	r2, #1
 8008202:	6122      	str	r2, [r4, #16]
 8008204:	3020      	adds	r0, #32
 8008206:	e7e3      	b.n	80081d0 <__d2b+0x60>
 8008208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800820c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008210:	f8c9 0000 	str.w	r0, [r9]
 8008214:	6918      	ldr	r0, [r3, #16]
 8008216:	f7ff fd2b 	bl	8007c70 <__hi0bits>
 800821a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800821e:	e7df      	b.n	80081e0 <__d2b+0x70>
 8008220:	0800904f 	.word	0x0800904f
 8008224:	08009060 	.word	0x08009060

08008228 <_calloc_r>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	fba1 2402 	umull	r2, r4, r1, r2
 800822e:	b94c      	cbnz	r4, 8008244 <_calloc_r+0x1c>
 8008230:	4611      	mov	r1, r2
 8008232:	9201      	str	r2, [sp, #4]
 8008234:	f000 f87a 	bl	800832c <_malloc_r>
 8008238:	9a01      	ldr	r2, [sp, #4]
 800823a:	4605      	mov	r5, r0
 800823c:	b930      	cbnz	r0, 800824c <_calloc_r+0x24>
 800823e:	4628      	mov	r0, r5
 8008240:	b003      	add	sp, #12
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	220c      	movs	r2, #12
 8008246:	6002      	str	r2, [r0, #0]
 8008248:	2500      	movs	r5, #0
 800824a:	e7f8      	b.n	800823e <_calloc_r+0x16>
 800824c:	4621      	mov	r1, r4
 800824e:	f7fe f961 	bl	8006514 <memset>
 8008252:	e7f4      	b.n	800823e <_calloc_r+0x16>

08008254 <_free_r>:
 8008254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	d044      	beq.n	80082e4 <_free_r+0x90>
 800825a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f1a1 0404 	sub.w	r4, r1, #4
 8008266:	bfb8      	it	lt
 8008268:	18e4      	addlt	r4, r4, r3
 800826a:	f000 f925 	bl	80084b8 <__malloc_lock>
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <_free_r+0x94>)
 8008270:	9801      	ldr	r0, [sp, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	b933      	cbnz	r3, 8008284 <_free_r+0x30>
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008280:	f000 b920 	b.w	80084c4 <__malloc_unlock>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d908      	bls.n	800829a <_free_r+0x46>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	1961      	adds	r1, r4, r5
 800828c:	428b      	cmp	r3, r1
 800828e:	bf01      	itttt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	1949      	addeq	r1, r1, r5
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	e7ed      	b.n	8008276 <_free_r+0x22>
 800829a:	461a      	mov	r2, r3
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	b10b      	cbz	r3, 80082a4 <_free_r+0x50>
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	d9fa      	bls.n	800829a <_free_r+0x46>
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	1855      	adds	r5, r2, r1
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d10b      	bne.n	80082c4 <_free_r+0x70>
 80082ac:	6824      	ldr	r4, [r4, #0]
 80082ae:	4421      	add	r1, r4
 80082b0:	1854      	adds	r4, r2, r1
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	6011      	str	r1, [r2, #0]
 80082b6:	d1e0      	bne.n	800827a <_free_r+0x26>
 80082b8:	681c      	ldr	r4, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	6053      	str	r3, [r2, #4]
 80082be:	4421      	add	r1, r4
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	e7da      	b.n	800827a <_free_r+0x26>
 80082c4:	d902      	bls.n	80082cc <_free_r+0x78>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	e7d6      	b.n	800827a <_free_r+0x26>
 80082cc:	6825      	ldr	r5, [r4, #0]
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf04      	itt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	bf04      	itt	eq
 80082dc:	1949      	addeq	r1, r1, r5
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	6054      	str	r4, [r2, #4]
 80082e2:	e7ca      	b.n	800827a <_free_r+0x26>
 80082e4:	b003      	add	sp, #12
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	20000444 	.word	0x20000444

080082ec <sbrk_aligned>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	4e0e      	ldr	r6, [pc, #56]	; (8008328 <sbrk_aligned+0x3c>)
 80082f0:	460c      	mov	r4, r1
 80082f2:	6831      	ldr	r1, [r6, #0]
 80082f4:	4605      	mov	r5, r0
 80082f6:	b911      	cbnz	r1, 80082fe <sbrk_aligned+0x12>
 80082f8:	f000 f88c 	bl	8008414 <_sbrk_r>
 80082fc:	6030      	str	r0, [r6, #0]
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f887 	bl	8008414 <_sbrk_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d00a      	beq.n	8008320 <sbrk_aligned+0x34>
 800830a:	1cc4      	adds	r4, r0, #3
 800830c:	f024 0403 	bic.w	r4, r4, #3
 8008310:	42a0      	cmp	r0, r4
 8008312:	d007      	beq.n	8008324 <sbrk_aligned+0x38>
 8008314:	1a21      	subs	r1, r4, r0
 8008316:	4628      	mov	r0, r5
 8008318:	f000 f87c 	bl	8008414 <_sbrk_r>
 800831c:	3001      	adds	r0, #1
 800831e:	d101      	bne.n	8008324 <sbrk_aligned+0x38>
 8008320:	f04f 34ff 	mov.w	r4, #4294967295
 8008324:	4620      	mov	r0, r4
 8008326:	bd70      	pop	{r4, r5, r6, pc}
 8008328:	20000448 	.word	0x20000448

0800832c <_malloc_r>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	1ccd      	adds	r5, r1, #3
 8008332:	f025 0503 	bic.w	r5, r5, #3
 8008336:	3508      	adds	r5, #8
 8008338:	2d0c      	cmp	r5, #12
 800833a:	bf38      	it	cc
 800833c:	250c      	movcc	r5, #12
 800833e:	2d00      	cmp	r5, #0
 8008340:	4607      	mov	r7, r0
 8008342:	db01      	blt.n	8008348 <_malloc_r+0x1c>
 8008344:	42a9      	cmp	r1, r5
 8008346:	d905      	bls.n	8008354 <_malloc_r+0x28>
 8008348:	230c      	movs	r3, #12
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	2600      	movs	r6, #0
 800834e:	4630      	mov	r0, r6
 8008350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008354:	4e2e      	ldr	r6, [pc, #184]	; (8008410 <_malloc_r+0xe4>)
 8008356:	f000 f8af 	bl	80084b8 <__malloc_lock>
 800835a:	6833      	ldr	r3, [r6, #0]
 800835c:	461c      	mov	r4, r3
 800835e:	bb34      	cbnz	r4, 80083ae <_malloc_r+0x82>
 8008360:	4629      	mov	r1, r5
 8008362:	4638      	mov	r0, r7
 8008364:	f7ff ffc2 	bl	80082ec <sbrk_aligned>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	4604      	mov	r4, r0
 800836c:	d14d      	bne.n	800840a <_malloc_r+0xde>
 800836e:	6834      	ldr	r4, [r6, #0]
 8008370:	4626      	mov	r6, r4
 8008372:	2e00      	cmp	r6, #0
 8008374:	d140      	bne.n	80083f8 <_malloc_r+0xcc>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	4631      	mov	r1, r6
 800837a:	4638      	mov	r0, r7
 800837c:	eb04 0803 	add.w	r8, r4, r3
 8008380:	f000 f848 	bl	8008414 <_sbrk_r>
 8008384:	4580      	cmp	r8, r0
 8008386:	d13a      	bne.n	80083fe <_malloc_r+0xd2>
 8008388:	6821      	ldr	r1, [r4, #0]
 800838a:	3503      	adds	r5, #3
 800838c:	1a6d      	subs	r5, r5, r1
 800838e:	f025 0503 	bic.w	r5, r5, #3
 8008392:	3508      	adds	r5, #8
 8008394:	2d0c      	cmp	r5, #12
 8008396:	bf38      	it	cc
 8008398:	250c      	movcc	r5, #12
 800839a:	4629      	mov	r1, r5
 800839c:	4638      	mov	r0, r7
 800839e:	f7ff ffa5 	bl	80082ec <sbrk_aligned>
 80083a2:	3001      	adds	r0, #1
 80083a4:	d02b      	beq.n	80083fe <_malloc_r+0xd2>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	442b      	add	r3, r5
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	e00e      	b.n	80083cc <_malloc_r+0xa0>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	1b52      	subs	r2, r2, r5
 80083b2:	d41e      	bmi.n	80083f2 <_malloc_r+0xc6>
 80083b4:	2a0b      	cmp	r2, #11
 80083b6:	d916      	bls.n	80083e6 <_malloc_r+0xba>
 80083b8:	1961      	adds	r1, r4, r5
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	6025      	str	r5, [r4, #0]
 80083be:	bf18      	it	ne
 80083c0:	6059      	strne	r1, [r3, #4]
 80083c2:	6863      	ldr	r3, [r4, #4]
 80083c4:	bf08      	it	eq
 80083c6:	6031      	streq	r1, [r6, #0]
 80083c8:	5162      	str	r2, [r4, r5]
 80083ca:	604b      	str	r3, [r1, #4]
 80083cc:	4638      	mov	r0, r7
 80083ce:	f104 060b 	add.w	r6, r4, #11
 80083d2:	f000 f877 	bl	80084c4 <__malloc_unlock>
 80083d6:	f026 0607 	bic.w	r6, r6, #7
 80083da:	1d23      	adds	r3, r4, #4
 80083dc:	1af2      	subs	r2, r6, r3
 80083de:	d0b6      	beq.n	800834e <_malloc_r+0x22>
 80083e0:	1b9b      	subs	r3, r3, r6
 80083e2:	50a3      	str	r3, [r4, r2]
 80083e4:	e7b3      	b.n	800834e <_malloc_r+0x22>
 80083e6:	6862      	ldr	r2, [r4, #4]
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	bf0c      	ite	eq
 80083ec:	6032      	streq	r2, [r6, #0]
 80083ee:	605a      	strne	r2, [r3, #4]
 80083f0:	e7ec      	b.n	80083cc <_malloc_r+0xa0>
 80083f2:	4623      	mov	r3, r4
 80083f4:	6864      	ldr	r4, [r4, #4]
 80083f6:	e7b2      	b.n	800835e <_malloc_r+0x32>
 80083f8:	4634      	mov	r4, r6
 80083fa:	6876      	ldr	r6, [r6, #4]
 80083fc:	e7b9      	b.n	8008372 <_malloc_r+0x46>
 80083fe:	230c      	movs	r3, #12
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4638      	mov	r0, r7
 8008404:	f000 f85e 	bl	80084c4 <__malloc_unlock>
 8008408:	e7a1      	b.n	800834e <_malloc_r+0x22>
 800840a:	6025      	str	r5, [r4, #0]
 800840c:	e7de      	b.n	80083cc <_malloc_r+0xa0>
 800840e:	bf00      	nop
 8008410:	20000444 	.word	0x20000444

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f9 f9d0 	bl	80017c4 <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	2000044c 	.word	0x2000044c

08008434 <__assert_func>:
 8008434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008436:	4614      	mov	r4, r2
 8008438:	461a      	mov	r2, r3
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <__assert_func+0x2c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4605      	mov	r5, r0
 8008440:	68d8      	ldr	r0, [r3, #12]
 8008442:	b14c      	cbz	r4, 8008458 <__assert_func+0x24>
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <__assert_func+0x30>)
 8008446:	9100      	str	r1, [sp, #0]
 8008448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800844c:	4906      	ldr	r1, [pc, #24]	; (8008468 <__assert_func+0x34>)
 800844e:	462b      	mov	r3, r5
 8008450:	f000 f80e 	bl	8008470 <fiprintf>
 8008454:	f000 fa64 	bl	8008920 <abort>
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <__assert_func+0x38>)
 800845a:	461c      	mov	r4, r3
 800845c:	e7f3      	b.n	8008446 <__assert_func+0x12>
 800845e:	bf00      	nop
 8008460:	2000000c 	.word	0x2000000c
 8008464:	080091bc 	.word	0x080091bc
 8008468:	080091c9 	.word	0x080091c9
 800846c:	080091f7 	.word	0x080091f7

08008470 <fiprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b503      	push	{r0, r1, lr}
 8008474:	4601      	mov	r1, r0
 8008476:	ab03      	add	r3, sp, #12
 8008478:	4805      	ldr	r0, [pc, #20]	; (8008490 <fiprintf+0x20>)
 800847a:	f853 2b04 	ldr.w	r2, [r3], #4
 800847e:	6800      	ldr	r0, [r0, #0]
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	f000 f84f 	bl	8008524 <_vfiprintf_r>
 8008486:	b002      	add	sp, #8
 8008488:	f85d eb04 	ldr.w	lr, [sp], #4
 800848c:	b003      	add	sp, #12
 800848e:	4770      	bx	lr
 8008490:	2000000c 	.word	0x2000000c

08008494 <__ascii_mbtowc>:
 8008494:	b082      	sub	sp, #8
 8008496:	b901      	cbnz	r1, 800849a <__ascii_mbtowc+0x6>
 8008498:	a901      	add	r1, sp, #4
 800849a:	b142      	cbz	r2, 80084ae <__ascii_mbtowc+0x1a>
 800849c:	b14b      	cbz	r3, 80084b2 <__ascii_mbtowc+0x1e>
 800849e:	7813      	ldrb	r3, [r2, #0]
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	1e10      	subs	r0, r2, #0
 80084a6:	bf18      	it	ne
 80084a8:	2001      	movne	r0, #1
 80084aa:	b002      	add	sp, #8
 80084ac:	4770      	bx	lr
 80084ae:	4610      	mov	r0, r2
 80084b0:	e7fb      	b.n	80084aa <__ascii_mbtowc+0x16>
 80084b2:	f06f 0001 	mvn.w	r0, #1
 80084b6:	e7f8      	b.n	80084aa <__ascii_mbtowc+0x16>

080084b8 <__malloc_lock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__malloc_lock+0x8>)
 80084ba:	f000 bbf1 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20000450 	.word	0x20000450

080084c4 <__malloc_unlock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__malloc_unlock+0x8>)
 80084c6:	f000 bbec 	b.w	8008ca2 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20000450 	.word	0x20000450

080084d0 <__sfputc_r>:
 80084d0:	6893      	ldr	r3, [r2, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	b410      	push	{r4}
 80084d8:	6093      	str	r3, [r2, #8]
 80084da:	da08      	bge.n	80084ee <__sfputc_r+0x1e>
 80084dc:	6994      	ldr	r4, [r2, #24]
 80084de:	42a3      	cmp	r3, r4
 80084e0:	db01      	blt.n	80084e6 <__sfputc_r+0x16>
 80084e2:	290a      	cmp	r1, #10
 80084e4:	d103      	bne.n	80084ee <__sfputc_r+0x1e>
 80084e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ea:	f000 b94b 	b.w	8008784 <__swbuf_r>
 80084ee:	6813      	ldr	r3, [r2, #0]
 80084f0:	1c58      	adds	r0, r3, #1
 80084f2:	6010      	str	r0, [r2, #0]
 80084f4:	7019      	strb	r1, [r3, #0]
 80084f6:	4608      	mov	r0, r1
 80084f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <__sfputs_r>:
 80084fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	4614      	mov	r4, r2
 8008506:	18d5      	adds	r5, r2, r3
 8008508:	42ac      	cmp	r4, r5
 800850a:	d101      	bne.n	8008510 <__sfputs_r+0x12>
 800850c:	2000      	movs	r0, #0
 800850e:	e007      	b.n	8008520 <__sfputs_r+0x22>
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	463a      	mov	r2, r7
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ffda 	bl	80084d0 <__sfputc_r>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d1f3      	bne.n	8008508 <__sfputs_r+0xa>
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008524 <_vfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	460d      	mov	r5, r1
 800852a:	b09d      	sub	sp, #116	; 0x74
 800852c:	4614      	mov	r4, r2
 800852e:	4698      	mov	r8, r3
 8008530:	4606      	mov	r6, r0
 8008532:	b118      	cbz	r0, 800853c <_vfiprintf_r+0x18>
 8008534:	6983      	ldr	r3, [r0, #24]
 8008536:	b90b      	cbnz	r3, 800853c <_vfiprintf_r+0x18>
 8008538:	f000 fb14 	bl	8008b64 <__sinit>
 800853c:	4b89      	ldr	r3, [pc, #548]	; (8008764 <_vfiprintf_r+0x240>)
 800853e:	429d      	cmp	r5, r3
 8008540:	d11b      	bne.n	800857a <_vfiprintf_r+0x56>
 8008542:	6875      	ldr	r5, [r6, #4]
 8008544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d405      	bmi.n	8008556 <_vfiprintf_r+0x32>
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	059a      	lsls	r2, r3, #22
 800854e:	d402      	bmi.n	8008556 <_vfiprintf_r+0x32>
 8008550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008552:	f000 fba5 	bl	8008ca0 <__retarget_lock_acquire_recursive>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	071b      	lsls	r3, r3, #28
 800855a:	d501      	bpl.n	8008560 <_vfiprintf_r+0x3c>
 800855c:	692b      	ldr	r3, [r5, #16]
 800855e:	b9eb      	cbnz	r3, 800859c <_vfiprintf_r+0x78>
 8008560:	4629      	mov	r1, r5
 8008562:	4630      	mov	r0, r6
 8008564:	f000 f96e 	bl	8008844 <__swsetup_r>
 8008568:	b1c0      	cbz	r0, 800859c <_vfiprintf_r+0x78>
 800856a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800856c:	07dc      	lsls	r4, r3, #31
 800856e:	d50e      	bpl.n	800858e <_vfiprintf_r+0x6a>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b01d      	add	sp, #116	; 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	4b7b      	ldr	r3, [pc, #492]	; (8008768 <_vfiprintf_r+0x244>)
 800857c:	429d      	cmp	r5, r3
 800857e:	d101      	bne.n	8008584 <_vfiprintf_r+0x60>
 8008580:	68b5      	ldr	r5, [r6, #8]
 8008582:	e7df      	b.n	8008544 <_vfiprintf_r+0x20>
 8008584:	4b79      	ldr	r3, [pc, #484]	; (800876c <_vfiprintf_r+0x248>)
 8008586:	429d      	cmp	r5, r3
 8008588:	bf08      	it	eq
 800858a:	68f5      	ldreq	r5, [r6, #12]
 800858c:	e7da      	b.n	8008544 <_vfiprintf_r+0x20>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	0598      	lsls	r0, r3, #22
 8008592:	d4ed      	bmi.n	8008570 <_vfiprintf_r+0x4c>
 8008594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008596:	f000 fb84 	bl	8008ca2 <__retarget_lock_release_recursive>
 800859a:	e7e9      	b.n	8008570 <_vfiprintf_r+0x4c>
 800859c:	2300      	movs	r3, #0
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	2320      	movs	r3, #32
 80085a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085aa:	2330      	movs	r3, #48	; 0x30
 80085ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008770 <_vfiprintf_r+0x24c>
 80085b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085b4:	f04f 0901 	mov.w	r9, #1
 80085b8:	4623      	mov	r3, r4
 80085ba:	469a      	mov	sl, r3
 80085bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c0:	b10a      	cbz	r2, 80085c6 <_vfiprintf_r+0xa2>
 80085c2:	2a25      	cmp	r2, #37	; 0x25
 80085c4:	d1f9      	bne.n	80085ba <_vfiprintf_r+0x96>
 80085c6:	ebba 0b04 	subs.w	fp, sl, r4
 80085ca:	d00b      	beq.n	80085e4 <_vfiprintf_r+0xc0>
 80085cc:	465b      	mov	r3, fp
 80085ce:	4622      	mov	r2, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff ff93 	bl	80084fe <__sfputs_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	f000 80aa 	beq.w	8008732 <_vfiprintf_r+0x20e>
 80085de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e0:	445a      	add	r2, fp
 80085e2:	9209      	str	r2, [sp, #36]	; 0x24
 80085e4:	f89a 3000 	ldrb.w	r3, [sl]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80a2 	beq.w	8008732 <_vfiprintf_r+0x20e>
 80085ee:	2300      	movs	r3, #0
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295
 80085f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f8:	f10a 0a01 	add.w	sl, sl, #1
 80085fc:	9304      	str	r3, [sp, #16]
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008604:	931a      	str	r3, [sp, #104]	; 0x68
 8008606:	4654      	mov	r4, sl
 8008608:	2205      	movs	r2, #5
 800860a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860e:	4858      	ldr	r0, [pc, #352]	; (8008770 <_vfiprintf_r+0x24c>)
 8008610:	f7f7 fde6 	bl	80001e0 <memchr>
 8008614:	9a04      	ldr	r2, [sp, #16]
 8008616:	b9d8      	cbnz	r0, 8008650 <_vfiprintf_r+0x12c>
 8008618:	06d1      	lsls	r1, r2, #27
 800861a:	bf44      	itt	mi
 800861c:	2320      	movmi	r3, #32
 800861e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008622:	0713      	lsls	r3, r2, #28
 8008624:	bf44      	itt	mi
 8008626:	232b      	movmi	r3, #43	; 0x2b
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800862c:	f89a 3000 	ldrb.w	r3, [sl]
 8008630:	2b2a      	cmp	r3, #42	; 0x2a
 8008632:	d015      	beq.n	8008660 <_vfiprintf_r+0x13c>
 8008634:	9a07      	ldr	r2, [sp, #28]
 8008636:	4654      	mov	r4, sl
 8008638:	2000      	movs	r0, #0
 800863a:	f04f 0c0a 	mov.w	ip, #10
 800863e:	4621      	mov	r1, r4
 8008640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008644:	3b30      	subs	r3, #48	; 0x30
 8008646:	2b09      	cmp	r3, #9
 8008648:	d94e      	bls.n	80086e8 <_vfiprintf_r+0x1c4>
 800864a:	b1b0      	cbz	r0, 800867a <_vfiprintf_r+0x156>
 800864c:	9207      	str	r2, [sp, #28]
 800864e:	e014      	b.n	800867a <_vfiprintf_r+0x156>
 8008650:	eba0 0308 	sub.w	r3, r0, r8
 8008654:	fa09 f303 	lsl.w	r3, r9, r3
 8008658:	4313      	orrs	r3, r2
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	46a2      	mov	sl, r4
 800865e:	e7d2      	b.n	8008606 <_vfiprintf_r+0xe2>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	1d19      	adds	r1, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	9103      	str	r1, [sp, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	bfbb      	ittet	lt
 800866c:	425b      	neglt	r3, r3
 800866e:	f042 0202 	orrlt.w	r2, r2, #2
 8008672:	9307      	strge	r3, [sp, #28]
 8008674:	9307      	strlt	r3, [sp, #28]
 8008676:	bfb8      	it	lt
 8008678:	9204      	strlt	r2, [sp, #16]
 800867a:	7823      	ldrb	r3, [r4, #0]
 800867c:	2b2e      	cmp	r3, #46	; 0x2e
 800867e:	d10c      	bne.n	800869a <_vfiprintf_r+0x176>
 8008680:	7863      	ldrb	r3, [r4, #1]
 8008682:	2b2a      	cmp	r3, #42	; 0x2a
 8008684:	d135      	bne.n	80086f2 <_vfiprintf_r+0x1ce>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d1a      	adds	r2, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9203      	str	r2, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfb8      	it	lt
 8008692:	f04f 33ff 	movlt.w	r3, #4294967295
 8008696:	3402      	adds	r4, #2
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008780 <_vfiprintf_r+0x25c>
 800869e:	7821      	ldrb	r1, [r4, #0]
 80086a0:	2203      	movs	r2, #3
 80086a2:	4650      	mov	r0, sl
 80086a4:	f7f7 fd9c 	bl	80001e0 <memchr>
 80086a8:	b140      	cbz	r0, 80086bc <_vfiprintf_r+0x198>
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	eba0 000a 	sub.w	r0, r0, sl
 80086b0:	fa03 f000 	lsl.w	r0, r3, r0
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	4303      	orrs	r3, r0
 80086b8:	3401      	adds	r4, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c0:	482c      	ldr	r0, [pc, #176]	; (8008774 <_vfiprintf_r+0x250>)
 80086c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086c6:	2206      	movs	r2, #6
 80086c8:	f7f7 fd8a 	bl	80001e0 <memchr>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d03f      	beq.n	8008750 <_vfiprintf_r+0x22c>
 80086d0:	4b29      	ldr	r3, [pc, #164]	; (8008778 <_vfiprintf_r+0x254>)
 80086d2:	bb1b      	cbnz	r3, 800871c <_vfiprintf_r+0x1f8>
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	3307      	adds	r3, #7
 80086d8:	f023 0307 	bic.w	r3, r3, #7
 80086dc:	3308      	adds	r3, #8
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	443b      	add	r3, r7
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	e767      	b.n	80085b8 <_vfiprintf_r+0x94>
 80086e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ec:	460c      	mov	r4, r1
 80086ee:	2001      	movs	r0, #1
 80086f0:	e7a5      	b.n	800863e <_vfiprintf_r+0x11a>
 80086f2:	2300      	movs	r3, #0
 80086f4:	3401      	adds	r4, #1
 80086f6:	9305      	str	r3, [sp, #20]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f04f 0c0a 	mov.w	ip, #10
 80086fe:	4620      	mov	r0, r4
 8008700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008704:	3a30      	subs	r2, #48	; 0x30
 8008706:	2a09      	cmp	r2, #9
 8008708:	d903      	bls.n	8008712 <_vfiprintf_r+0x1ee>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0c5      	beq.n	800869a <_vfiprintf_r+0x176>
 800870e:	9105      	str	r1, [sp, #20]
 8008710:	e7c3      	b.n	800869a <_vfiprintf_r+0x176>
 8008712:	fb0c 2101 	mla	r1, ip, r1, r2
 8008716:	4604      	mov	r4, r0
 8008718:	2301      	movs	r3, #1
 800871a:	e7f0      	b.n	80086fe <_vfiprintf_r+0x1da>
 800871c:	ab03      	add	r3, sp, #12
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	462a      	mov	r2, r5
 8008722:	4b16      	ldr	r3, [pc, #88]	; (800877c <_vfiprintf_r+0x258>)
 8008724:	a904      	add	r1, sp, #16
 8008726:	4630      	mov	r0, r6
 8008728:	f7fd ff9c 	bl	8006664 <_printf_float>
 800872c:	4607      	mov	r7, r0
 800872e:	1c78      	adds	r0, r7, #1
 8008730:	d1d6      	bne.n	80086e0 <_vfiprintf_r+0x1bc>
 8008732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008734:	07d9      	lsls	r1, r3, #31
 8008736:	d405      	bmi.n	8008744 <_vfiprintf_r+0x220>
 8008738:	89ab      	ldrh	r3, [r5, #12]
 800873a:	059a      	lsls	r2, r3, #22
 800873c:	d402      	bmi.n	8008744 <_vfiprintf_r+0x220>
 800873e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008740:	f000 faaf 	bl	8008ca2 <__retarget_lock_release_recursive>
 8008744:	89ab      	ldrh	r3, [r5, #12]
 8008746:	065b      	lsls	r3, r3, #25
 8008748:	f53f af12 	bmi.w	8008570 <_vfiprintf_r+0x4c>
 800874c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800874e:	e711      	b.n	8008574 <_vfiprintf_r+0x50>
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	462a      	mov	r2, r5
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <_vfiprintf_r+0x258>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4630      	mov	r0, r6
 800875c:	f7fe fa26 	bl	8006bac <_printf_i>
 8008760:	e7e4      	b.n	800872c <_vfiprintf_r+0x208>
 8008762:	bf00      	nop
 8008764:	08009334 	.word	0x08009334
 8008768:	08009354 	.word	0x08009354
 800876c:	08009314 	.word	0x08009314
 8008770:	08009202 	.word	0x08009202
 8008774:	0800920c 	.word	0x0800920c
 8008778:	08006665 	.word	0x08006665
 800877c:	080084ff 	.word	0x080084ff
 8008780:	08009208 	.word	0x08009208

08008784 <__swbuf_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	460e      	mov	r6, r1
 8008788:	4614      	mov	r4, r2
 800878a:	4605      	mov	r5, r0
 800878c:	b118      	cbz	r0, 8008796 <__swbuf_r+0x12>
 800878e:	6983      	ldr	r3, [r0, #24]
 8008790:	b90b      	cbnz	r3, 8008796 <__swbuf_r+0x12>
 8008792:	f000 f9e7 	bl	8008b64 <__sinit>
 8008796:	4b21      	ldr	r3, [pc, #132]	; (800881c <__swbuf_r+0x98>)
 8008798:	429c      	cmp	r4, r3
 800879a:	d12b      	bne.n	80087f4 <__swbuf_r+0x70>
 800879c:	686c      	ldr	r4, [r5, #4]
 800879e:	69a3      	ldr	r3, [r4, #24]
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	071a      	lsls	r2, r3, #28
 80087a6:	d52f      	bpl.n	8008808 <__swbuf_r+0x84>
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	b36b      	cbz	r3, 8008808 <__swbuf_r+0x84>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	6820      	ldr	r0, [r4, #0]
 80087b0:	1ac0      	subs	r0, r0, r3
 80087b2:	6963      	ldr	r3, [r4, #20]
 80087b4:	b2f6      	uxtb	r6, r6
 80087b6:	4283      	cmp	r3, r0
 80087b8:	4637      	mov	r7, r6
 80087ba:	dc04      	bgt.n	80087c6 <__swbuf_r+0x42>
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f93c 	bl	8008a3c <_fflush_r>
 80087c4:	bb30      	cbnz	r0, 8008814 <__swbuf_r+0x90>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	60a3      	str	r3, [r4, #8]
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	701e      	strb	r6, [r3, #0]
 80087d4:	6963      	ldr	r3, [r4, #20]
 80087d6:	3001      	adds	r0, #1
 80087d8:	4283      	cmp	r3, r0
 80087da:	d004      	beq.n	80087e6 <__swbuf_r+0x62>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	07db      	lsls	r3, r3, #31
 80087e0:	d506      	bpl.n	80087f0 <__swbuf_r+0x6c>
 80087e2:	2e0a      	cmp	r6, #10
 80087e4:	d104      	bne.n	80087f0 <__swbuf_r+0x6c>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 f927 	bl	8008a3c <_fflush_r>
 80087ee:	b988      	cbnz	r0, 8008814 <__swbuf_r+0x90>
 80087f0:	4638      	mov	r0, r7
 80087f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <__swbuf_r+0x9c>)
 80087f6:	429c      	cmp	r4, r3
 80087f8:	d101      	bne.n	80087fe <__swbuf_r+0x7a>
 80087fa:	68ac      	ldr	r4, [r5, #8]
 80087fc:	e7cf      	b.n	800879e <__swbuf_r+0x1a>
 80087fe:	4b09      	ldr	r3, [pc, #36]	; (8008824 <__swbuf_r+0xa0>)
 8008800:	429c      	cmp	r4, r3
 8008802:	bf08      	it	eq
 8008804:	68ec      	ldreq	r4, [r5, #12]
 8008806:	e7ca      	b.n	800879e <__swbuf_r+0x1a>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f81a 	bl	8008844 <__swsetup_r>
 8008810:	2800      	cmp	r0, #0
 8008812:	d0cb      	beq.n	80087ac <__swbuf_r+0x28>
 8008814:	f04f 37ff 	mov.w	r7, #4294967295
 8008818:	e7ea      	b.n	80087f0 <__swbuf_r+0x6c>
 800881a:	bf00      	nop
 800881c:	08009334 	.word	0x08009334
 8008820:	08009354 	.word	0x08009354
 8008824:	08009314 	.word	0x08009314

08008828 <__ascii_wctomb>:
 8008828:	b149      	cbz	r1, 800883e <__ascii_wctomb+0x16>
 800882a:	2aff      	cmp	r2, #255	; 0xff
 800882c:	bf85      	ittet	hi
 800882e:	238a      	movhi	r3, #138	; 0x8a
 8008830:	6003      	strhi	r3, [r0, #0]
 8008832:	700a      	strbls	r2, [r1, #0]
 8008834:	f04f 30ff 	movhi.w	r0, #4294967295
 8008838:	bf98      	it	ls
 800883a:	2001      	movls	r0, #1
 800883c:	4770      	bx	lr
 800883e:	4608      	mov	r0, r1
 8008840:	4770      	bx	lr
	...

08008844 <__swsetup_r>:
 8008844:	4b32      	ldr	r3, [pc, #200]	; (8008910 <__swsetup_r+0xcc>)
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	681d      	ldr	r5, [r3, #0]
 800884a:	4606      	mov	r6, r0
 800884c:	460c      	mov	r4, r1
 800884e:	b125      	cbz	r5, 800885a <__swsetup_r+0x16>
 8008850:	69ab      	ldr	r3, [r5, #24]
 8008852:	b913      	cbnz	r3, 800885a <__swsetup_r+0x16>
 8008854:	4628      	mov	r0, r5
 8008856:	f000 f985 	bl	8008b64 <__sinit>
 800885a:	4b2e      	ldr	r3, [pc, #184]	; (8008914 <__swsetup_r+0xd0>)
 800885c:	429c      	cmp	r4, r3
 800885e:	d10f      	bne.n	8008880 <__swsetup_r+0x3c>
 8008860:	686c      	ldr	r4, [r5, #4]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008868:	0719      	lsls	r1, r3, #28
 800886a:	d42c      	bmi.n	80088c6 <__swsetup_r+0x82>
 800886c:	06dd      	lsls	r5, r3, #27
 800886e:	d411      	bmi.n	8008894 <__swsetup_r+0x50>
 8008870:	2309      	movs	r3, #9
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295
 800887e:	e03e      	b.n	80088fe <__swsetup_r+0xba>
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <__swsetup_r+0xd4>)
 8008882:	429c      	cmp	r4, r3
 8008884:	d101      	bne.n	800888a <__swsetup_r+0x46>
 8008886:	68ac      	ldr	r4, [r5, #8]
 8008888:	e7eb      	b.n	8008862 <__swsetup_r+0x1e>
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <__swsetup_r+0xd8>)
 800888c:	429c      	cmp	r4, r3
 800888e:	bf08      	it	eq
 8008890:	68ec      	ldreq	r4, [r5, #12]
 8008892:	e7e6      	b.n	8008862 <__swsetup_r+0x1e>
 8008894:	0758      	lsls	r0, r3, #29
 8008896:	d512      	bpl.n	80088be <__swsetup_r+0x7a>
 8008898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800889a:	b141      	cbz	r1, 80088ae <__swsetup_r+0x6a>
 800889c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088a0:	4299      	cmp	r1, r3
 80088a2:	d002      	beq.n	80088aa <__swsetup_r+0x66>
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff fcd5 	bl	8008254 <_free_r>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6363      	str	r3, [r4, #52]	; 0x34
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0308 	orr.w	r3, r3, #8
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	b94b      	cbnz	r3, 80088de <__swsetup_r+0x9a>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088d4:	d003      	beq.n	80088de <__swsetup_r+0x9a>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 fa09 	bl	8008cf0 <__smakebuf_r>
 80088de:	89a0      	ldrh	r0, [r4, #12]
 80088e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088e4:	f010 0301 	ands.w	r3, r0, #1
 80088e8:	d00a      	beq.n	8008900 <__swsetup_r+0xbc>
 80088ea:	2300      	movs	r3, #0
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6963      	ldr	r3, [r4, #20]
 80088f0:	425b      	negs	r3, r3
 80088f2:	61a3      	str	r3, [r4, #24]
 80088f4:	6923      	ldr	r3, [r4, #16]
 80088f6:	b943      	cbnz	r3, 800890a <__swsetup_r+0xc6>
 80088f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088fc:	d1ba      	bne.n	8008874 <__swsetup_r+0x30>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	0781      	lsls	r1, r0, #30
 8008902:	bf58      	it	pl
 8008904:	6963      	ldrpl	r3, [r4, #20]
 8008906:	60a3      	str	r3, [r4, #8]
 8008908:	e7f4      	b.n	80088f4 <__swsetup_r+0xb0>
 800890a:	2000      	movs	r0, #0
 800890c:	e7f7      	b.n	80088fe <__swsetup_r+0xba>
 800890e:	bf00      	nop
 8008910:	2000000c 	.word	0x2000000c
 8008914:	08009334 	.word	0x08009334
 8008918:	08009354 	.word	0x08009354
 800891c:	08009314 	.word	0x08009314

08008920 <abort>:
 8008920:	b508      	push	{r3, lr}
 8008922:	2006      	movs	r0, #6
 8008924:	f000 fa4c 	bl	8008dc0 <raise>
 8008928:	2001      	movs	r0, #1
 800892a:	f7f8 fed3 	bl	80016d4 <_exit>
	...

08008930 <__sflush_r>:
 8008930:	898a      	ldrh	r2, [r1, #12]
 8008932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	4605      	mov	r5, r0
 8008938:	0710      	lsls	r0, r2, #28
 800893a:	460c      	mov	r4, r1
 800893c:	d458      	bmi.n	80089f0 <__sflush_r+0xc0>
 800893e:	684b      	ldr	r3, [r1, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc05      	bgt.n	8008950 <__sflush_r+0x20>
 8008944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	dc02      	bgt.n	8008950 <__sflush_r+0x20>
 800894a:	2000      	movs	r0, #0
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008952:	2e00      	cmp	r6, #0
 8008954:	d0f9      	beq.n	800894a <__sflush_r+0x1a>
 8008956:	2300      	movs	r3, #0
 8008958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800895c:	682f      	ldr	r7, [r5, #0]
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	d032      	beq.n	80089c8 <__sflush_r+0x98>
 8008962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	075a      	lsls	r2, r3, #29
 8008968:	d505      	bpl.n	8008976 <__sflush_r+0x46>
 800896a:	6863      	ldr	r3, [r4, #4]
 800896c:	1ac0      	subs	r0, r0, r3
 800896e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008970:	b10b      	cbz	r3, 8008976 <__sflush_r+0x46>
 8008972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008974:	1ac0      	subs	r0, r0, r3
 8008976:	2300      	movs	r3, #0
 8008978:	4602      	mov	r2, r0
 800897a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897c:	6a21      	ldr	r1, [r4, #32]
 800897e:	4628      	mov	r0, r5
 8008980:	47b0      	blx	r6
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	d106      	bne.n	8008996 <__sflush_r+0x66>
 8008988:	6829      	ldr	r1, [r5, #0]
 800898a:	291d      	cmp	r1, #29
 800898c:	d82c      	bhi.n	80089e8 <__sflush_r+0xb8>
 800898e:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <__sflush_r+0x108>)
 8008990:	40ca      	lsrs	r2, r1
 8008992:	07d6      	lsls	r6, r2, #31
 8008994:	d528      	bpl.n	80089e8 <__sflush_r+0xb8>
 8008996:	2200      	movs	r2, #0
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	04d9      	lsls	r1, r3, #19
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	d504      	bpl.n	80089ac <__sflush_r+0x7c>
 80089a2:	1c42      	adds	r2, r0, #1
 80089a4:	d101      	bne.n	80089aa <__sflush_r+0x7a>
 80089a6:	682b      	ldr	r3, [r5, #0]
 80089a8:	b903      	cbnz	r3, 80089ac <__sflush_r+0x7c>
 80089aa:	6560      	str	r0, [r4, #84]	; 0x54
 80089ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ae:	602f      	str	r7, [r5, #0]
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d0ca      	beq.n	800894a <__sflush_r+0x1a>
 80089b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d002      	beq.n	80089c2 <__sflush_r+0x92>
 80089bc:	4628      	mov	r0, r5
 80089be:	f7ff fc49 	bl	8008254 <_free_r>
 80089c2:	2000      	movs	r0, #0
 80089c4:	6360      	str	r0, [r4, #52]	; 0x34
 80089c6:	e7c1      	b.n	800894c <__sflush_r+0x1c>
 80089c8:	6a21      	ldr	r1, [r4, #32]
 80089ca:	2301      	movs	r3, #1
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b0      	blx	r6
 80089d0:	1c41      	adds	r1, r0, #1
 80089d2:	d1c7      	bne.n	8008964 <__sflush_r+0x34>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c4      	beq.n	8008964 <__sflush_r+0x34>
 80089da:	2b1d      	cmp	r3, #29
 80089dc:	d001      	beq.n	80089e2 <__sflush_r+0xb2>
 80089de:	2b16      	cmp	r3, #22
 80089e0:	d101      	bne.n	80089e6 <__sflush_r+0xb6>
 80089e2:	602f      	str	r7, [r5, #0]
 80089e4:	e7b1      	b.n	800894a <__sflush_r+0x1a>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e7ad      	b.n	800894c <__sflush_r+0x1c>
 80089f0:	690f      	ldr	r7, [r1, #16]
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	d0a9      	beq.n	800894a <__sflush_r+0x1a>
 80089f6:	0793      	lsls	r3, r2, #30
 80089f8:	680e      	ldr	r6, [r1, #0]
 80089fa:	bf08      	it	eq
 80089fc:	694b      	ldreq	r3, [r1, #20]
 80089fe:	600f      	str	r7, [r1, #0]
 8008a00:	bf18      	it	ne
 8008a02:	2300      	movne	r3, #0
 8008a04:	eba6 0807 	sub.w	r8, r6, r7
 8008a08:	608b      	str	r3, [r1, #8]
 8008a0a:	f1b8 0f00 	cmp.w	r8, #0
 8008a0e:	dd9c      	ble.n	800894a <__sflush_r+0x1a>
 8008a10:	6a21      	ldr	r1, [r4, #32]
 8008a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a14:	4643      	mov	r3, r8
 8008a16:	463a      	mov	r2, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b0      	blx	r6
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	dc06      	bgt.n	8008a2e <__sflush_r+0xfe>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e78e      	b.n	800894c <__sflush_r+0x1c>
 8008a2e:	4407      	add	r7, r0
 8008a30:	eba8 0800 	sub.w	r8, r8, r0
 8008a34:	e7e9      	b.n	8008a0a <__sflush_r+0xda>
 8008a36:	bf00      	nop
 8008a38:	20400001 	.word	0x20400001

08008a3c <_fflush_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	690b      	ldr	r3, [r1, #16]
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	b913      	cbnz	r3, 8008a4c <_fflush_r+0x10>
 8008a46:	2500      	movs	r5, #0
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	b118      	cbz	r0, 8008a56 <_fflush_r+0x1a>
 8008a4e:	6983      	ldr	r3, [r0, #24]
 8008a50:	b90b      	cbnz	r3, 8008a56 <_fflush_r+0x1a>
 8008a52:	f000 f887 	bl	8008b64 <__sinit>
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <_fflush_r+0x6c>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	d11b      	bne.n	8008a94 <_fflush_r+0x58>
 8008a5c:	686c      	ldr	r4, [r5, #4]
 8008a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ef      	beq.n	8008a46 <_fflush_r+0xa>
 8008a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a68:	07d0      	lsls	r0, r2, #31
 8008a6a:	d404      	bmi.n	8008a76 <_fflush_r+0x3a>
 8008a6c:	0599      	lsls	r1, r3, #22
 8008a6e:	d402      	bmi.n	8008a76 <_fflush_r+0x3a>
 8008a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a72:	f000 f915 	bl	8008ca0 <__retarget_lock_acquire_recursive>
 8008a76:	4628      	mov	r0, r5
 8008a78:	4621      	mov	r1, r4
 8008a7a:	f7ff ff59 	bl	8008930 <__sflush_r>
 8008a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a80:	07da      	lsls	r2, r3, #31
 8008a82:	4605      	mov	r5, r0
 8008a84:	d4e0      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	059b      	lsls	r3, r3, #22
 8008a8a:	d4dd      	bmi.n	8008a48 <_fflush_r+0xc>
 8008a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a8e:	f000 f908 	bl	8008ca2 <__retarget_lock_release_recursive>
 8008a92:	e7d9      	b.n	8008a48 <_fflush_r+0xc>
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <_fflush_r+0x70>)
 8008a96:	429c      	cmp	r4, r3
 8008a98:	d101      	bne.n	8008a9e <_fflush_r+0x62>
 8008a9a:	68ac      	ldr	r4, [r5, #8]
 8008a9c:	e7df      	b.n	8008a5e <_fflush_r+0x22>
 8008a9e:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <_fflush_r+0x74>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	bf08      	it	eq
 8008aa4:	68ec      	ldreq	r4, [r5, #12]
 8008aa6:	e7da      	b.n	8008a5e <_fflush_r+0x22>
 8008aa8:	08009334 	.word	0x08009334
 8008aac:	08009354 	.word	0x08009354
 8008ab0:	08009314 	.word	0x08009314

08008ab4 <std>:
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	e9c0 3300 	strd	r3, r3, [r0]
 8008abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ac2:	6083      	str	r3, [r0, #8]
 8008ac4:	8181      	strh	r1, [r0, #12]
 8008ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ac8:	81c2      	strh	r2, [r0, #14]
 8008aca:	6183      	str	r3, [r0, #24]
 8008acc:	4619      	mov	r1, r3
 8008ace:	2208      	movs	r2, #8
 8008ad0:	305c      	adds	r0, #92	; 0x5c
 8008ad2:	f7fd fd1f 	bl	8006514 <memset>
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <std+0x38>)
 8008ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <std+0x3c>)
 8008adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <std+0x40>)
 8008ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ae2:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <std+0x44>)
 8008ae4:	6224      	str	r4, [r4, #32]
 8008ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	bf00      	nop
 8008aec:	08008df9 	.word	0x08008df9
 8008af0:	08008e1b 	.word	0x08008e1b
 8008af4:	08008e53 	.word	0x08008e53
 8008af8:	08008e77 	.word	0x08008e77

08008afc <_cleanup_r>:
 8008afc:	4901      	ldr	r1, [pc, #4]	; (8008b04 <_cleanup_r+0x8>)
 8008afe:	f000 b8af 	b.w	8008c60 <_fwalk_reent>
 8008b02:	bf00      	nop
 8008b04:	08008a3d 	.word	0x08008a3d

08008b08 <__sfmoreglue>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	2268      	movs	r2, #104	; 0x68
 8008b0c:	1e4d      	subs	r5, r1, #1
 8008b0e:	4355      	muls	r5, r2
 8008b10:	460e      	mov	r6, r1
 8008b12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b16:	f7ff fc09 	bl	800832c <_malloc_r>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b140      	cbz	r0, 8008b30 <__sfmoreglue+0x28>
 8008b1e:	2100      	movs	r1, #0
 8008b20:	e9c0 1600 	strd	r1, r6, [r0]
 8008b24:	300c      	adds	r0, #12
 8008b26:	60a0      	str	r0, [r4, #8]
 8008b28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b2c:	f7fd fcf2 	bl	8006514 <memset>
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd70      	pop	{r4, r5, r6, pc}

08008b34 <__sfp_lock_acquire>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__sfp_lock_acquire+0x8>)
 8008b36:	f000 b8b3 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20000451 	.word	0x20000451

08008b40 <__sfp_lock_release>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__sfp_lock_release+0x8>)
 8008b42:	f000 b8ae 	b.w	8008ca2 <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	20000451 	.word	0x20000451

08008b4c <__sinit_lock_acquire>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__sinit_lock_acquire+0x8>)
 8008b4e:	f000 b8a7 	b.w	8008ca0 <__retarget_lock_acquire_recursive>
 8008b52:	bf00      	nop
 8008b54:	20000452 	.word	0x20000452

08008b58 <__sinit_lock_release>:
 8008b58:	4801      	ldr	r0, [pc, #4]	; (8008b60 <__sinit_lock_release+0x8>)
 8008b5a:	f000 b8a2 	b.w	8008ca2 <__retarget_lock_release_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20000452 	.word	0x20000452

08008b64 <__sinit>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	f7ff fff0 	bl	8008b4c <__sinit_lock_acquire>
 8008b6c:	69a3      	ldr	r3, [r4, #24]
 8008b6e:	b11b      	cbz	r3, 8008b78 <__sinit+0x14>
 8008b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b74:	f7ff bff0 	b.w	8008b58 <__sinit_lock_release>
 8008b78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b7c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <__sinit+0x68>)
 8008b80:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <__sinit+0x6c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	bf04      	itt	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	61a3      	streq	r3, [r4, #24]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f820 	bl	8008bd4 <__sfp>
 8008b94:	6060      	str	r0, [r4, #4]
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 f81c 	bl	8008bd4 <__sfp>
 8008b9c:	60a0      	str	r0, [r4, #8]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f818 	bl	8008bd4 <__sfp>
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	60e0      	str	r0, [r4, #12]
 8008ba8:	2104      	movs	r1, #4
 8008baa:	6860      	ldr	r0, [r4, #4]
 8008bac:	f7ff ff82 	bl	8008ab4 <std>
 8008bb0:	68a0      	ldr	r0, [r4, #8]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	2109      	movs	r1, #9
 8008bb6:	f7ff ff7d 	bl	8008ab4 <std>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	2112      	movs	r1, #18
 8008bc0:	f7ff ff78 	bl	8008ab4 <std>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	61a3      	str	r3, [r4, #24]
 8008bc8:	e7d2      	b.n	8008b70 <__sinit+0xc>
 8008bca:	bf00      	nop
 8008bcc:	08008f98 	.word	0x08008f98
 8008bd0:	08008afd 	.word	0x08008afd

08008bd4 <__sfp>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	f7ff ffac 	bl	8008b34 <__sfp_lock_acquire>
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <__sfp+0x84>)
 8008bde:	681e      	ldr	r6, [r3, #0]
 8008be0:	69b3      	ldr	r3, [r6, #24]
 8008be2:	b913      	cbnz	r3, 8008bea <__sfp+0x16>
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7ff ffbd 	bl	8008b64 <__sinit>
 8008bea:	3648      	adds	r6, #72	; 0x48
 8008bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	d503      	bpl.n	8008bfc <__sfp+0x28>
 8008bf4:	6833      	ldr	r3, [r6, #0]
 8008bf6:	b30b      	cbz	r3, 8008c3c <__sfp+0x68>
 8008bf8:	6836      	ldr	r6, [r6, #0]
 8008bfa:	e7f7      	b.n	8008bec <__sfp+0x18>
 8008bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c00:	b9d5      	cbnz	r5, 8008c38 <__sfp+0x64>
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <__sfp+0x88>)
 8008c04:	60e3      	str	r3, [r4, #12]
 8008c06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c0c:	f000 f847 	bl	8008c9e <__retarget_lock_init_recursive>
 8008c10:	f7ff ff96 	bl	8008b40 <__sfp_lock_release>
 8008c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c1c:	6025      	str	r5, [r4, #0]
 8008c1e:	61a5      	str	r5, [r4, #24]
 8008c20:	2208      	movs	r2, #8
 8008c22:	4629      	mov	r1, r5
 8008c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c28:	f7fd fc74 	bl	8006514 <memset>
 8008c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c34:	4620      	mov	r0, r4
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	3468      	adds	r4, #104	; 0x68
 8008c3a:	e7d9      	b.n	8008bf0 <__sfp+0x1c>
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7ff ff62 	bl	8008b08 <__sfmoreglue>
 8008c44:	4604      	mov	r4, r0
 8008c46:	6030      	str	r0, [r6, #0]
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d1d5      	bne.n	8008bf8 <__sfp+0x24>
 8008c4c:	f7ff ff78 	bl	8008b40 <__sfp_lock_release>
 8008c50:	230c      	movs	r3, #12
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	e7ee      	b.n	8008c34 <__sfp+0x60>
 8008c56:	bf00      	nop
 8008c58:	08008f98 	.word	0x08008f98
 8008c5c:	ffff0001 	.word	0xffff0001

08008c60 <_fwalk_reent>:
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	4606      	mov	r6, r0
 8008c66:	4688      	mov	r8, r1
 8008c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c6c:	2700      	movs	r7, #0
 8008c6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c72:	f1b9 0901 	subs.w	r9, r9, #1
 8008c76:	d505      	bpl.n	8008c84 <_fwalk_reent+0x24>
 8008c78:	6824      	ldr	r4, [r4, #0]
 8008c7a:	2c00      	cmp	r4, #0
 8008c7c:	d1f7      	bne.n	8008c6e <_fwalk_reent+0xe>
 8008c7e:	4638      	mov	r0, r7
 8008c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c84:	89ab      	ldrh	r3, [r5, #12]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d907      	bls.n	8008c9a <_fwalk_reent+0x3a>
 8008c8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	d003      	beq.n	8008c9a <_fwalk_reent+0x3a>
 8008c92:	4629      	mov	r1, r5
 8008c94:	4630      	mov	r0, r6
 8008c96:	47c0      	blx	r8
 8008c98:	4307      	orrs	r7, r0
 8008c9a:	3568      	adds	r5, #104	; 0x68
 8008c9c:	e7e9      	b.n	8008c72 <_fwalk_reent+0x12>

08008c9e <__retarget_lock_init_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <__retarget_lock_acquire_recursive>:
 8008ca0:	4770      	bx	lr

08008ca2 <__retarget_lock_release_recursive>:
 8008ca2:	4770      	bx	lr

08008ca4 <__swhatbuf_r>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	460e      	mov	r6, r1
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	b096      	sub	sp, #88	; 0x58
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	da08      	bge.n	8008cc8 <__swhatbuf_r+0x24>
 8008cb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	061a      	lsls	r2, r3, #24
 8008cc0:	d410      	bmi.n	8008ce4 <__swhatbuf_r+0x40>
 8008cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc6:	e00e      	b.n	8008ce6 <__swhatbuf_r+0x42>
 8008cc8:	466a      	mov	r2, sp
 8008cca:	f000 f8fb 	bl	8008ec4 <_fstat_r>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	dbf1      	blt.n	8008cb6 <__swhatbuf_r+0x12>
 8008cd2:	9a01      	ldr	r2, [sp, #4]
 8008cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cdc:	425a      	negs	r2, r3
 8008cde:	415a      	adcs	r2, r3
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	e7ee      	b.n	8008cc2 <__swhatbuf_r+0x1e>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	b016      	add	sp, #88	; 0x58
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cf0 <__smakebuf_r>:
 8008cf0:	898b      	ldrh	r3, [r1, #12]
 8008cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cf4:	079d      	lsls	r5, r3, #30
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d507      	bpl.n	8008d0c <__smakebuf_r+0x1c>
 8008cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	2301      	movs	r3, #1
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	ab01      	add	r3, sp, #4
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f7ff ffc8 	bl	8008ca4 <__swhatbuf_r>
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff fb07 	bl	800832c <_malloc_r>
 8008d1e:	b948      	cbnz	r0, 8008d34 <__smakebuf_r+0x44>
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d4ef      	bmi.n	8008d08 <__smakebuf_r+0x18>
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7e3      	b.n	8008cfc <__smakebuf_r+0xc>
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <__smakebuf_r+0x7c>)
 8008d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	b15b      	cbz	r3, 8008d64 <__smakebuf_r+0x74>
 8008d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f8c9 	bl	8008ee8 <_isatty_r>
 8008d56:	b128      	cbz	r0, 8008d64 <__smakebuf_r+0x74>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	89a0      	ldrh	r0, [r4, #12]
 8008d66:	4305      	orrs	r5, r0
 8008d68:	81a5      	strh	r5, [r4, #12]
 8008d6a:	e7cd      	b.n	8008d08 <__smakebuf_r+0x18>
 8008d6c:	08008afd 	.word	0x08008afd

08008d70 <_raise_r>:
 8008d70:	291f      	cmp	r1, #31
 8008d72:	b538      	push	{r3, r4, r5, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	d904      	bls.n	8008d84 <_raise_r+0x14>
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d86:	b112      	cbz	r2, 8008d8e <_raise_r+0x1e>
 8008d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d8c:	b94b      	cbnz	r3, 8008da2 <_raise_r+0x32>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f830 	bl	8008df4 <_getpid_r>
 8008d94:	462a      	mov	r2, r5
 8008d96:	4601      	mov	r1, r0
 8008d98:	4620      	mov	r0, r4
 8008d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9e:	f000 b817 	b.w	8008dd0 <_kill_r>
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d00a      	beq.n	8008dbc <_raise_r+0x4c>
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	d103      	bne.n	8008db2 <_raise_r+0x42>
 8008daa:	2316      	movs	r3, #22
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7e7      	b.n	8008d82 <_raise_r+0x12>
 8008db2:	2400      	movs	r4, #0
 8008db4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008db8:	4628      	mov	r0, r5
 8008dba:	4798      	blx	r3
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7e0      	b.n	8008d82 <_raise_r+0x12>

08008dc0 <raise>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <raise+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f7ff bfd3 	b.w	8008d70 <_raise_r>
 8008dca:	bf00      	nop
 8008dcc:	2000000c 	.word	0x2000000c

08008dd0 <_kill_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d07      	ldr	r5, [pc, #28]	; (8008df0 <_kill_r+0x20>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	f7f8 fc69 	bl	80016b4 <_kill>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d102      	bne.n	8008dec <_kill_r+0x1c>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b103      	cbz	r3, 8008dec <_kill_r+0x1c>
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	bd38      	pop	{r3, r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	2000044c 	.word	0x2000044c

08008df4 <_getpid_r>:
 8008df4:	f7f8 bc56 	b.w	80016a4 <_getpid>

08008df8 <__sread>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e00:	f000 f894 	bl	8008f2c <_read_r>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	bfab      	itete	ge
 8008e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e0c:	181b      	addge	r3, r3, r0
 8008e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e12:	bfac      	ite	ge
 8008e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e16:	81a3      	strhlt	r3, [r4, #12]
 8008e18:	bd10      	pop	{r4, pc}

08008e1a <__swrite>:
 8008e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1e:	461f      	mov	r7, r3
 8008e20:	898b      	ldrh	r3, [r1, #12]
 8008e22:	05db      	lsls	r3, r3, #23
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	4616      	mov	r6, r2
 8008e2a:	d505      	bpl.n	8008e38 <__swrite+0x1e>
 8008e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e30:	2302      	movs	r3, #2
 8008e32:	2200      	movs	r2, #0
 8008e34:	f000 f868 	bl	8008f08 <_lseek_r>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	4632      	mov	r2, r6
 8008e46:	463b      	mov	r3, r7
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4e:	f000 b817 	b.w	8008e80 <_write_r>

08008e52 <__sseek>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5a:	f000 f855 	bl	8008f08 <_lseek_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	bf15      	itete	ne
 8008e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e6e:	81a3      	strheq	r3, [r4, #12]
 8008e70:	bf18      	it	ne
 8008e72:	81a3      	strhne	r3, [r4, #12]
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <__sclose>:
 8008e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7a:	f000 b813 	b.w	8008ea4 <_close_r>
	...

08008e80 <_write_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4d07      	ldr	r5, [pc, #28]	; (8008ea0 <_write_r+0x20>)
 8008e84:	4604      	mov	r4, r0
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f7f8 fc47 	bl	8001722 <_write>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_write_r+0x1e>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_write_r+0x1e>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	2000044c 	.word	0x2000044c

08008ea4 <_close_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d06      	ldr	r5, [pc, #24]	; (8008ec0 <_close_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	f7f8 fc53 	bl	800175a <_close>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_close_r+0x1a>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_close_r+0x1a>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	2000044c 	.word	0x2000044c

08008ec4 <_fstat_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_fstat_r+0x20>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f7f8 fc4e 	bl	8001772 <_fstat>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d102      	bne.n	8008ee0 <_fstat_r+0x1c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	b103      	cbz	r3, 8008ee0 <_fstat_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	2000044c 	.word	0x2000044c

08008ee8 <_isatty_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	; (8008f04 <_isatty_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 fc4d 	bl	8001792 <_isatty>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_isatty_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_isatty_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	2000044c 	.word	0x2000044c

08008f08 <_lseek_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	; (8008f28 <_lseek_r+0x20>)
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	4608      	mov	r0, r1
 8008f10:	4611      	mov	r1, r2
 8008f12:	2200      	movs	r2, #0
 8008f14:	602a      	str	r2, [r5, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	f7f8 fc46 	bl	80017a8 <_lseek>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_lseek_r+0x1e>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_lseek_r+0x1e>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	2000044c 	.word	0x2000044c

08008f2c <_read_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d07      	ldr	r5, [pc, #28]	; (8008f4c <_read_r+0x20>)
 8008f30:	4604      	mov	r4, r0
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	602a      	str	r2, [r5, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f7f8 fbd4 	bl	80016e8 <_read>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_read_r+0x1e>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_read_r+0x1e>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	2000044c 	.word	0x2000044c

08008f50 <_init>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	bf00      	nop
 8008f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f56:	bc08      	pop	{r3}
 8008f58:	469e      	mov	lr, r3
 8008f5a:	4770      	bx	lr

08008f5c <_fini>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr
