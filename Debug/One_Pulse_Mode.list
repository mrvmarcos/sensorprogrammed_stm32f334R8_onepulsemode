
One_Pulse_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009cf8  08009cf8  00019cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a114  0800a114  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a114  0800a114  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a114  0800a114  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000438  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000614  20000614  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124cc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ac  00000000  00000000  000326d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea0  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dc3  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ea3  00000000  00000000  00058673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbdc8  00000000  00000000  0006b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001372de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005340  00000000  00000000  00137330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ce0 	.word	0x08009ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009ce0 	.word	0x08009ce0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fee9 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f889 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 fb75 	bl	80012a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bba:	f000 fb55 	bl	8001268 <MX_DMA_Init>
  MX_TIM2_Init();
 8000bbe:	f000 fa0b 	bl	8000fd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000bc2:	f000 f953 	bl	8000e6c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bc6:	f000 fa87 	bl	80010d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000bca:	f000 f8df 	bl	8000d8c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000bce:	f000 fb1b 	bl	8001208 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Enable update interrupt for TIM2
  HAL_TIM_Base_Start(&htim2);
 8000bd2:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <main+0xf8>)
 8000bd4:	f004 f82e 	bl	8004c34 <HAL_TIM_Base_Start>

  // Enable one-pulse mode and output compare interrupt for TIM1
  HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4832      	ldr	r0, [pc, #200]	; (8000ca4 <main+0xfc>)
 8000bdc:	f004 fad6 	bl	800518c <HAL_TIM_OnePulse_Start_IT>
  //HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);

  // Enable one-pulse mode and output compare interrupt for TIM3
  HAL_TIM_OnePulse_Start_IT(&htim3, TIM_CHANNEL_1);
 8000be0:	2100      	movs	r1, #0
 8000be2:	4831      	ldr	r0, [pc, #196]	; (8000ca8 <main+0x100>)
 8000be4:	f004 fad2 	bl	800518c <HAL_TIM_OnePulse_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000be8:	2100      	movs	r1, #0
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <main+0x100>)
 8000bec:	f004 f8d8 	bl	8004da0 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        if (new_data_available == 1){
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <main+0x104>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d1fb      	bne.n	8000bf0 <main+0x48>
          sum_2 +=1;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <main+0x108>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a2c      	ldr	r2, [pc, #176]	; (8000cb0 <main+0x108>)
 8000c00:	6013      	str	r3, [r2, #0]
	      HAL_GPIO_WritePin(GPIOA, Green_LED, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2120      	movs	r1, #32
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f002 fbf9 	bl	8003400 <HAL_GPIO_WritePin>
	      for (int i = 0; i < 81; i+=2) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e00f      	b.n	8000c34 <main+0x8c>
	          num_usart[i] += adc_samp[i];
 8000c14:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <main+0x10c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	4926      	ldr	r1, [pc, #152]	; (8000cb8 <main+0x110>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c24:	441a      	add	r2, r3
 8000c26:	4923      	ldr	r1, [pc, #140]	; (8000cb4 <main+0x10c>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      for (int i = 0; i < 81; i+=2) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3302      	adds	r3, #2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b50      	cmp	r3, #80	; 0x50
 8000c38:	ddec      	ble.n	8000c14 <main+0x6c>
	      }
	      if (sum_2 == 16){
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <main+0x108>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d124      	bne.n	8000c8c <main+0xe4>
	    	  for (int i = 0; i < 81; i+=2) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	e01e      	b.n	8000c86 <main+0xde>
	    	  sprintf((char*)buf, "%u \r\n", (unsigned int)num_usart[i]);
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <main+0x10c>)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	461a      	mov	r2, r3
 8000c52:	491a      	ldr	r1, [pc, #104]	; (8000cbc <main+0x114>)
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <main+0x118>)
 8000c56:	f006 fdcb 	bl	80077f0 <siprintf>
	    	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <main+0x118>)
 8000c5c:	f7ff fab8 	bl	80001d0 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	4915      	ldr	r1, [pc, #84]	; (8000cc0 <main+0x118>)
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <main+0x11c>)
 8000c6c:	f005 fd4e 	bl	800670c <HAL_UART_Transmit>
	    	  num_usart[i] = 0;
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <main+0x10c>)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2100      	movs	r1, #0
 8000c76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	  sum_2 = 0;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <main+0x108>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
	    	  for (int i = 0; i < 81; i+=2) {
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	3302      	adds	r3, #2
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b50      	cmp	r3, #80	; 0x50
 8000c8a:	dddd      	ble.n	8000c48 <main+0xa0>
	    	  }
	      }
	      HAL_GPIO_WritePin(GPIOA, Green_LED, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f002 fbb4 	bl	8003400 <HAL_GPIO_WritePin>
	      new_data_available = 0;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <main+0x104>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
        if (new_data_available == 1){
 8000c9e:	e7a7      	b.n	8000bf0 <main+0x48>
 8000ca0:	200002d8 	.word	0x200002d8
 8000ca4:	2000028c 	.word	0x2000028c
 8000ca8:	20000324 	.word	0x20000324
 8000cac:	200004a8 	.word	0x200004a8
 8000cb0:	200005f4 	.word	0x200005f4
 8000cb4:	200004ac 	.word	0x200004ac
 8000cb8:	20000404 	.word	0x20000404
 8000cbc:	08009cf8 	.word	0x08009cf8
 8000cc0:	200003f8 	.word	0x200003f8
 8000cc4:	20000370 	.word	0x20000370

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 f918 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 fb83 	bl	8003430 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d30:	f000 fb34 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2101      	movs	r1, #1
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fbaa 	bl	80044ac <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d5e:	f000 fb1d 	bl	800139c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000d62:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000d66:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fdcf 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d80:	f000 fb0c 	bl	800139c <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db6:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e0a:	f000 fe3f 	bl	8001a8c <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 fac2 	bl	800139c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e24:	f001 fbc0 	bl	80025a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e2e:	f000 fab5 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC1_Init+0xdc>)
 8000e50:	f001 f8ea 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e5a:	f000 fa9f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001f8 	.word	0x200001f8

08000e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b09a      	sub	sp, #104	; 0x68
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	222c      	movs	r2, #44	; 0x2c
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f82f 	bl	8006f0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eae:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <MX_TIM1_Init+0x168>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000eb4:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 35-1;
 8000ec0:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ec2:	2222      	movs	r2, #34	; 0x22
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	483d      	ldr	r0, [pc, #244]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eda:	f003 fe53 	bl	8004b84 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 fa5a 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ee8:	4839      	ldr	r0, [pc, #228]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000eea:	f003 fef7 	bl	8004cdc <HAL_TIM_OC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 fa52 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4835      	ldr	r0, [pc, #212]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000efc:	f004 f8eb 	bl	80050d6 <HAL_TIM_OnePulse_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f06:	f000 fa49 	bl	800139c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	4619      	mov	r1, r3
 8000f18:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f1a:	f004 fcb6 	bl	800588a <HAL_TIM_SlaveConfigSynchro>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f24:	f000 fa3a 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f3c:	f005 fa94 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000f46:	f000 fa29 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f4a:	2370      	movs	r3, #112	; 0x70
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 25-1;
 8000f4e:	2318      	movs	r3, #24
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000f70:	f004 faac 	bl	80054cc <HAL_TIM_OC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f7a:	f000 fa0f 	bl	800139c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000fb4:	f005 fac6 	bl	8006544 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000fbe:	f000 f9ed 	bl	800139c <Error_Handler>
//  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);               // Enable Timer 1 Channel 1 interrupt for elapsedPeriodCallback

  //HAL_NVIC_ClearPendingIRQ(TIM1_IRQn);  // make sure that any pending interrupt is cleared
  //HAL_NVIC_EnableIRQ(TIM1_IRQn);  // Enable the interrupt
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_TIM1_Init+0x164>)
 8000fc4:	f000 faf6 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8000fc8:	bf00      	nop
 8000fca:	3768      	adds	r7, #104	; 0x68
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000028c 	.word	0x2000028c
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <MX_TIM2_Init+0xfc>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800100e:	221f      	movs	r2, #31
 8001010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <MX_TIM2_Init+0xfc>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800101a:	f242 720f 	movw	r2, #9999	; 0x270f
 800101e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_TIM2_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MX_TIM2_Init+0xfc>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102c:	4829      	ldr	r0, [pc, #164]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800102e:	f003 fda9 	bl	8004b84 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001038:	f000 f9b0 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4619      	mov	r1, r3
 8001048:	4822      	ldr	r0, [pc, #136]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800104a:	f004 fb55 	bl	80056f8 <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001054:	f000 f9a2 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800105a:	f003 ffdb 	bl	8005014 <HAL_TIM_IC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001064:	f000 f99a 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001068:	2320      	movs	r3, #32
 800106a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_TIM2_Init+0xfc>)
 8001078:	f005 f9f6 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001082:	f000 f98b 	bl	800139c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800108a:	2301      	movs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM2_Init+0xfc>)
 800109e:	f004 fa8f 	bl	80055c0 <HAL_TIM_IC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80010a8:	f000 f978 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);            // Enable Timer 3 Update Event interrupt for elapsedPeriodCallback
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_TIM2_Init+0xfc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_TIM2_Init+0xfc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);               // Enable Timer 3 Channel 1 interrupt for elapsedPeriodCallback
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <MX_TIM2_Init+0xfc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <MX_TIM2_Init+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0202 	orr.w	r2, r2, #2
 80010ca:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200002d8 	.word	0x200002d8

080010d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110c:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <MX_TIM3_Init+0x128>)
 800110e:	4a3d      	ldr	r2, [pc, #244]	; (8001204 <MX_TIM3_Init+0x12c>)
 8001110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <MX_TIM3_Init+0x128>)
 8001114:	221f      	movs	r2, #31
 8001116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b39      	ldr	r3, [pc, #228]	; (8001200 <MX_TIM3_Init+0x128>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65-1;
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <MX_TIM3_Init+0x128>)
 8001120:	2240      	movs	r2, #64	; 0x40
 8001122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <MX_TIM3_Init+0x128>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <MX_TIM3_Init+0x128>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001130:	4833      	ldr	r0, [pc, #204]	; (8001200 <MX_TIM3_Init+0x128>)
 8001132:	f003 fd27 	bl	8004b84 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800113c:	f000 f92e 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001140:	482f      	ldr	r0, [pc, #188]	; (8001200 <MX_TIM3_Init+0x128>)
 8001142:	f003 fdcb 	bl	8004cdc <HAL_TIM_OC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800114c:	f000 f926 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001150:	2108      	movs	r1, #8
 8001152:	482b      	ldr	r0, [pc, #172]	; (8001200 <MX_TIM3_Init+0x128>)
 8001154:	f003 ffbf 	bl	80050d6 <HAL_TIM_OnePulse_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800115e:	f000 f91d 	bl	800139c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001162:	2306      	movs	r3, #6
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001166:	2310      	movs	r3, #16
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800116a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	4823      	ldr	r0, [pc, #140]	; (8001200 <MX_TIM3_Init+0x128>)
 8001172:	f004 fb8a 	bl	800588a <HAL_TIM_SlaveConfigSynchro>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 800117c:	f000 f90e 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4619      	mov	r1, r3
 800118e:	481c      	ldr	r0, [pc, #112]	; (8001200 <MX_TIM3_Init+0x128>)
 8001190:	f005 f96a 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800119a:	f000 f8ff 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800119e:	2370      	movs	r3, #112	; 0x70
 80011a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 55-1;
 80011a2:	2336      	movs	r3, #54	; 0x36
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <MX_TIM3_Init+0x128>)
 80011b6:	f004 f989 	bl	80054cc <HAL_TIM_OC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011c0:	f000 f8ec 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);            // Enable Timer 3 Update Event interrupt for elapsedPeriodCallback
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_TIM3_Init+0x128>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_TIM3_Init+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	60da      	str	r2, [r3, #12]
__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);               // Enable Timer 3 Channel 1 interrupt for elapsedPeriodCallback
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_TIM3_Init+0x128>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_TIM3_Init+0x128>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0202 	orr.w	r2, r2, #2
 80011e2:	60da      	str	r2, [r3, #12]

  HAL_NVIC_ClearPendingIRQ(TIM3_IRQn);  // make sure that any pending interrupt is cleared
 80011e4:	201d      	movs	r0, #29
 80011e6:	f001 fdba 	bl	8002d5e <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);  // Enable the interrupt
 80011ea:	201d      	movs	r0, #29
 80011ec:	f001 fd9d 	bl	8002d2a <HAL_NVIC_EnableIRQ>



  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <MX_TIM3_Init+0x128>)
 80011f2:	f000 f9df 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 80011f6:	bf00      	nop
 80011f8:	3740      	adds	r7, #64	; 0x40
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000324 	.word	0x20000324
 8001204:	40000400 	.word	0x40000400

08001208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_USART2_UART_Init+0x5c>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001214:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800124c:	f005 fa10 	bl	8006670 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 f8a1 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000370 	.word	0x20000370
 8001264:	40004400 	.word	0x40004400

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_DMA_Init+0x38>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <MX_DMA_Init+0x38>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6153      	str	r3, [r2, #20]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_DMA_Init+0x38>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	200b      	movs	r0, #11
 800128c:	f001 fd31 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001290:	200b      	movs	r0, #11
 8001292:	f001 fd4a 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_GPIO_Init+0x90>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <MX_GPIO_Init+0x90>)
 80012c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_GPIO_Init+0x90>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_GPIO_Init+0x90>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <MX_GPIO_Init+0x90>)
 80012d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_GPIO_Init+0x90>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_GPIO_Init+0x90>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <MX_GPIO_Init+0x90>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_GPIO_Init+0x90>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f002 f879 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130e:	2320      	movs	r3, #32
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f001 fef8 	bl	800311c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_PeriodElapsedCallback>:
//    	HAL_GPIO_WritePin(GPIOA, Green_LED, GPIO_PIN_RESET);
//    	HAL_ADC_Stop_DMA(&hadc1);
//    	new_data_available = 1;
//	}
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	sum +=1;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001348:	6013      	str	r3, [r2, #0]
	if(sum >2){
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d915      	bls.n	800137e <HAL_TIM_PeriodElapsedCallback+0x46>
	    if (htim->Instance == TIM2)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135a:	d105      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0x30>
	    {
	        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_samp, SAMPLES);
 800135c:	2252      	movs	r2, #82	; 0x52
 800135e:	490b      	ldr	r1, [pc, #44]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001362:	f000 fd25 	bl	8001db0 <HAL_ADC_Start_DMA>
	    	HAL_ADC_Stop_DMA(&hadc1);
	    	//HAL_GPIO_WritePin(GPIOA, Green_LED, GPIO_PIN_RESET);
	    	new_data_available = 1;
	    }
	}
}
 8001366:	e00a      	b.n	800137e <HAL_TIM_PeriodElapsedCallback+0x46>
	    else if (htim->Instance == TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d105      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x46>
	    	HAL_ADC_Stop_DMA(&hadc1);
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001374:	f000 fdf6 	bl	8001f64 <HAL_ADC_Stop_DMA>
	    	new_data_available = 1;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200005f8 	.word	0x200005f8
 800138c:	20000404 	.word	0x20000404
 8001390:	200001f8 	.word	0x200001f8
 8001394:	40000400 	.word	0x40000400
 8001398:	200004a8 	.word	0x200004a8

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_MspInit+0x44>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_MspInit+0x44>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_MspInit+0x44>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x44>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x44>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001410:	d14c      	bne.n	80014ac <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f001 fe60 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_ADC_MspInit+0xcc>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800147e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001482:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001486:	2220      	movs	r2, #32
 8001488:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001492:	f001 fc72 	bl	8002d7a <HAL_DMA_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800149c:	f7ff ff7e 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	20000248 	.word	0x20000248
 80014bc:	40020008 	.word	0x40020008

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_TIM_Base_MspInit+0xe8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10c      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 80014e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014fa:	e050      	b.n	800159e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d132      	bne.n	800156c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001548:	2301      	movs	r3, #1
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f001 fde1 	bl	800311c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	201c      	movs	r0, #28
 8001560:	f001 fbc7 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001564:	201c      	movs	r0, #28
 8001566:	f001 fbe0 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800156a:	e018      	b.n	800159e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d113      	bne.n	800159e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0xec>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	201d      	movs	r0, #29
 8001594:	f001 fbad 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001598:	201d      	movs	r0, #29
 800159a:	f001 fbc6 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	; 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_TIM_MspPostInit+0xa8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d11c      	bne.n	8001610 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 80015dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015fe:	2302      	movs	r3, #2
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <HAL_TIM_MspPostInit+0xb0>)
 800160a:	f001 fd87 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800160e:	e021      	b.n	8001654 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_TIM_MspPostInit+0xb4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11c      	bne.n	8001654 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_TIM_MspPostInit+0xac>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001642:	2302      	movs	r3, #2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001650:	f001 fd64 	bl	800311c <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800
 8001668:	40000400 	.word	0x40000400

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_UART_MspInit+0x7c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d128      	bne.n	80016e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_UART_MspInit+0x80>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <HAL_UART_MspInit+0x80>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_UART_MspInit+0x80>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0x80>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_UART_MspInit+0x80>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_UART_MspInit+0x80>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016be:	230c      	movs	r3, #12
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ce:	2307      	movs	r3, #7
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f001 fd1e 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f968 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA1_Channel1_IRQHandler+0x10>)
 800174a:	f001 fbf5 	bl	8002f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000248 	.word	0x20000248

08001758 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM2_IRQHandler+0x10>)
 800175e:	f003 fd95 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002d8 	.word	0x200002d8

0800176c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM3_IRQHandler+0x10>)
 8001772:	f003 fd8b 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000324 	.word	0x20000324

08001780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_kill>:

int _kill(int pid, int sig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179a:	f005 fb8d 	bl	8006eb8 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2216      	movs	r2, #22
 80017a2:	601a      	str	r2, [r3, #0]
  return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_exit>:

void _exit (int status)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffe7 	bl	8001790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c2:	e7fe      	b.n	80017c2 <_exit+0x12>

080017c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e00a      	b.n	80017ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d6:	f3af 8000 	nop.w
 80017da:	4601      	mov	r1, r0
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf0      	blt.n	80017d6 <_read+0x12>
  }

  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e009      	b.n	8001824 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf1      	blt.n	8001810 <_write+0x12>
  }
  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_close>:

int _close(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	605a      	str	r2, [r3, #4]
  return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_isatty>:

int _isatty(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f005 faf2 	bl	8006eb8 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20003000 	.word	0x20003000
 8001900:	00000400 	.word	0x00000400
 8001904:	200005fc 	.word	0x200005fc
 8001908:	20000618 	.word	0x20000618

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopForever+0x6>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopForever+0xe>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopForever+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f005 fab1 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001962:	f7ff f921 	bl	8000ba8 <main>

08001966 <LoopForever>:

LoopForever:
    b LoopForever
 8001966:	e7fe      	b.n	8001966 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001968:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001974:	0800a11c 	.word	0x0800a11c
  ldr r2, =_sbss
 8001978:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800197c:	20000614 	.word	0x20000614

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x28>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f001 f9a1 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	200f      	movs	r0, #15
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fd02 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f9b9 	bl	8002d46 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f001 f981 	bl	8002cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000600 	.word	0x20000600

08001a38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000600 	.word	0x20000600

08001a50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b09a      	sub	sp, #104	; 0x68
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e172      	b.n	8001d92 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d176      	bne.n	8001bac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d152      	bne.n	8001b6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fc85 	bl	80013f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d13b      	bne.n	8001b6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fee7 	bl	80028c8 <ADC_Disable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12f      	bne.n	8001b6c <HAL_ADC_Init+0xe0>
 8001b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d12b      	bne.n	8001b6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b48:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_ADC_Init+0x310>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a94      	ldr	r2, [pc, #592]	; (8001da0 <HAL_ADC_Init+0x314>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9a      	lsrs	r2, r3, #18
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b5e:	e002      	b.n	8001b66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b88:	d110      	bne.n	8001bac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f023 0312 	bic.w	r3, r3, #18
 8001b92:	f043 0210 	orr.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 80df 	bne.w	8001d78 <HAL_ADC_Init+0x2ec>
 8001bba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80da 	bne.w	8001d78 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 80d2 	bne.w	8001d78 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bdc:	f043 0202 	orr.w	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_ADC_Init+0x318>)
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf0:	d102      	bne.n	8001bf8 <HAL_ADC_Init+0x16c>
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_ADC_Init+0x31c>)
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e002      	b.n	8001bfe <HAL_ADC_Init+0x172>
 8001bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bfc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d108      	bne.n	8001c1e <HAL_ADC_Init+0x192>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Init+0x192>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_ADC_Init+0x194>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11c      	bne.n	8001c5e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_ADC_Init+0x1ba>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x1ba>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Init+0x1bc>
 8001c46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d108      	bne.n	8001c5e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7e5b      	ldrb	r3, [r3, #25]
 8001c62:	035b      	lsls	r3, r3, #13
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c68:	2a01      	cmp	r2, #1
 8001c6a:	d002      	beq.n	8001c72 <HAL_ADC_Init+0x1e6>
 8001c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c70:	e000      	b.n	8001c74 <HAL_ADC_Init+0x1e8>
 8001c72:	2200      	movs	r2, #0
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c84:	4313      	orrs	r3, r2
 8001c86:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d11b      	bne.n	8001cca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7e5b      	ldrb	r3, [r3, #25]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	045a      	lsls	r2, r3, #17
 8001ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	663b      	str	r3, [r7, #96]	; 0x60
 8001cac:	e00d      	b.n	8001cca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cb6:	f043 0220 	orr.w	r2, r3, #32
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d114      	bne.n	8001d1a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cfe:	f023 0302 	bic.w	r3, r3, #2
 8001d02:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7e1b      	ldrb	r3, [r3, #24]
 8001d08:	039a      	lsls	r2, r3, #14
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4313      	orrs	r3, r2
 8001d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d16:	4313      	orrs	r3, r2
 8001d18:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_ADC_Init+0x320>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10c      	bne.n	8001d50 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f023 010f 	bic.w	r1, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4e:	e007      	b.n	8001d60 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020f 	bic.w	r2, r2, #15
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f023 0303 	bic.w	r3, r3, #3
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
 8001d76:	e00a      	b.n	8001d8e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f023 0312 	bic.w	r3, r3, #18
 8001d80:	f043 0210 	orr.w	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3768      	adds	r7, #104	; 0x68
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	50000300 	.word	0x50000300
 8001da8:	50000100 	.word	0x50000100
 8001dac:	fff0c007 	.word	0xfff0c007

08001db0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 80b9 	bne.w	8001f42 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Start_DMA+0x2e>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0b4      	b.n	8001f48 <HAL_ADC_Start_DMA+0x198>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_ADC_Start_DMA+0x1a0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80a0 	bne.w	8001f34 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fd03 	bl	8002800 <ADC_Enable>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 8092 	bne.w	8001f2a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_ADC_Start_DMA+0x1a0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_ADC_Start_DMA+0x80>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2e:	d115      	bne.n	8001e5c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d027      	beq.n	8001e9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e5a:	e01e      	b.n	8001e9a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_Start_DMA+0xcc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_ADC_Start_DMA+0x1a4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10e      	bne.n	8001e9a <HAL_ADC_Start_DMA+0xea>
 8001e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	f023 0206 	bic.w	r2, r3, #6
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_ADC_Start_DMA+0x1a8>)
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_ADC_Start_DMA+0x1ac>)
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_ADC_Start_DMA+0x1b0>)
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	221c      	movs	r2, #28
 8001ee2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3340      	adds	r3, #64	; 0x40
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f000 ff78 	bl	8002e08 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0204 	orr.w	r2, r2, #4
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e00d      	b.n	8001f46 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f32:	e008      	b.n	8001f46 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f40:	e001      	b.n	8001f46 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	50000300 	.word	0x50000300
 8001f54:	50000100 	.word	0x50000100
 8001f58:	08002735 	.word	0x08002735
 8001f5c:	080027af 	.word	0x080027af
 8001f60:	080027cb 	.word	0x080027cb

08001f64 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Stop_DMA+0x1a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e050      	b.n	8002020 <HAL_ADC_Stop_DMA+0xbc>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f86:	216c      	movs	r1, #108	; 0x6c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fd03 	bl	8002994 <ADC_ConversionStop>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d13e      	bne.n	8002016 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 ff84 	bl	8002ec6 <HAL_DMA_Abort>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0210 	bic.w	r2, r2, #16
 8001fe2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fc6c 	bl	80028c8 <ADC_Disable>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fc66 	bl	80028c8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b09b      	sub	sp, #108	; 0x6c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e2a4      	b.n	8002594 <HAL_ADC_ConfigChannel+0x56c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8288 	bne.w	8002572 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	231f      	movs	r3, #31
 8002080:	4093      	lsls	r3, r2
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
 80020a2:	e063      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d81e      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	3b1e      	subs	r3, #30
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3b1e      	subs	r3, #30
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
 80020e8:	e040      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0e      	cmp	r3, #14
 80020f0:	d81e      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3b3c      	subs	r3, #60	; 0x3c
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	3b3c      	subs	r3, #60	; 0x3c
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
 800212e:	e01d      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b5a      	subs	r3, #90	; 0x5a
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4019      	ands	r1, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3b5a      	subs	r3, #90	; 0x5a
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80e5 	bne.w	8002346 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	3b01      	subs	r3, #1
 8002210:	2b03      	cmp	r3, #3
 8002212:	d84f      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x28c>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_ADC_ConfigChannel+0x1f4>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800224f 	.word	0x0800224f
 8002224:	08002271 	.word	0x08002271
 8002228:	08002293 	.word	0x08002293
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002232:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	0691      	lsls	r1, r2, #26
 800223c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800224c:	e07e      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002254:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	0691      	lsls	r1, r2, #26
 800225e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002260:	430a      	orrs	r2, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800226e:	e06d      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002276:	4b83      	ldr	r3, [pc, #524]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800228e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e05c      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002298:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e04b      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800231e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002342:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002344:	e001      	b.n	800234a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002346:	bf00      	nop
 8002348:	e000      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
      break;
 800234a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_ADC_ConfigChannel+0x344>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x344>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_ADC_ConfigChannel+0x346>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 810a 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d00f      	beq.n	800239c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800239a:	e049      	b.n	8002430 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d91c      	bls.n	80023f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6999      	ldr	r1, [r3, #24]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1b      	subs	r3, #27
 80023d0:	2207      	movs	r2, #7
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4019      	ands	r1, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6898      	ldr	r0, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3b1b      	subs	r3, #27
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	e01b      	b.n	8002430 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6959      	ldr	r1, [r3, #20]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_ADC_ConfigChannel+0x460>)
 8002432:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800243c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800244c:	2b11      	cmp	r3, #17
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002460:	2b12      	cmp	r3, #18
 8002462:	f040 8091 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 808a 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247c:	d108      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x468>
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_ADC_ConfigChannel+0x464>)
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	e008      	b.n	8002496 <HAL_ADC_ConfigChannel+0x46e>
 8002484:	83fff000 	.word	0x83fff000
 8002488:	50000300 	.word	0x50000300
 800248c:	50000100 	.word	0x50000100
 8002490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002494:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x48e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x48e>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x490>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d150      	bne.n	800255e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x4b8>
 80024de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d13c      	bne.n	800255e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d11d      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x500>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f4:	d118      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_ADC_ConfigChannel+0x578>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_ADC_ConfigChannel+0x57c>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9a      	lsrs	r2, r3, #18
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002526:	e02e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b11      	cmp	r3, #17
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x520>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002544:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b12      	cmp	r3, #18
 800254e:	d11a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800255c:	e013      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002570:	e00a      	b.n	8002588 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002586:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002594:	4618      	mov	r0, r3
 8002596:	376c      	adds	r7, #108	; 0x6c
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000000 	.word	0x20000000
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b099      	sub	sp, #100	; 0x64
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c0:	d102      	bne.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	e002      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80025c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025cc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0a2      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e09b      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d17f      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d179      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002608:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800260a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d040      	beq.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002626:	035b      	lsls	r3, r3, #13
 8002628:	430b      	orrs	r3, r1
 800262a:	431a      	orrs	r2, r3
 800262c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d108      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d15c      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002672:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14b      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	430a      	orrs	r2, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002692:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002694:	e03c      	b.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d123      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80026e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d112      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026f2:	f023 030f 	bic.w	r3, r3, #15
 80026f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026fa:	e009      	b.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800270e:	e000      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002710:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800271a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800271e:	4618      	mov	r0, r3
 8002720:	3764      	adds	r7, #100	; 0x64
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	50000100 	.word	0x50000100
 8002730:	50000300 	.word	0x50000300

08002734 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	d126      	bne.n	800279c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002764:	2b00      	cmp	r3, #0
 8002766:	d115      	bne.n	8002794 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff f95b 	bl	8001a50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800279a:	e004      	b.n	80027a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff f951 	bl	8001a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff f941 	bl	8001a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <ADC_Enable+0x2c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <ADC_Enable+0x2c>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <ADC_Enable+0x2e>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d143      	bne.n	80028ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <ADC_Enable+0xc4>)
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f043 0210 	orr.w	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e02f      	b.n	80028bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800286c:	f7ff f8e4 	bl	8001a38 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002872:	e01b      	b.n	80028ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002874:	f7ff f8e0 	bl	8001a38 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d914      	bls.n	80028ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00d      	beq.n	80028ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f043 0210 	orr.w	r2, r3, #16
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d1dc      	bne.n	8002874 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	8000003f 	.word	0x8000003f

080028c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d108      	bne.n	80028f4 <ADC_Disable+0x2c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <ADC_Disable+0x2c>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <ADC_Disable+0x2e>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d047      	beq.n	800298a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030d 	and.w	r3, r3, #13
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10f      	bne.n	8002928 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0202 	orr.w	r2, r2, #2
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2203      	movs	r2, #3
 800291e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002920:	f7ff f88a 	bl	8001a38 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002926:	e029      	b.n	800297c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e023      	b.n	800298c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002944:	f7ff f878 	bl	8001a38 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d914      	bls.n	800297c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10d      	bne.n	800297c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d0dc      	beq.n	8002944 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 809b 	beq.w	8002af0 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029c8:	d12a      	bne.n	8002a20 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d126      	bne.n	8002a20 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d122      	bne.n	8002a20 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80029da:	230c      	movs	r3, #12
 80029dc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029de:	e014      	b.n	8002a0a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4a46      	ldr	r2, [pc, #280]	; (8002afc <ADC_ConversionStop+0x168>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d90d      	bls.n	8002a04 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e076      	b.n	8002af2 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3301      	adds	r3, #1
 8002a08:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d1e3      	bne.n	80029e0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2240      	movs	r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b60      	cmp	r3, #96	; 0x60
 8002a24:	d015      	beq.n	8002a52 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d10e      	bne.n	8002a52 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0210 	orr.w	r2, r2, #16
 8002a50:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d015      	beq.n	8002a84 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d10e      	bne.n	8002a84 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b60      	cmp	r3, #96	; 0x60
 8002a88:	d005      	beq.n	8002a96 <ADC_ConversionStop+0x102>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b6c      	cmp	r3, #108	; 0x6c
 8002a8e:	d105      	bne.n	8002a9c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a90:	230c      	movs	r3, #12
 8002a92:	617b      	str	r3, [r7, #20]
        break;
 8002a94:	e005      	b.n	8002aa2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a96:	2308      	movs	r3, #8
 8002a98:	617b      	str	r3, [r7, #20]
        break;
 8002a9a:	e002      	b.n	8002aa2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
        break;
 8002aa0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe ffc9 	bl	8001a38 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002aa8:	e01b      	b.n	8002ae2 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aaa:	f7fe ffc5 	bl	8001a38 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b0b      	cmp	r3, #11
 8002ab6:	d914      	bls.n	8002ae2 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0210 	orr.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1dc      	bne.n	8002aaa <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	000993ff 	.word	0x000993ff

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0c      	blt.n	8002bcc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <__NVIC_ClearPendingIRQ+0x38>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff0b 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d04:	f7ff ff20 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ff8e 	bl	8002c30 <NVIC_EncodePriority>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff5d 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff13 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffa2 	bl	8002c98 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff17 	bl	8002ba0 <__NVIC_ClearPendingIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e037      	b.n	8002e00 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002da6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f97a 	bl	80030dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}  
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Start_IT+0x20>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e04a      	b.n	8002ebe <HAL_DMA_Start_IT+0xb6>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d13a      	bne.n	8002eb0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f90d 	bl	800307e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 020e 	orr.w	r2, r2, #14
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e00f      	b.n	8002e9e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 020a 	orr.w	r2, r2, #10
 8002e8c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0204 	bic.w	r2, r2, #4
 8002e9c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d008      	beq.n	8002eea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2204      	movs	r2, #4
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e020      	b.n	8002f2c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020e 	bic.w	r2, r2, #14
 8002ef8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f202 	lsl.w	r2, r1, r2
 8002f18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2204      	movs	r2, #4
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d024      	beq.n	8002faa <HAL_DMA_IRQHandler+0x72>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01f      	beq.n	8002faa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2104      	movs	r1, #4
 8002f92:	fa01 f202 	lsl.w	r2, r1, r2
 8002f96:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d06a      	beq.n	8003076 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	e065      	b.n	8003076 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2202      	movs	r2, #2
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02c      	beq.n	8003014 <HAL_DMA_IRQHandler+0xdc>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d027      	beq.n	8003014 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 020a 	bic.w	r2, r2, #10
 8002fe0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d035      	beq.n	8003076 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003012:	e030      	b.n	8003076 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2208      	movs	r2, #8
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d028      	beq.n	8003076 <HAL_DMA_IRQHandler+0x13e>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d023      	beq.n	8003076 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 020e 	bic.w	r2, r2, #14
 800303c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
    }
  }
}  
 8003074:	e7ff      	b.n	8003076 <HAL_DMA_IRQHandler+0x13e>
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d108      	bne.n	80030be <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030bc:	e007      	b.n	80030ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <DMA_CalcBaseAndBitshift+0x34>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <DMA_CalcBaseAndBitshift+0x38>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a06      	ldr	r2, [pc, #24]	; (8003118 <DMA_CalcBaseAndBitshift+0x3c>)
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	bffdfff8 	.word	0xbffdfff8
 8003114:	cccccccd 	.word	0xcccccccd
 8003118:	40020000 	.word	0x40020000

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	e14e      	b.n	80033ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8140 	beq.w	80033c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d005      	beq.n	800315c <HAL_GPIO_Init+0x40>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d130      	bne.n	80031be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003192:	2201      	movs	r2, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 0201 	and.w	r2, r3, #1
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d017      	beq.n	80031fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d123      	bne.n	800324e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	6939      	ldr	r1, [r7, #16]
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0203 	and.w	r2, r3, #3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 809a 	beq.w	80033c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003290:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a54      	ldr	r2, [pc, #336]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_GPIO_Init+0x2cc>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a8:	4a50      	ldr	r2, [pc, #320]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	220f      	movs	r2, #15
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d2:	d013      	beq.n	80032fc <HAL_GPIO_Init+0x1e0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a46      	ldr	r2, [pc, #280]	; (80033f0 <HAL_GPIO_Init+0x2d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00d      	beq.n	80032f8 <HAL_GPIO_Init+0x1dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <HAL_GPIO_Init+0x2d8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a44      	ldr	r2, [pc, #272]	; (80033f8 <HAL_GPIO_Init+0x2dc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_GPIO_Init+0x1d4>
 80032ec:	2303      	movs	r3, #3
 80032ee:	e006      	b.n	80032fe <HAL_GPIO_Init+0x1e2>
 80032f0:	2305      	movs	r3, #5
 80032f2:	e004      	b.n	80032fe <HAL_GPIO_Init+0x1e2>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e002      	b.n	80032fe <HAL_GPIO_Init+0x1e2>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_GPIO_Init+0x1e2>
 80032fc:	2300      	movs	r3, #0
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4093      	lsls	r3, r2
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800330e:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_GPIO_Init+0x2d0>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331c:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003340:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033be:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <HAL_GPIO_Init+0x2e0>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f aea9 	bne.w	800312c <HAL_GPIO_Init+0x10>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	48000400 	.word	0x48000400
 80033f4:	48000800 	.word	0x48000800
 80033f8:	48000c00 	.word	0x48000c00
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
 800340c:	4613      	mov	r3, r2
 800340e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800341c:	e002      	b.n	8003424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003436:	af00      	add	r7, sp, #0
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003440:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f001 b823 	b.w	800449c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 817d 	beq.w	8003766 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800346c:	4bbc      	ldr	r3, [pc, #752]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b04      	cmp	r3, #4
 8003476:	d00c      	beq.n	8003492 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003478:	4bb9      	ldr	r3, [pc, #740]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d15c      	bne.n	800353e <HAL_RCC_OscConfig+0x10e>
 8003484:	4bb6      	ldr	r3, [pc, #728]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d155      	bne.n	800353e <HAL_RCC_OscConfig+0x10e>
 8003492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003496:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_RCC_OscConfig+0x94>
 80034be:	4ba8      	ldr	r3, [pc, #672]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 80034c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034ec:	4b9c      	ldr	r3, [pc, #624]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003504:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f042 0220 	orr.w	r2, r2, #32
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f002 021f 	and.w	r2, r2, #31
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 811f 	beq.w	8003764 <HAL_RCC_OscConfig+0x334>
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8116 	bne.w	8003764 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f000 bfaf 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x12e>
 8003550:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a82      	ldr	r2, [pc, #520]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e036      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x158>
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b79      	ldr	r3, [pc, #484]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a78      	ldr	r2, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e021      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 8003588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x184>
 800359a:	4b71      	ldr	r3, [pc, #452]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6e      	ldr	r3, [pc, #440]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0x19c>
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f023 020f 	bic.w	r2, r3, #15
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	495f      	ldr	r1, [pc, #380]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d059      	beq.n	80036aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fa1f 	bl	8001a38 <HAL_GetTick>
 80035fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fa1a 	bl	8001a38 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b64      	cmp	r3, #100	; 0x64
 800360e:	d902      	bls.n	8003616 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	f000 bf43 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800362a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_RCC_OscConfig+0x218>
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x244>
 8003648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800365c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003660:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003664:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003678:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800367c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003688:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ab      	beq.n	8003600 <HAL_RCC_OscConfig+0x1d0>
 80036a8:	e05d      	b.n	8003766 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe f9c5 	bl	8001a38 <HAL_GetTick>
 80036ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe f9c0 	bl	8001a38 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d902      	bls.n	80036ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	f000 bee9 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80036ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <HAL_RCC_OscConfig+0x2cc>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	e015      	b.n	8003728 <HAL_RCC_OscConfig+0x2f8>
 80036fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003700:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003714:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003718:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCC_OscConfig+0x330>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800372c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003730:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800373c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f042 0220 	orr.w	r2, r2, #32
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f002 021f 	and.w	r2, r2, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ab      	bne.n	80036b4 <HAL_RCC_OscConfig+0x284>
 800375c:	e003      	b.n	8003766 <HAL_RCC_OscConfig+0x336>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 817d 	beq.w	8003a76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800377c:	4ba6      	ldr	r3, [pc, #664]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003788:	4ba3      	ldr	r3, [pc, #652]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d172      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 8003794:	4ba0      	ldr	r3, [pc, #640]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d16c      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80037b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3a0>
 80037ca:	4b93      	ldr	r3, [pc, #588]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x3c8>
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037e2:	2302      	movs	r3, #2
 80037e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037f4:	4b88      	ldr	r3, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2202      	movs	r2, #2
 80037fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800380a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800380e:	fab2 f282 	clz	r2, r2
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f042 0220 	orr.w	r2, r2, #32
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f002 021f 	and.w	r2, r2, #31
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCC_OscConfig+0x410>
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d002      	beq.n	8003840 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f000 be2e 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	21f8      	movs	r1, #248	; 0xf8
 8003856:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800385e:	fa91 f1a1 	rbit	r1, r1
 8003862:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003866:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800386a:	fab1 f181 	clz	r1, r1
 800386e:	b2c9      	uxtb	r1, r1
 8003870:	408b      	lsls	r3, r1
 8003872:	4969      	ldr	r1, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003878:	e0fd      	b.n	8003a76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8088 	beq.w	800399c <HAL_RCC_OscConfig+0x56c>
 800388c:	2301      	movs	r3, #1
 800388e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800389e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	2301      	movs	r3, #1
 80038b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe f8be 	bl	8001a38 <HAL_GetTick>
 80038bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fe f8b9 	bl	8001a38 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	f000 bde2 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80038d8:	2302      	movs	r3, #2
 80038da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80038ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_OscConfig+0x4d8>
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e013      	b.n	8003930 <HAL_RCC_OscConfig+0x500>
 8003908:	2302      	movs	r3, #2
 800390a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003920:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2202      	movs	r2, #2
 8003932:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003936:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003942:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0af      	beq.n	80038c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	21f8      	movs	r1, #248	; 0xf8
 8003978:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003980:	fa91 f1a1 	rbit	r1, r1
 8003984:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003988:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800398c:	fab1 f181 	clz	r1, r1
 8003990:	b2c9      	uxtb	r1, r1
 8003992:	408b      	lsls	r3, r1
 8003994:	4920      	ldr	r1, [pc, #128]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
 800399a:	e06c      	b.n	8003a76 <HAL_RCC_OscConfig+0x646>
 800399c:	2301      	movs	r3, #1
 800399e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80039ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe f836 	bl	8001a38 <HAL_GetTick>
 80039cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fe f831 	bl	8001a38 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	f000 bd5a 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d104      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5ec>
 8003a12:	4b01      	ldr	r3, [pc, #4]	; (8003a18 <HAL_RCC_OscConfig+0x5e8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e015      	b.n	8003a44 <HAL_RCC_OscConfig+0x614>
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a40:	4bc8      	ldr	r3, [pc, #800]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003a56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ad      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8110 	beq.w	8003cac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d079      	beq.n	8003b90 <HAL_RCC_OscConfig+0x760>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4bab      	ldr	r3, [pc, #684]	; (8003d68 <HAL_RCC_OscConfig+0x938>)
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd ffb7 	bl	8001a38 <HAL_GetTick>
 8003aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fd ffb2 	bl	8001a38 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f000 bcdb 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f1a3 	rbit	r1, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b66:	6019      	str	r1, [r3, #0]
  return result;
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0a0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x6a0>
 8003b8e:	e08d      	b.n	8003cac <HAL_RCC_OscConfig+0x87c>
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f2a3 	rbit	r2, r3
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bb2:	601a      	str	r2, [r3, #0]
  return result;
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x938>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd ff31 	bl	8001a38 <HAL_GetTick>
 8003bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fd ff2c 	bl	8001a38 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	f000 bc55 	b.w	800449c <HAL_RCC_OscConfig+0x106c>
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c1e:	2202      	movs	r2, #2
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	fa93 f2a3 	rbit	r2, r3
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	fa93 f2a3 	rbit	r2, r3
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003c5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	6019      	str	r1, [r3, #0]
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f1a3 	rbit	r1, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c84:	6019      	str	r1, [r3, #0]
  return result;
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d197      	bne.n	8003bdc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 81a1 	beq.w	8004004 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003cfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fe8d 	bl	8001a38 <HAL_GetTick>
 8003d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	e009      	b.n	8003d38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fe88 	bl	8001a38 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e3b1      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCC_OscConfig+0x93c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x940>
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCC_OscConfig+0x934>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e03c      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	10908120 	.word	0x10908120
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x96a>
 8003d80:	4bc1      	ldr	r3, [pc, #772]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4ac0      	ldr	r2, [pc, #768]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	4bbe      	ldr	r3, [pc, #760]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4abd      	ldr	r2, [pc, #756]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	e020      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x994>
 8003daa:	4bb7      	ldr	r3, [pc, #732]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4ab6      	ldr	r2, [pc, #728]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6213      	str	r3, [r2, #32]
 8003db6:	4bb4      	ldr	r3, [pc, #720]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4ab3      	ldr	r2, [pc, #716]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6213      	str	r3, [r2, #32]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0x9ac>
 8003dc4:	4bb0      	ldr	r3, [pc, #704]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4aaf      	ldr	r2, [pc, #700]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	4bad      	ldr	r3, [pc, #692]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4aac      	ldr	r2, [pc, #688]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8081 	beq.w	8003ef0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fd fe23 	bl	8001a38 <HAL_GetTick>
 8003df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd fe1e 	bl	8001a38 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e345      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8003e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003e60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d102      	bne.n	8003e7c <HAL_RCC_OscConfig+0xa4c>
 8003e76:	4b84      	ldr	r3, [pc, #528]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	e013      	b.n	8003ea4 <HAL_RCC_OscConfig+0xa74>
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e84:	2202      	movs	r2, #2
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	4b79      	ldr	r3, [pc, #484]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003eac:	2102      	movs	r1, #2
 8003eae:	6011      	str	r1, [r2, #0]
 8003eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	fa92 f1a2 	rbit	r1, r2
 8003ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ec6:	6011      	str	r1, [r2, #0]
  return result;
 8003ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ecc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	fab2 f282 	clz	r2, r2
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	f002 021f 	and.w	r2, r2, #31
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d084      	beq.n	8003df8 <HAL_RCC_OscConfig+0x9c8>
 8003eee:	e07f      	b.n	8003ff0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fda2 	bl	8001a38 <HAL_GetTick>
 8003ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fd9d 	bl	8001a38 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e2c4      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8003f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	fa93 f2a3 	rbit	r2, r3
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f3e:	2202      	movs	r2, #2
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	fa93 f2a3 	rbit	r2, r3
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f58:	601a      	str	r2, [r3, #0]
  return result;
 8003f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_OscConfig+0xb4e>
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	e013      	b.n	8003fa6 <HAL_RCC_OscConfig+0xb76>
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f86:	2202      	movs	r2, #2
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	fa93 f2a3 	rbit	r2, r3
 8003f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003faa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fae:	2102      	movs	r1, #2
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	fa92 f1a2 	rbit	r1, r2
 8003fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fc8:	6011      	str	r1, [r2, #0]
  return result;
 8003fca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	fab2 f282 	clz	r2, r2
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d184      	bne.n	8003efa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b23      	ldr	r3, [pc, #140]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8242 	beq.w	800449a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <HAL_RCC_OscConfig+0xc58>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	f000 8213 	beq.w	800444a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b02      	cmp	r3, #2
 8004032:	f040 8162 	bne.w	80042fa <HAL_RCC_OscConfig+0xeca>
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800403e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004048:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	fa93 f2a3 	rbit	r2, r3
 8004052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004056:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800405a:	601a      	str	r2, [r3, #0]
  return result;
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004064:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd fcdc 	bl	8001a38 <HAL_GetTick>
 8004080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004084:	e00c      	b.n	80040a0 <HAL_RCC_OscConfig+0xc70>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd fcd4 	bl	8001a38 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1fd      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fa93 f2a3 	rbit	r2, r3
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040c4:	601a      	str	r2, [r3, #0]
  return result;
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80040ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_OscConfig+0xcba>
 80040e4:	4bb0      	ldr	r3, [pc, #704]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	e027      	b.n	800413a <HAL_RCC_OscConfig+0xd0a>
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80040f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004122:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004130:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4b9c      	ldr	r3, [pc, #624]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800413e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004146:	6011      	str	r1, [r2, #0]
 8004148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800414c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	fa92 f1a2 	rbit	r1, r2
 8004156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800415a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800415e:	6011      	str	r1, [r2, #0]
  return result;
 8004160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004164:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	fab2 f282 	clz	r2, r2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	f042 0220 	orr.w	r2, r2, #32
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	f002 021f 	and.w	r2, r2, #31
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d182      	bne.n	800408c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004186:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	497f      	ldr	r1, [pc, #508]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	fa93 f2a3 	rbit	r2, r3
 80041ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041d2:	601a      	str	r2, [r3, #0]
  return result;
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80041dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	461a      	mov	r2, r3
 80041f0:	2301      	movs	r3, #1
 80041f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fc20 	bl	8001a38 <HAL_GetTick>
 80041f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fc:	e009      	b.n	8004212 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fd fc1b 	bl	8001a38 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e144      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800421a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800421e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	fa93 f2a3 	rbit	r2, r3
 800422e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004232:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004236:	601a      	str	r2, [r3, #0]
  return result;
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0xe2c>
 8004256:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	e027      	b.n	80042ac <HAL_RCC_OscConfig+0xe7c>
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fa93 f2a3 	rbit	r2, r3
 8004278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800428a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	fa92 f1a2 	rbit	r1, r2
 80042c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042d0:	6011      	str	r1, [r2, #0]
  return result;
 80042d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	f002 021f 	and.w	r2, r2, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f202 	lsl.w	r2, r1, r2
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d082      	beq.n	80041fe <HAL_RCC_OscConfig+0xdce>
 80042f8:	e0cf      	b.n	800449a <HAL_RCC_OscConfig+0x106a>
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800431e:	601a      	str	r2, [r3, #0]
  return result;
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004328:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	461a      	mov	r2, r3
 800433c:	2300      	movs	r3, #0
 800433e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fb7a 	bl	8001a38 <HAL_GetTick>
 8004344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fd fb75 	bl	8001a38 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e09e      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800436a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	fa93 f2a3 	rbit	r2, r3
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004382:	601a      	str	r2, [r3, #0]
  return result;
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800438c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d104      	bne.n	80043ac <HAL_RCC_OscConfig+0xf7c>
 80043a2:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <HAL_RCC_OscConfig+0xf78>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	e029      	b.n	80043fc <HAL_RCC_OscConfig+0xfcc>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	fa93 f2a3 	rbit	r2, r3
 80043c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_OscConfig+0x1078>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004400:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	fa92 f1a2 	rbit	r1, r2
 8004418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004420:	6011      	str	r1, [r2, #0]
  return result;
 8004422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004426:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d180      	bne.n	800434a <HAL_RCC_OscConfig+0xf1a>
 8004448:	e027      	b.n	800449a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01e      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x1078>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800446a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	429a      	cmp	r2, r3
 800447c:	d10b      	bne.n	8004496 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800447e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b09e      	sub	sp, #120	; 0x78
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e162      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b90      	ldr	r3, [pc, #576]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	498b      	ldr	r1, [pc, #556]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e14a      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b82      	ldr	r3, [pc, #520]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	497f      	ldr	r1, [pc, #508]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 800450e:	4313      	orrs	r3, r2
 8004510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80dc 	beq.w	80046d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13c      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xf6>
 8004528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800452c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d102      	bne.n	8004552 <HAL_RCC_ClockConfig+0xa6>
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	e00f      	b.n	8004572 <HAL_RCC_ClockConfig+0xc6>
 8004552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	667b      	str	r3, [r7, #100]	; 0x64
 8004560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
 8004566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456e:	4b67      	ldr	r3, [pc, #412]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004576:	65ba      	str	r2, [r7, #88]	; 0x58
 8004578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004582:	fab2 f282 	clz	r2, r2
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f042 0220 	orr.w	r2, r2, #32
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	f002 021f 	and.w	r2, r2, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d17b      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0f3      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d13c      	bne.n	8004624 <HAL_RCC_ClockConfig+0x178>
 80045aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x128>
 80045ce:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	e00f      	b.n	80045f4 <HAL_RCC_ClockConfig+0x148>
 80045d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
 80045e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80045fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f002 021f 	and.w	r2, r2, #31
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f202 	lsl.w	r2, r1, r2
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d13a      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0b2      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
 8004624:	2302      	movs	r3, #2
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_RCC_ClockConfig+0x1a0>
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e00d      	b.n	8004668 <HAL_RCC_ClockConfig+0x1bc>
 800464c:	2302      	movs	r3, #2
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	2302      	movs	r3, #2
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2202      	movs	r2, #2
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	fa92 f2a2 	rbit	r2, r2
 8004672:	617a      	str	r2, [r7, #20]
  return result;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	fab2 f282 	clz	r2, r2
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f042 0220 	orr.w	r2, r2, #32
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	f002 021f 	and.w	r2, r2, #31
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f202 	lsl.w	r2, r1, r2
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e079      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	491a      	ldr	r1, [pc, #104]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a8:	f7fd f9c6 	bl	8001a38 <HAL_GetTick>
 80046ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fd f9c2 	bl	8001a38 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e061      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_ClockConfig+0x260>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d214      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0207 	bic.w	r2, r3, #7
 80046ee:	4906      	ldr	r1, [pc, #24]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e040      	b.n	800478a <HAL_RCC_ClockConfig+0x2de>
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4912      	ldr	r1, [pc, #72]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800474e:	f000 f829 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004752:	4601      	mov	r1, r0
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCC_ClockConfig+0x2e8>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	22f0      	movs	r2, #240	; 0xf0
 800475e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	fa92 f2a2 	rbit	r2, r2
 8004766:	60fa      	str	r2, [r7, #12]
  return result;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	40d3      	lsrs	r3, r2
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x2ec>)
 8004774:	5cd3      	ldrb	r3, [r2, r3]
 8004776:	fa21 f303 	lsr.w	r3, r1, r3
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <HAL_RCC_ClockConfig+0x2f0>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd f914 	bl	80019b0 <HAL_InitTick>
  
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3778      	adds	r7, #120	; 0x78
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	08009d00 	.word	0x08009d00
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004

080047a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b08b      	sub	sp, #44	; 0x2c
 80047a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d002      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x30>
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d003      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0x36>
 80047d2:	e03c      	b.n	800484e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047d6:	623b      	str	r3, [r7, #32]
      break;
 80047d8:	e03c      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	fa92 f2a2 	rbit	r2, r2
 80047ec:	607a      	str	r2, [r7, #4]
  return result;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	fab2 f282 	clz	r2, r2
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	40d3      	lsrs	r3, r2
 80047f8:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_RCC_GetSysClockFreq+0xc8>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047fe:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	220f      	movs	r2, #15
 8004808:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	fa92 f2a2 	rbit	r2, r2
 8004810:	60fa      	str	r2, [r7, #12]
  return result;
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	fab2 f282 	clz	r2, r2
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	40d3      	lsrs	r3, r2
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <HAL_RCC_GetSysClockFreq+0xcc>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800482c:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	e004      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	623b      	str	r3, [r7, #32]
      break;
 800484c:	e002      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004850:	623b      	str	r3, [r7, #32]
      break;
 8004852:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004854:	6a3b      	ldr	r3, [r7, #32]
}
 8004856:	4618      	mov	r0, r3
 8004858:	372c      	adds	r7, #44	; 0x2c
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	007a1200 	.word	0x007a1200
 800486c:	08009d18 	.word	0x08009d18
 8004870:	08009d28 	.word	0x08009d28
 8004874:	003d0900 	.word	0x003d0900

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004896:	f7ff ffef 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 800489a:	4601      	mov	r1, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	fa92 f2a2 	rbit	r2, r2
 80048b0:	603a      	str	r2, [r7, #0]
  return result;
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	40d3      	lsrs	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	08009d10 	.word	0x08009d10

080048d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048da:	f7ff ffcd 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048de:	4601      	mov	r1, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80048ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	fa92 f2a2 	rbit	r2, r2
 80048f4:	603a      	str	r2, [r7, #0]
  return result;
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	fab2 f282 	clz	r2, r2
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	40d3      	lsrs	r3, r2
 8004900:	4a04      	ldr	r2, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	08009d10 	.word	0x08009d10

08004918 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b092      	sub	sp, #72	; 0x48
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80cd 	beq.w	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493c:	4b8e      	ldr	r3, [pc, #568]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10e      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a8a      	ldr	r2, [pc, #552]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	61d3      	str	r3, [r2, #28]
 8004954:	4b88      	ldr	r3, [pc, #544]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b85      	ldr	r3, [pc, #532]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d118      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b82      	ldr	r3, [pc, #520]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a81      	ldr	r2, [pc, #516]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd f85b 	bl	8001a38 <HAL_GetTick>
 8004982:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fd f857 	bl	8001a38 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0ea      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b78      	ldr	r3, [pc, #480]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049a4:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d07d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049be:	429a      	cmp	r2, r3
 80049c0:	d076      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	4b66      	ldr	r3, [pc, #408]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	461a      	mov	r2, r3
 80049ec:	2301      	movs	r3, #1
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b5d      	ldr	r3, [pc, #372]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d045      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd f808 	bl	8001a38 <HAL_GetTick>
 8004a28:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fd f804 	bl	8001a38 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e095      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004a42:	2302      	movs	r3, #2
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	2302      	movs	r3, #2
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	61fb      	str	r3, [r7, #28]
  return result;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f043 0302 	orr.w	r3, r3, #2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d102      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004a70:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	e007      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2202      	movs	r2, #2
 8004a88:	613a      	str	r2, [r7, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	fa92 f2a2 	rbit	r2, r2
 8004a90:	60fa      	str	r2, [r7, #12]
  return result;
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f002 021f 	and.w	r2, r2, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0bd      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ab0:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	492e      	ldr	r1, [pc, #184]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aca:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae2:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4922      	ldr	r1, [pc, #136]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b00:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	491a      	ldr	r1, [pc, #104]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b1e:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	4913      	ldr	r1, [pc, #76]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	490b      	ldr	r1, [pc, #44]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4904      	ldr	r1, [pc, #16]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3748      	adds	r7, #72	; 0x48
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	10908100 	.word	0x10908100

08004b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e049      	b.n	8004c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fc88 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 fecc 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d001      	beq.n	8004c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e038      	b.n	8004cbe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_TIM_Base_Start+0x98>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_TIM_Base_Start+0x48>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d009      	beq.n	8004c7c <HAL_TIM_Base_Start+0x48>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIM_Base_Start+0x9c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIM_Base_Start+0x48>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <HAL_TIM_Base_Start+0xa0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d115      	bne.n	8004ca8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_TIM_Base_Start+0xa4>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d015      	beq.n	8004cba <HAL_TIM_Base_Start+0x86>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d011      	beq.n	8004cba <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	e008      	b.n	8004cba <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	00010007 	.word	0x00010007

08004cdc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e049      	b.n	8004d82 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f841 	bl	8004d8a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fe20 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_OC_Start_IT+0x28>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e03c      	b.n	8004e42 <HAL_TIM_OC_Start_IT+0xa2>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d109      	bne.n	8004de2 <HAL_TIM_OC_Start_IT+0x42>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e02f      	b.n	8004e42 <HAL_TIM_OC_Start_IT+0xa2>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d109      	bne.n	8004dfc <HAL_TIM_OC_Start_IT+0x5c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e022      	b.n	8004e42 <HAL_TIM_OC_Start_IT+0xa2>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d109      	bne.n	8004e16 <HAL_TIM_OC_Start_IT+0x76>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e015      	b.n	8004e42 <HAL_TIM_OC_Start_IT+0xa2>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d109      	bne.n	8004e30 <HAL_TIM_OC_Start_IT+0x90>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e008      	b.n	8004e42 <HAL_TIM_OC_Start_IT+0xa2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0d3      	b.n	8004ff2 <HAL_TIM_OC_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_OC_Start_IT+0xba>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	e023      	b.n	8004ea2 <HAL_TIM_OC_Start_IT+0x102>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_OC_Start_IT+0xca>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_OC_Start_IT+0x102>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_OC_Start_IT+0xda>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_OC_Start_IT+0x102>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_OC_Start_IT+0xea>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_OC_Start_IT+0x102>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_OC_Start_IT+0xfa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_OC_Start_IT+0x102>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d841      	bhi.n	8004f2c <HAL_TIM_OC_Start_IT+0x18c>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_TIM_OC_Start_IT+0x110>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f2d 	.word	0x08004f2d
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f1b 	.word	0x08004f1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0202 	orr.w	r2, r2, #2
 8004ef2:	60da      	str	r2, [r3, #12]
      break;
 8004ef4:	e01d      	b.n	8004f32 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0204 	orr.w	r2, r2, #4
 8004f04:	60da      	str	r2, [r3, #12]
      break;
 8004f06:	e014      	b.n	8004f32 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	60da      	str	r2, [r3, #12]
      break;
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0210 	orr.w	r2, r2, #16
 8004f28:	60da      	str	r2, [r3, #12]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d15b      	bne.n	8004ff0 <HAL_TIM_OC_Start_IT+0x250>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fa6b 	bl	800641c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <HAL_TIM_OC_Start_IT+0x25c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIM_OC_Start_IT+0x1ce>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <HAL_TIM_OC_Start_IT+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIM_OC_Start_IT+0x1ce>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <HAL_TIM_OC_Start_IT+0x264>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_OC_Start_IT+0x1ce>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <HAL_TIM_OC_Start_IT+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_OC_Start_IT+0x1d2>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_TIM_OC_Start_IT+0x1d4>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_OC_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_TIM_OC_Start_IT+0x25c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_TIM_OC_Start_IT+0x210>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIM_OC_Start_IT+0x210>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_TIM_OC_Start_IT+0x26c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_OC_Start_IT+0x210>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIM_OC_Start_IT+0x260>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d115      	bne.n	8004fdc <HAL_TIM_OC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <HAL_TIM_OC_Start_IT+0x270>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d015      	beq.n	8004fee <HAL_TIM_OC_Start_IT+0x24e>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d011      	beq.n	8004fee <HAL_TIM_OC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fda:	e008      	b.n	8004fee <HAL_TIM_OC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_OC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40000400 	.word	0x40000400
 8005010:	00010007 	.word	0x00010007

08005014 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e049      	b.n	80050ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f841 	bl	80050c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f000 fc84 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e041      	b.n	800516e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f839 	bl	8005176 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 fc22 	bl	8005960 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0208 	bic.w	r2, r2, #8
 800512a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d108      	bne.n	80051ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051bc:	7bbb      	ldrb	r3, [r7, #14]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d105      	bne.n	80051ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051c2:	7b7b      	ldrb	r3, [r7, #13]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d102      	bne.n	80051ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051c8:	7b3b      	ldrb	r3, [r7, #12]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e04f      	b.n	8005272 <HAL_TIM_OnePulse_Start_IT+0xe6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0202 	orr.w	r2, r2, #2
 8005200:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0204 	orr.w	r2, r2, #4
 8005210:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f8fe 	bl	800641c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	2104      	movs	r1, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f001 f8f7 	bl	800641c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <HAL_TIM_OnePulse_Start_IT+0xf0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIM_OnePulse_Start_IT+0xca>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a10      	ldr	r2, [pc, #64]	; (8005280 <HAL_TIM_OnePulse_Start_IT+0xf4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIM_OnePulse_Start_IT+0xca>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <HAL_TIM_OnePulse_Start_IT+0xf8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIM_OnePulse_Start_IT+0xca>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0d      	ldr	r2, [pc, #52]	; (8005288 <HAL_TIM_OnePulse_Start_IT+0xfc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_TIM_OnePulse_Start_IT+0xce>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_TIM_OnePulse_Start_IT+0xd0>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <HAL_TIM_OnePulse_Start_IT+0xe4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800

0800528c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0202 	mvn.w	r2, #2
 80052b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb27 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb19 	bl	800590e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb2a 	bl	8005936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0204 	mvn.w	r2, #4
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fafd 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 faef 	bl	800590e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb00 	bl	8005936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b08      	cmp	r3, #8
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0208 	mvn.w	r2, #8
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fad3 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fac5 	bl	800590e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fad6 	bl	8005936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0210 	mvn.w	r2, #16
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2208      	movs	r2, #8
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 faa9 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa9b 	bl	800590e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 faac 	bl	8005936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0201 	mvn.w	r2, #1
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fb ff94 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d10e      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d107      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 f906 	bl	8006648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 f8f9 	bl	800665c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d10e      	bne.n	8005496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d107      	bne.n	8005496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa5a 	bl	800594a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d10e      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d107      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0220 	mvn.w	r2, #32
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f8b9 	bl	8006634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_OC_ConfigChannel+0x1e>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e066      	b.n	80055b8 <HAL_TIM_OC_ConfigChannel+0xec>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b14      	cmp	r3, #20
 80054f6:	d857      	bhi.n	80055a8 <HAL_TIM_OC_ConfigChannel+0xdc>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_TIM_OC_ConfigChannel+0x34>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005555 	.word	0x08005555
 8005504:	080055a9 	.word	0x080055a9
 8005508:	080055a9 	.word	0x080055a9
 800550c:	080055a9 	.word	0x080055a9
 8005510:	08005563 	.word	0x08005563
 8005514:	080055a9 	.word	0x080055a9
 8005518:	080055a9 	.word	0x080055a9
 800551c:	080055a9 	.word	0x080055a9
 8005520:	08005571 	.word	0x08005571
 8005524:	080055a9 	.word	0x080055a9
 8005528:	080055a9 	.word	0x080055a9
 800552c:	080055a9 	.word	0x080055a9
 8005530:	0800557f 	.word	0x0800557f
 8005534:	080055a9 	.word	0x080055a9
 8005538:	080055a9 	.word	0x080055a9
 800553c:	080055a9 	.word	0x080055a9
 8005540:	0800558d 	.word	0x0800558d
 8005544:	080055a9 	.word	0x080055a9
 8005548:	080055a9 	.word	0x080055a9
 800554c:	080055a9 	.word	0x080055a9
 8005550:	0800559b 	.word	0x0800559b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa78 	bl	8005a50 <TIM_OC1_SetConfig>
      break;
 8005560:	e025      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 faf7 	bl	8005b5c <TIM_OC2_SetConfig>
      break;
 800556e:	e01e      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fb70 	bl	8005c5c <TIM_OC3_SetConfig>
      break;
 800557c:	e017      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fbe7 	bl	8005d58 <TIM_OC4_SetConfig>
      break;
 800558a:	e010      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fc44 	bl	8005e20 <TIM_OC5_SetConfig>
      break;
 8005598:	e009      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fc9b 	bl	8005edc <TIM_OC6_SetConfig>
      break;
 80055a6:	e002      	b.n	80055ae <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
      break;
 80055ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_TIM_IC_ConfigChannel+0x1e>
 80055da:	2302      	movs	r3, #2
 80055dc:	e088      	b.n	80056f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6819      	ldr	r1, [r3, #0]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f000 fd62 	bl	80060c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 020c 	bic.w	r2, r2, #12
 800560e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
 8005622:	e060      	b.n	80056e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b04      	cmp	r3, #4
 8005628:	d11c      	bne.n	8005664 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f000 fdce 	bl	80061da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800564c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6999      	ldr	r1, [r3, #24]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	619a      	str	r2, [r3, #24]
 8005662:	e040      	b.n	80056e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b08      	cmp	r3, #8
 8005668:	d11b      	bne.n	80056a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f000 fe1b 	bl	80062b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 020c 	bic.w	r2, r2, #12
 800568c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	e021      	b.n	80056e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d11c      	bne.n	80056e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f000 fe38 	bl	800632c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69d9      	ldr	r1, [r3, #28]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	61da      	str	r2, [r3, #28]
 80056e0:	e001      	b.n	80056e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIM_ConfigClockSource+0x1c>
 8005710:	2302      	movs	r3, #2
 8005712:	e0b6      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x18a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800573e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005750:	d03e      	beq.n	80057d0 <HAL_TIM_ConfigClockSource+0xd8>
 8005752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005756:	f200 8087 	bhi.w	8005868 <HAL_TIM_ConfigClockSource+0x170>
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575e:	f000 8086 	beq.w	800586e <HAL_TIM_ConfigClockSource+0x176>
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	d87f      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005768:	2b70      	cmp	r3, #112	; 0x70
 800576a:	d01a      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0xaa>
 800576c:	2b70      	cmp	r3, #112	; 0x70
 800576e:	d87b      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005770:	2b60      	cmp	r3, #96	; 0x60
 8005772:	d050      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x11e>
 8005774:	2b60      	cmp	r3, #96	; 0x60
 8005776:	d877      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005778:	2b50      	cmp	r3, #80	; 0x50
 800577a:	d03c      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0xfe>
 800577c:	2b50      	cmp	r3, #80	; 0x50
 800577e:	d873      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d058      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x13e>
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d86f      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005788:	2b30      	cmp	r3, #48	; 0x30
 800578a:	d064      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15e>
 800578c:	2b30      	cmp	r3, #48	; 0x30
 800578e:	d86b      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d060      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15e>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d867      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05c      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15e>
 800579c:	2b10      	cmp	r3, #16
 800579e:	d05a      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x15e>
 80057a0:	e062      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6899      	ldr	r1, [r3, #8]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f000 fe13 	bl	80063dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	609a      	str	r2, [r3, #8]
      break;
 80057ce:	e04f      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f000 fdfc 	bl	80063dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057f2:	609a      	str	r2, [r3, #8]
      break;
 80057f4:	e03c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	461a      	mov	r2, r3
 8005804:	f000 fcba 	bl	800617c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2150      	movs	r1, #80	; 0x50
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fdc9 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005814:	e02c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	461a      	mov	r2, r3
 8005824:	f000 fd16 	bl	8006254 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2160      	movs	r1, #96	; 0x60
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fdb9 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005834:	e01c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	461a      	mov	r2, r3
 8005844:	f000 fc9a 	bl	800617c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fda9 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005854:	e00c      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f000 fda0 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005866:	e003      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	e000      	b.n	8005870 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800586e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800589e:	2302      	movs	r3, #2
 80058a0:	e031      	b.n	8005906 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fb71 	bl	8005f9c <TIM_SlaveTimer_SetConfig>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e018      	b.n	8005906 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a32      	ldr	r2, [pc, #200]	; (8005a3c <TIM_Base_SetConfig+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d007      	beq.n	8005988 <TIM_Base_SetConfig+0x28>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0x28>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0xe0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <TIM_Base_SetConfig+0xdc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <TIM_Base_SetConfig+0x6a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d00f      	beq.n	80059ca <TIM_Base_SetConfig+0x6a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_Base_SetConfig+0xe0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00b      	beq.n	80059ca <TIM_Base_SetConfig+0x6a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <TIM_Base_SetConfig+0xe4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x6a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <TIM_Base_SetConfig+0xe8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x6a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <TIM_Base_SetConfig+0xec>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <TIM_Base_SetConfig+0xdc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_Base_SetConfig+0xc0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <TIM_Base_SetConfig+0xe4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0xc0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <TIM_Base_SetConfig+0xe8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0xc0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <TIM_Base_SetConfig+0xec>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d103      	bne.n	8005a28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <TIM_OC1_SetConfig+0xfc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00b      	beq.n	8005ac8 <TIM_OC1_SetConfig+0x78>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <TIM_OC1_SetConfig+0x100>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d007      	beq.n	8005ac8 <TIM_OC1_SetConfig+0x78>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <TIM_OC1_SetConfig+0x104>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC1_SetConfig+0x78>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <TIM_OC1_SetConfig+0x108>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10c      	bne.n	8005ae2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0308 	bic.w	r3, r3, #8
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0304 	bic.w	r3, r3, #4
 8005ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a19      	ldr	r2, [pc, #100]	; (8005b4c <TIM_OC1_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_OC1_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a18      	ldr	r2, [pc, #96]	; (8005b50 <TIM_OC1_SetConfig+0x100>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d007      	beq.n	8005b02 <TIM_OC1_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <TIM_OC1_SetConfig+0x104>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_OC1_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <TIM_OC1_SetConfig+0x108>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800

08005b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0210 	bic.w	r2, r3, #16
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0320 	bic.w	r3, r3, #32
 8005baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <TIM_OC2_SetConfig+0xf0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d10d      	bne.n	8005bdc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <TIM_OC2_SetConfig+0xf0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <TIM_OC2_SetConfig+0xa0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <TIM_OC2_SetConfig+0xf4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC2_SetConfig+0xa0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <TIM_OC2_SetConfig+0xf8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC2_SetConfig+0xa0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <TIM_OC2_SetConfig+0xfc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d113      	bne.n	8005c24 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <TIM_OC3_SetConfig+0xec>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10d      	bne.n	8005cda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <TIM_OC3_SetConfig+0xec>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_OC3_SetConfig+0x9e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <TIM_OC3_SetConfig+0xf0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_OC3_SetConfig+0x9e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <TIM_OC3_SetConfig+0xf4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC3_SetConfig+0x9e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <TIM_OC3_SetConfig+0xf8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800

08005d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_OC4_SetConfig+0xb8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x7c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_OC4_SetConfig+0xbc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x7c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_OC4_SetConfig+0xc0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC4_SetConfig+0x7c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_OC4_SetConfig+0xc4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40012c00 	.word	0x40012c00
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <TIM_OC5_SetConfig+0xac>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00b      	beq.n	8005e92 <TIM_OC5_SetConfig+0x72>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <TIM_OC5_SetConfig+0xb0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_OC5_SetConfig+0x72>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <TIM_OC5_SetConfig+0xb4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC5_SetConfig+0x72>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <TIM_OC5_SetConfig+0xb8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d109      	bne.n	8005ea6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800

08005edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	051b      	lsls	r3, r3, #20
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <TIM_OC6_SetConfig+0xb0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_OC6_SetConfig+0x74>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <TIM_OC6_SetConfig+0xb4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_OC6_SetConfig+0x74>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <TIM_OC6_SetConfig+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC6_SetConfig+0x74>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <TIM_OC6_SetConfig+0xbc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	029b      	lsls	r3, r3, #10
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400
 8005f98:	40014800 	.word	0x40014800

08005f9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b70      	cmp	r3, #112	; 0x70
 8005fe8:	d01a      	beq.n	8006020 <TIM_SlaveTimer_SetConfig+0x84>
 8005fea:	2b70      	cmp	r3, #112	; 0x70
 8005fec:	d860      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 8005fee:	2b60      	cmp	r3, #96	; 0x60
 8005ff0:	d054      	beq.n	800609c <TIM_SlaveTimer_SetConfig+0x100>
 8005ff2:	2b60      	cmp	r3, #96	; 0x60
 8005ff4:	d85c      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 8005ff6:	2b50      	cmp	r3, #80	; 0x50
 8005ff8:	d046      	beq.n	8006088 <TIM_SlaveTimer_SetConfig+0xec>
 8005ffa:	2b50      	cmp	r3, #80	; 0x50
 8005ffc:	d858      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d019      	beq.n	8006036 <TIM_SlaveTimer_SetConfig+0x9a>
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d854      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 8006006:	2b30      	cmp	r3, #48	; 0x30
 8006008:	d055      	beq.n	80060b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800600a:	2b30      	cmp	r3, #48	; 0x30
 800600c:	d850      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d051      	beq.n	80060b6 <TIM_SlaveTimer_SetConfig+0x11a>
 8006012:	2b20      	cmp	r3, #32
 8006014:	d84c      	bhi.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04d      	beq.n	80060b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800601a:	2b10      	cmp	r3, #16
 800601c:	d04b      	beq.n	80060b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800601e:	e047      	b.n	80060b0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f000 f9d4 	bl	80063dc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006034:	e040      	b.n	80060b8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b05      	cmp	r3, #5
 800603c:	d101      	bne.n	8006042 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e03b      	b.n	80060ba <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a1a      	ldr	r2, [r3, #32]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006068:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
      break;
 8006086:	e017      	b.n	80060b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	461a      	mov	r2, r3
 8006096:	f000 f871 	bl	800617c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800609a:	e00d      	b.n	80060b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6899      	ldr	r1, [r3, #8]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f000 f8d3 	bl	8006254 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80060ae:	e003      	b.n	80060b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      break;
 80060b4:	e000      	b.n	80060b8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80060b6:	bf00      	nop
  }

  return status;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <TIM_TI1_SetConfig+0xac>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_TI1_SetConfig+0x46>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f8:	d007      	beq.n	800610a <TIM_TI1_SetConfig+0x46>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <TIM_TI1_SetConfig+0xb0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_TI1_SetConfig+0x46>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <TIM_TI1_SetConfig+0xb4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <TIM_TI1_SetConfig+0x4a>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <TIM_TI1_SetConfig+0x4c>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e003      	b.n	800612e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	b2db      	uxtb	r3, r3
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f023 030a 	bic.w	r3, r3, #10
 8006148:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f003 030a 	and.w	r3, r3, #10
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40000400 	.word	0x40000400
 8006178:	40014000 	.word	0x40014000

0800617c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 030a 	bic.w	r3, r3, #10
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061da:	b480      	push	{r7}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f023 0210 	bic.w	r2, r3, #16
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	b29b      	uxth	r3, r3
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800622c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f023 0210 	bic.w	r2, r3, #16
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800627e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	031b      	lsls	r3, r3, #12
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 0303 	bic.w	r3, r3, #3
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006304:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	621a      	str	r2, [r3, #32]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006358:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800636a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	b29b      	uxth	r3, r3
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800637e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	031b      	lsls	r3, r3, #12
 8006384:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f043 0307 	orr.w	r3, r3, #7
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2201      	movs	r2, #1
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	43db      	mvns	r3, r3
 800643e:	401a      	ands	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	fa01 f303 	lsl.w	r3, r1, r3
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e054      	b.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a24      	ldr	r2, [pc, #144]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d009      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a13      	ldr	r2, [pc, #76]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a11      	ldr	r2, [pc, #68]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d10c      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4313      	orrs	r3, r2
 800650e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800655c:	2302      	movs	r3, #2
 800655e:	e060      	b.n	8006622 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a14      	ldr	r2, [pc, #80]	; (8006630 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d115      	bne.n	8006610 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	051b      	lsls	r3, r3, #20
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40012c00 	.word	0x40012c00

08006634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e040      	b.n	8006704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fa ffea 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8b6 	bl	8006820 <UART_SetConfig>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e022      	b.n	8006704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9e0 	bl	8006a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa67 	bl	8006bd0 <UART_CheckIdleState>
 8006702:	4603      	mov	r3, r0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	; 0x28
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006720:	2b20      	cmp	r3, #32
 8006722:	d178      	bne.n	8006816 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_UART_Transmit+0x24>
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e071      	b.n	8006818 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2221      	movs	r2, #33	; 0x21
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006742:	f7fb f979 	bl	8001a38 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	88fa      	ldrh	r2, [r7, #6]
 800674c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d108      	bne.n	8006774 <HAL_UART_Transmit+0x68>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e003      	b.n	800677c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800677c:	e030      	b.n	80067e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2200      	movs	r2, #0
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fac9 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e03c      	b.n	8006818 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	881a      	ldrh	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067b0:	b292      	uxth	r2, r2
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	3302      	adds	r3, #2
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e008      	b.n	80067ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b292      	uxth	r2, r2
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1c8      	bne.n	800677e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2140      	movs	r1, #64	; 0x40
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fa92 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e005      	b.n	8006818 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e000      	b.n	8006818 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006816:	2302      	movs	r3, #2
  }
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b8a      	ldr	r3, [pc, #552]	; (8006a74 <UART_SetConfig+0x254>)
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	430b      	orrs	r3, r1
 8006856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a78      	ldr	r2, [pc, #480]	; (8006a78 <UART_SetConfig+0x258>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d120      	bne.n	80068de <UART_SetConfig+0xbe>
 800689c:	4b77      	ldr	r3, [pc, #476]	; (8006a7c <UART_SetConfig+0x25c>)
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d817      	bhi.n	80068d8 <UART_SetConfig+0xb8>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x90>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068d3 	.word	0x080068d3
 80068bc:	080068c7 	.word	0x080068c7
 80068c0:	2300      	movs	r3, #0
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e01d      	b.n	8006902 <UART_SetConfig+0xe2>
 80068c6:	2302      	movs	r3, #2
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e01a      	b.n	8006902 <UART_SetConfig+0xe2>
 80068cc:	2304      	movs	r3, #4
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e017      	b.n	8006902 <UART_SetConfig+0xe2>
 80068d2:	2308      	movs	r3, #8
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e014      	b.n	8006902 <UART_SetConfig+0xe2>
 80068d8:	2310      	movs	r3, #16
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e011      	b.n	8006902 <UART_SetConfig+0xe2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a67      	ldr	r2, [pc, #412]	; (8006a80 <UART_SetConfig+0x260>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d102      	bne.n	80068ee <UART_SetConfig+0xce>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e009      	b.n	8006902 <UART_SetConfig+0xe2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a64      	ldr	r2, [pc, #400]	; (8006a84 <UART_SetConfig+0x264>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d102      	bne.n	80068fe <UART_SetConfig+0xde>
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e001      	b.n	8006902 <UART_SetConfig+0xe2>
 80068fe:	2310      	movs	r3, #16
 8006900:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690a:	d15a      	bne.n	80069c2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800690c:	7ffb      	ldrb	r3, [r7, #31]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d827      	bhi.n	8006962 <UART_SetConfig+0x142>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <UART_SetConfig+0xf8>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	08006963 	.word	0x08006963
 8006928:	08006953 	.word	0x08006953
 800692c:	08006963 	.word	0x08006963
 8006930:	08006963 	.word	0x08006963
 8006934:	08006963 	.word	0x08006963
 8006938:	0800695b 	.word	0x0800695b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fd ffa8 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8006940:	61b8      	str	r0, [r7, #24]
        break;
 8006942:	e013      	b.n	800696c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006944:	f7fd ffc6 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8006948:	61b8      	str	r0, [r7, #24]
        break;
 800694a:	e00f      	b.n	800696c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800694c:	4b4e      	ldr	r3, [pc, #312]	; (8006a88 <UART_SetConfig+0x268>)
 800694e:	61bb      	str	r3, [r7, #24]
        break;
 8006950:	e00c      	b.n	800696c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006952:	f7fd ff27 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8006956:	61b8      	str	r0, [r7, #24]
        break;
 8006958:	e008      	b.n	800696c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	61bb      	str	r3, [r7, #24]
        break;
 8006960:	e004      	b.n	800696c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	77bb      	strb	r3, [r7, #30]
        break;
 800696a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d074      	beq.n	8006a5c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	005a      	lsls	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b0f      	cmp	r3, #15
 800698c:	d916      	bls.n	80069bc <UART_SetConfig+0x19c>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006994:	d212      	bcs.n	80069bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f023 030f 	bic.w	r3, r3, #15
 800699e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	89fa      	ldrh	r2, [r7, #14]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	e04f      	b.n	8006a5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	77bb      	strb	r3, [r7, #30]
 80069c0:	e04c      	b.n	8006a5c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c2:	7ffb      	ldrb	r3, [r7, #31]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d828      	bhi.n	8006a1a <UART_SetConfig+0x1fa>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0x1b0>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069fd 	.word	0x080069fd
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	08006a1b 	.word	0x08006a1b
 80069e0:	08006a0b 	.word	0x08006a0b
 80069e4:	08006a1b 	.word	0x08006a1b
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a1b 	.word	0x08006a1b
 80069f0:	08006a13 	.word	0x08006a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f4:	f7fd ff4c 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 80069f8:	61b8      	str	r0, [r7, #24]
        break;
 80069fa:	e013      	b.n	8006a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069fc:	f7fd ff6a 	bl	80048d4 <HAL_RCC_GetPCLK2Freq>
 8006a00:	61b8      	str	r0, [r7, #24]
        break;
 8006a02:	e00f      	b.n	8006a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <UART_SetConfig+0x268>)
 8006a06:	61bb      	str	r3, [r7, #24]
        break;
 8006a08:	e00c      	b.n	8006a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0a:	f7fd fecb 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8006a0e:	61b8      	str	r0, [r7, #24]
        break;
 8006a10:	e008      	b.n	8006a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a16:	61bb      	str	r3, [r7, #24]
        break;
 8006a18:	e004      	b.n	8006a24 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	77bb      	strb	r3, [r7, #30]
        break;
 8006a22:	bf00      	nop
    }

    if (pclk != 0U)
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d018      	beq.n	8006a5c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	085a      	lsrs	r2, r3, #1
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	441a      	add	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b0f      	cmp	r3, #15
 8006a42:	d909      	bls.n	8006a58 <UART_SetConfig+0x238>
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4a:	d205      	bcs.n	8006a58 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60da      	str	r2, [r3, #12]
 8006a56:	e001      	b.n	8006a5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a68:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	efff69f3 	.word	0xefff69f3
 8006a78:	40013800 	.word	0x40013800
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	40004400 	.word	0x40004400
 8006a84:	40004800 	.word	0x40004800
 8006a88:	007a1200 	.word	0x007a1200

08006a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01a      	beq.n	8006ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8a:	d10a      	bne.n	8006ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b098      	sub	sp, #96	; 0x60
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be0:	f7fa ff2a 	bl	8001a38 <HAL_GetTick>
 8006be4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d12e      	bne.n	8006c52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f88c 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d021      	beq.n	8006c52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	653b      	str	r3, [r7, #80]	; 0x50
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e6      	bne.n	8006c0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e062      	b.n	8006d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d149      	bne.n	8006cf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f856 	bl	8006d20 <UART_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d03c      	beq.n	8006cf4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	623b      	str	r3, [r7, #32]
   return(result);
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ccc:	61fa      	str	r2, [r7, #28]
 8006cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e011      	b.n	8006d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3758      	adds	r7, #88	; 0x58
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d30:	e049      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d045      	beq.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3a:	f7fa fe7d 	bl	8001a38 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d302      	bcc.n	8006d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e048      	b.n	8006de6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d031      	beq.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d110      	bne.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2208      	movs	r2, #8
 8006d76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f838 	bl	8006dee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2208      	movs	r2, #8
 8006d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e029      	b.n	8006de6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da0:	d111      	bne.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f81e 	bl	8006dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e00f      	b.n	8006de6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2300      	movne	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d0a6      	beq.n	8006d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b095      	sub	sp, #84	; 0x54
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e14:	643b      	str	r3, [r7, #64]	; 0x40
 8006e16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e6      	bne.n	8006df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e5      	bne.n	8006e28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d118      	bne.n	8006e96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f023 0310 	bic.w	r3, r3, #16
 8006e78:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6979      	ldr	r1, [r7, #20]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e6      	bne.n	8006e64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006eaa:	bf00      	nop
 8006eac:	3754      	adds	r7, #84	; 0x54
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <__errno>:
 8006eb8:	4b01      	ldr	r3, [pc, #4]	; (8006ec0 <__errno+0x8>)
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	2000000c 	.word	0x2000000c

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	; (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	; (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	; (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	; (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f002 ff02 	bl	8009ce0 <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	0800a114 	.word	0x0800a114
 8006f00:	0800a114 	.word	0x0800a114
 8006f04:	0800a114 	.word	0x0800a114
 8006f08:	0800a118 	.word	0x0800a118

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <__cvt>:
 8006f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	ec55 4b10 	vmov	r4, r5, d0
 8006f24:	2d00      	cmp	r5, #0
 8006f26:	460e      	mov	r6, r1
 8006f28:	4619      	mov	r1, r3
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	bfbb      	ittet	lt
 8006f2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f32:	461d      	movlt	r5, r3
 8006f34:	2300      	movge	r3, #0
 8006f36:	232d      	movlt	r3, #45	; 0x2d
 8006f38:	700b      	strb	r3, [r1, #0]
 8006f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f40:	4691      	mov	r9, r2
 8006f42:	f023 0820 	bic.w	r8, r3, #32
 8006f46:	bfbc      	itt	lt
 8006f48:	4622      	movlt	r2, r4
 8006f4a:	4614      	movlt	r4, r2
 8006f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f50:	d005      	beq.n	8006f5e <__cvt+0x42>
 8006f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f56:	d100      	bne.n	8006f5a <__cvt+0x3e>
 8006f58:	3601      	adds	r6, #1
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	e000      	b.n	8006f60 <__cvt+0x44>
 8006f5e:	2103      	movs	r1, #3
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	ab02      	add	r3, sp, #8
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	ec45 4b10 	vmov	d0, r4, r5
 8006f6c:	4653      	mov	r3, sl
 8006f6e:	4632      	mov	r2, r6
 8006f70:	f000 fcea 	bl	8007948 <_dtoa_r>
 8006f74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f78:	4607      	mov	r7, r0
 8006f7a:	d102      	bne.n	8006f82 <__cvt+0x66>
 8006f7c:	f019 0f01 	tst.w	r9, #1
 8006f80:	d022      	beq.n	8006fc8 <__cvt+0xac>
 8006f82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f86:	eb07 0906 	add.w	r9, r7, r6
 8006f8a:	d110      	bne.n	8006fae <__cvt+0x92>
 8006f8c:	783b      	ldrb	r3, [r7, #0]
 8006f8e:	2b30      	cmp	r3, #48	; 0x30
 8006f90:	d10a      	bne.n	8006fa8 <__cvt+0x8c>
 8006f92:	2200      	movs	r2, #0
 8006f94:	2300      	movs	r3, #0
 8006f96:	4620      	mov	r0, r4
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f7f9 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f9e:	b918      	cbnz	r0, 8006fa8 <__cvt+0x8c>
 8006fa0:	f1c6 0601 	rsb	r6, r6, #1
 8006fa4:	f8ca 6000 	str.w	r6, [sl]
 8006fa8:	f8da 3000 	ldr.w	r3, [sl]
 8006fac:	4499      	add	r9, r3
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fba:	b108      	cbz	r0, 8006fc0 <__cvt+0xa4>
 8006fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fc0:	2230      	movs	r2, #48	; 0x30
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	454b      	cmp	r3, r9
 8006fc6:	d307      	bcc.n	8006fd8 <__cvt+0xbc>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fcc:	1bdb      	subs	r3, r3, r7
 8006fce:	4638      	mov	r0, r7
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	b004      	add	sp, #16
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	1c59      	adds	r1, r3, #1
 8006fda:	9103      	str	r1, [sp, #12]
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e7f0      	b.n	8006fc2 <__cvt+0xa6>

08006fe0 <__exponent>:
 8006fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	bfb8      	it	lt
 8006fe8:	4249      	neglt	r1, r1
 8006fea:	f803 2b02 	strb.w	r2, [r3], #2
 8006fee:	bfb4      	ite	lt
 8006ff0:	222d      	movlt	r2, #45	; 0x2d
 8006ff2:	222b      	movge	r2, #43	; 0x2b
 8006ff4:	2909      	cmp	r1, #9
 8006ff6:	7042      	strb	r2, [r0, #1]
 8006ff8:	dd2a      	ble.n	8007050 <__exponent+0x70>
 8006ffa:	f10d 0407 	add.w	r4, sp, #7
 8006ffe:	46a4      	mov	ip, r4
 8007000:	270a      	movs	r7, #10
 8007002:	46a6      	mov	lr, r4
 8007004:	460a      	mov	r2, r1
 8007006:	fb91 f6f7 	sdiv	r6, r1, r7
 800700a:	fb07 1516 	mls	r5, r7, r6, r1
 800700e:	3530      	adds	r5, #48	; 0x30
 8007010:	2a63      	cmp	r2, #99	; 0x63
 8007012:	f104 34ff 	add.w	r4, r4, #4294967295
 8007016:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800701a:	4631      	mov	r1, r6
 800701c:	dcf1      	bgt.n	8007002 <__exponent+0x22>
 800701e:	3130      	adds	r1, #48	; 0x30
 8007020:	f1ae 0502 	sub.w	r5, lr, #2
 8007024:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007028:	1c44      	adds	r4, r0, #1
 800702a:	4629      	mov	r1, r5
 800702c:	4561      	cmp	r1, ip
 800702e:	d30a      	bcc.n	8007046 <__exponent+0x66>
 8007030:	f10d 0209 	add.w	r2, sp, #9
 8007034:	eba2 020e 	sub.w	r2, r2, lr
 8007038:	4565      	cmp	r5, ip
 800703a:	bf88      	it	hi
 800703c:	2200      	movhi	r2, #0
 800703e:	4413      	add	r3, r2
 8007040:	1a18      	subs	r0, r3, r0
 8007042:	b003      	add	sp, #12
 8007044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800704a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800704e:	e7ed      	b.n	800702c <__exponent+0x4c>
 8007050:	2330      	movs	r3, #48	; 0x30
 8007052:	3130      	adds	r1, #48	; 0x30
 8007054:	7083      	strb	r3, [r0, #2]
 8007056:	70c1      	strb	r1, [r0, #3]
 8007058:	1d03      	adds	r3, r0, #4
 800705a:	e7f1      	b.n	8007040 <__exponent+0x60>

0800705c <_printf_float>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	ed2d 8b02 	vpush	{d8}
 8007064:	b08d      	sub	sp, #52	; 0x34
 8007066:	460c      	mov	r4, r1
 8007068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800706c:	4616      	mov	r6, r2
 800706e:	461f      	mov	r7, r3
 8007070:	4605      	mov	r5, r0
 8007072:	f001 fa57 	bl	8008524 <_localeconv_r>
 8007076:	f8d0 a000 	ldr.w	sl, [r0]
 800707a:	4650      	mov	r0, sl
 800707c:	f7f9 f8a8 	bl	80001d0 <strlen>
 8007080:	2300      	movs	r3, #0
 8007082:	930a      	str	r3, [sp, #40]	; 0x28
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	9305      	str	r3, [sp, #20]
 8007088:	f8d8 3000 	ldr.w	r3, [r8]
 800708c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007090:	3307      	adds	r3, #7
 8007092:	f023 0307 	bic.w	r3, r3, #7
 8007096:	f103 0208 	add.w	r2, r3, #8
 800709a:	f8c8 2000 	str.w	r2, [r8]
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070ae:	9307      	str	r3, [sp, #28]
 80070b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80070b4:	ee08 0a10 	vmov	s16, r0
 80070b8:	4b9f      	ldr	r3, [pc, #636]	; (8007338 <_printf_float+0x2dc>)
 80070ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	f7f9 fd33 	bl	8000b2c <__aeabi_dcmpun>
 80070c6:	bb88      	cbnz	r0, 800712c <_printf_float+0xd0>
 80070c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070cc:	4b9a      	ldr	r3, [pc, #616]	; (8007338 <_printf_float+0x2dc>)
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	f7f9 fd0d 	bl	8000af0 <__aeabi_dcmple>
 80070d6:	bb48      	cbnz	r0, 800712c <_printf_float+0xd0>
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fcfc 	bl	8000adc <__aeabi_dcmplt>
 80070e4:	b110      	cbz	r0, 80070ec <_printf_float+0x90>
 80070e6:	232d      	movs	r3, #45	; 0x2d
 80070e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ec:	4b93      	ldr	r3, [pc, #588]	; (800733c <_printf_float+0x2e0>)
 80070ee:	4894      	ldr	r0, [pc, #592]	; (8007340 <_printf_float+0x2e4>)
 80070f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070f4:	bf94      	ite	ls
 80070f6:	4698      	movls	r8, r3
 80070f8:	4680      	movhi	r8, r0
 80070fa:	2303      	movs	r3, #3
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	9b05      	ldr	r3, [sp, #20]
 8007100:	f023 0204 	bic.w	r2, r3, #4
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	9700      	str	r7, [sp, #0]
 800710c:	4633      	mov	r3, r6
 800710e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007110:	4621      	mov	r1, r4
 8007112:	4628      	mov	r0, r5
 8007114:	f000 f9d8 	bl	80074c8 <_printf_common>
 8007118:	3001      	adds	r0, #1
 800711a:	f040 8090 	bne.w	800723e <_printf_float+0x1e2>
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	b00d      	add	sp, #52	; 0x34
 8007124:	ecbd 8b02 	vpop	{d8}
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	f7f9 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 8007138:	b140      	cbz	r0, 800714c <_printf_float+0xf0>
 800713a:	464b      	mov	r3, r9
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfbc      	itt	lt
 8007140:	232d      	movlt	r3, #45	; 0x2d
 8007142:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007146:	487f      	ldr	r0, [pc, #508]	; (8007344 <_printf_float+0x2e8>)
 8007148:	4b7f      	ldr	r3, [pc, #508]	; (8007348 <_printf_float+0x2ec>)
 800714a:	e7d1      	b.n	80070f0 <_printf_float+0x94>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007152:	9206      	str	r2, [sp, #24]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	d13f      	bne.n	80071d8 <_printf_float+0x17c>
 8007158:	2306      	movs	r3, #6
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	9b05      	ldr	r3, [sp, #20]
 800715e:	6861      	ldr	r1, [r4, #4]
 8007160:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007164:	2300      	movs	r3, #0
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	ab0a      	add	r3, sp, #40	; 0x28
 800716a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800716e:	ab09      	add	r3, sp, #36	; 0x24
 8007170:	ec49 8b10 	vmov	d0, r8, r9
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800717c:	4628      	mov	r0, r5
 800717e:	f7ff fecd 	bl	8006f1c <__cvt>
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007186:	2b47      	cmp	r3, #71	; 0x47
 8007188:	4680      	mov	r8, r0
 800718a:	d108      	bne.n	800719e <_printf_float+0x142>
 800718c:	1cc8      	adds	r0, r1, #3
 800718e:	db02      	blt.n	8007196 <_printf_float+0x13a>
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	4299      	cmp	r1, r3
 8007194:	dd41      	ble.n	800721a <_printf_float+0x1be>
 8007196:	f1ab 0b02 	sub.w	fp, fp, #2
 800719a:	fa5f fb8b 	uxtb.w	fp, fp
 800719e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071a2:	d820      	bhi.n	80071e6 <_printf_float+0x18a>
 80071a4:	3901      	subs	r1, #1
 80071a6:	465a      	mov	r2, fp
 80071a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071ac:	9109      	str	r1, [sp, #36]	; 0x24
 80071ae:	f7ff ff17 	bl	8006fe0 <__exponent>
 80071b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071b4:	1813      	adds	r3, r2, r0
 80071b6:	2a01      	cmp	r2, #1
 80071b8:	4681      	mov	r9, r0
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	dc02      	bgt.n	80071c4 <_printf_float+0x168>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	07d2      	lsls	r2, r2, #31
 80071c2:	d501      	bpl.n	80071c8 <_printf_float+0x16c>
 80071c4:	3301      	adds	r3, #1
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d09c      	beq.n	800710a <_printf_float+0xae>
 80071d0:	232d      	movs	r3, #45	; 0x2d
 80071d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d6:	e798      	b.n	800710a <_printf_float+0xae>
 80071d8:	9a06      	ldr	r2, [sp, #24]
 80071da:	2a47      	cmp	r2, #71	; 0x47
 80071dc:	d1be      	bne.n	800715c <_printf_float+0x100>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1bc      	bne.n	800715c <_printf_float+0x100>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e7b9      	b.n	800715a <_printf_float+0xfe>
 80071e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071ea:	d118      	bne.n	800721e <_printf_float+0x1c2>
 80071ec:	2900      	cmp	r1, #0
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	dd0b      	ble.n	800720a <_printf_float+0x1ae>
 80071f2:	6121      	str	r1, [r4, #16]
 80071f4:	b913      	cbnz	r3, 80071fc <_printf_float+0x1a0>
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	07d0      	lsls	r0, r2, #31
 80071fa:	d502      	bpl.n	8007202 <_printf_float+0x1a6>
 80071fc:	3301      	adds	r3, #1
 80071fe:	440b      	add	r3, r1
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	65a1      	str	r1, [r4, #88]	; 0x58
 8007204:	f04f 0900 	mov.w	r9, #0
 8007208:	e7de      	b.n	80071c8 <_printf_float+0x16c>
 800720a:	b913      	cbnz	r3, 8007212 <_printf_float+0x1b6>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	07d2      	lsls	r2, r2, #31
 8007210:	d501      	bpl.n	8007216 <_printf_float+0x1ba>
 8007212:	3302      	adds	r3, #2
 8007214:	e7f4      	b.n	8007200 <_printf_float+0x1a4>
 8007216:	2301      	movs	r3, #1
 8007218:	e7f2      	b.n	8007200 <_printf_float+0x1a4>
 800721a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800721e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007220:	4299      	cmp	r1, r3
 8007222:	db05      	blt.n	8007230 <_printf_float+0x1d4>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	6121      	str	r1, [r4, #16]
 8007228:	07d8      	lsls	r0, r3, #31
 800722a:	d5ea      	bpl.n	8007202 <_printf_float+0x1a6>
 800722c:	1c4b      	adds	r3, r1, #1
 800722e:	e7e7      	b.n	8007200 <_printf_float+0x1a4>
 8007230:	2900      	cmp	r1, #0
 8007232:	bfd4      	ite	le
 8007234:	f1c1 0202 	rsble	r2, r1, #2
 8007238:	2201      	movgt	r2, #1
 800723a:	4413      	add	r3, r2
 800723c:	e7e0      	b.n	8007200 <_printf_float+0x1a4>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	055a      	lsls	r2, r3, #21
 8007242:	d407      	bmi.n	8007254 <_printf_float+0x1f8>
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	4642      	mov	r2, r8
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	d12c      	bne.n	80072ac <_printf_float+0x250>
 8007252:	e764      	b.n	800711e <_printf_float+0xc2>
 8007254:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007258:	f240 80e0 	bls.w	800741c <_printf_float+0x3c0>
 800725c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007260:	2200      	movs	r2, #0
 8007262:	2300      	movs	r3, #0
 8007264:	f7f9 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007268:	2800      	cmp	r0, #0
 800726a:	d034      	beq.n	80072d6 <_printf_float+0x27a>
 800726c:	4a37      	ldr	r2, [pc, #220]	; (800734c <_printf_float+0x2f0>)
 800726e:	2301      	movs	r3, #1
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f af51 	beq.w	800711e <_printf_float+0xc2>
 800727c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007280:	429a      	cmp	r2, r3
 8007282:	db02      	blt.n	800728a <_printf_float+0x22e>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	07d8      	lsls	r0, r3, #31
 8007288:	d510      	bpl.n	80072ac <_printf_float+0x250>
 800728a:	ee18 3a10 	vmov	r3, s16
 800728e:	4652      	mov	r2, sl
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f43f af41 	beq.w	800711e <_printf_float+0xc2>
 800729c:	f04f 0800 	mov.w	r8, #0
 80072a0:	f104 091a 	add.w	r9, r4, #26
 80072a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4543      	cmp	r3, r8
 80072aa:	dc09      	bgt.n	80072c0 <_printf_float+0x264>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	079b      	lsls	r3, r3, #30
 80072b0:	f100 8105 	bmi.w	80074be <_printf_float+0x462>
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b8:	4298      	cmp	r0, r3
 80072ba:	bfb8      	it	lt
 80072bc:	4618      	movlt	r0, r3
 80072be:	e730      	b.n	8007122 <_printf_float+0xc6>
 80072c0:	2301      	movs	r3, #1
 80072c2:	464a      	mov	r2, r9
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af27 	beq.w	800711e <_printf_float+0xc2>
 80072d0:	f108 0801 	add.w	r8, r8, #1
 80072d4:	e7e6      	b.n	80072a4 <_printf_float+0x248>
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc39      	bgt.n	8007350 <_printf_float+0x2f4>
 80072dc:	4a1b      	ldr	r2, [pc, #108]	; (800734c <_printf_float+0x2f0>)
 80072de:	2301      	movs	r3, #1
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af19 	beq.w	800711e <_printf_float+0xc2>
 80072ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f0:	4313      	orrs	r3, r2
 80072f2:	d102      	bne.n	80072fa <_printf_float+0x29e>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07d9      	lsls	r1, r3, #31
 80072f8:	d5d8      	bpl.n	80072ac <_printf_float+0x250>
 80072fa:	ee18 3a10 	vmov	r3, s16
 80072fe:	4652      	mov	r2, sl
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af09 	beq.w	800711e <_printf_float+0xc2>
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	f104 0a1a 	add.w	sl, r4, #26
 8007314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007316:	425b      	negs	r3, r3
 8007318:	454b      	cmp	r3, r9
 800731a:	dc01      	bgt.n	8007320 <_printf_float+0x2c4>
 800731c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800731e:	e792      	b.n	8007246 <_printf_float+0x1ea>
 8007320:	2301      	movs	r3, #1
 8007322:	4652      	mov	r2, sl
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f aef7 	beq.w	800711e <_printf_float+0xc2>
 8007330:	f109 0901 	add.w	r9, r9, #1
 8007334:	e7ee      	b.n	8007314 <_printf_float+0x2b8>
 8007336:	bf00      	nop
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	08009d3c 	.word	0x08009d3c
 8007340:	08009d40 	.word	0x08009d40
 8007344:	08009d48 	.word	0x08009d48
 8007348:	08009d44 	.word	0x08009d44
 800734c:	08009d4c 	.word	0x08009d4c
 8007350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007354:	429a      	cmp	r2, r3
 8007356:	bfa8      	it	ge
 8007358:	461a      	movge	r2, r3
 800735a:	2a00      	cmp	r2, #0
 800735c:	4691      	mov	r9, r2
 800735e:	dc37      	bgt.n	80073d0 <_printf_float+0x374>
 8007360:	f04f 0b00 	mov.w	fp, #0
 8007364:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007368:	f104 021a 	add.w	r2, r4, #26
 800736c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	eba3 0309 	sub.w	r3, r3, r9
 8007374:	455b      	cmp	r3, fp
 8007376:	dc33      	bgt.n	80073e0 <_printf_float+0x384>
 8007378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800737c:	429a      	cmp	r2, r3
 800737e:	db3b      	blt.n	80073f8 <_printf_float+0x39c>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07da      	lsls	r2, r3, #31
 8007384:	d438      	bmi.n	80073f8 <_printf_float+0x39c>
 8007386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007388:	9a05      	ldr	r2, [sp, #20]
 800738a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800738c:	1a9a      	subs	r2, r3, r2
 800738e:	eba3 0901 	sub.w	r9, r3, r1
 8007392:	4591      	cmp	r9, r2
 8007394:	bfa8      	it	ge
 8007396:	4691      	movge	r9, r2
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	dc35      	bgt.n	800740a <_printf_float+0x3ae>
 800739e:	f04f 0800 	mov.w	r8, #0
 80073a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a6:	f104 0a1a 	add.w	sl, r4, #26
 80073aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	4543      	cmp	r3, r8
 80073b6:	f77f af79 	ble.w	80072ac <_printf_float+0x250>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4652      	mov	r2, sl
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f aeaa 	beq.w	800711e <_printf_float+0xc2>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	e7ec      	b.n	80073aa <_printf_float+0x34e>
 80073d0:	4613      	mov	r3, r2
 80073d2:	4631      	mov	r1, r6
 80073d4:	4642      	mov	r2, r8
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	d1c0      	bne.n	8007360 <_printf_float+0x304>
 80073de:	e69e      	b.n	800711e <_printf_float+0xc2>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f ae97 	beq.w	800711e <_printf_float+0xc2>
 80073f0:	9a05      	ldr	r2, [sp, #20]
 80073f2:	f10b 0b01 	add.w	fp, fp, #1
 80073f6:	e7b9      	b.n	800736c <_printf_float+0x310>
 80073f8:	ee18 3a10 	vmov	r3, s16
 80073fc:	4652      	mov	r2, sl
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	47b8      	blx	r7
 8007404:	3001      	adds	r0, #1
 8007406:	d1be      	bne.n	8007386 <_printf_float+0x32a>
 8007408:	e689      	b.n	800711e <_printf_float+0xc2>
 800740a:	9a05      	ldr	r2, [sp, #20]
 800740c:	464b      	mov	r3, r9
 800740e:	4442      	add	r2, r8
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	d1c1      	bne.n	800739e <_printf_float+0x342>
 800741a:	e680      	b.n	800711e <_printf_float+0xc2>
 800741c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741e:	2a01      	cmp	r2, #1
 8007420:	dc01      	bgt.n	8007426 <_printf_float+0x3ca>
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d538      	bpl.n	8007498 <_printf_float+0x43c>
 8007426:	2301      	movs	r3, #1
 8007428:	4642      	mov	r2, r8
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae74 	beq.w	800711e <_printf_float+0xc2>
 8007436:	ee18 3a10 	vmov	r3, s16
 800743a:	4652      	mov	r2, sl
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f ae6b 	beq.w	800711e <_printf_float+0xc2>
 8007448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	f7f9 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007454:	b9d8      	cbnz	r0, 800748e <_printf_float+0x432>
 8007456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007458:	f108 0201 	add.w	r2, r8, #1
 800745c:	3b01      	subs	r3, #1
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	d10e      	bne.n	8007486 <_printf_float+0x42a>
 8007468:	e659      	b.n	800711e <_printf_float+0xc2>
 800746a:	2301      	movs	r3, #1
 800746c:	4652      	mov	r2, sl
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f ae52 	beq.w	800711e <_printf_float+0xc2>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	3b01      	subs	r3, #1
 8007482:	4543      	cmp	r3, r8
 8007484:	dcf1      	bgt.n	800746a <_printf_float+0x40e>
 8007486:	464b      	mov	r3, r9
 8007488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800748c:	e6dc      	b.n	8007248 <_printf_float+0x1ec>
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	f104 0a1a 	add.w	sl, r4, #26
 8007496:	e7f2      	b.n	800747e <_printf_float+0x422>
 8007498:	2301      	movs	r3, #1
 800749a:	4642      	mov	r2, r8
 800749c:	e7df      	b.n	800745e <_printf_float+0x402>
 800749e:	2301      	movs	r3, #1
 80074a0:	464a      	mov	r2, r9
 80074a2:	4631      	mov	r1, r6
 80074a4:	4628      	mov	r0, r5
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f ae38 	beq.w	800711e <_printf_float+0xc2>
 80074ae:	f108 0801 	add.w	r8, r8, #1
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074b6:	1a5b      	subs	r3, r3, r1
 80074b8:	4543      	cmp	r3, r8
 80074ba:	dcf0      	bgt.n	800749e <_printf_float+0x442>
 80074bc:	e6fa      	b.n	80072b4 <_printf_float+0x258>
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f104 0919 	add.w	r9, r4, #25
 80074c6:	e7f4      	b.n	80074b2 <_printf_float+0x456>

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4616      	mov	r6, r2
 80074ce:	4699      	mov	r9, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfb8      	it	lt
 80074dc:	4613      	movlt	r3, r2
 80074de:	6033      	str	r3, [r6, #0]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e4:	4607      	mov	r7, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b10a      	cbz	r2, 80074ee <_printf_common+0x26>
 80074ea:	3301      	adds	r3, #1
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	0699      	lsls	r1, r3, #26
 80074f2:	bf42      	ittt	mi
 80074f4:	6833      	ldrmi	r3, [r6, #0]
 80074f6:	3302      	addmi	r3, #2
 80074f8:	6033      	strmi	r3, [r6, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	f015 0506 	ands.w	r5, r5, #6
 8007500:	d106      	bne.n	8007510 <_printf_common+0x48>
 8007502:	f104 0a19 	add.w	sl, r4, #25
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ab      	cmp	r3, r5
 800750e:	dc26      	bgt.n	800755e <_printf_common+0x96>
 8007510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007514:	1e13      	subs	r3, r2, #0
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	2301      	movne	r3, #1
 800751c:	0692      	lsls	r2, r2, #26
 800751e:	d42b      	bmi.n	8007578 <_printf_common+0xb0>
 8007520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007524:	4649      	mov	r1, r9
 8007526:	4638      	mov	r0, r7
 8007528:	47c0      	blx	r8
 800752a:	3001      	adds	r0, #1
 800752c:	d01e      	beq.n	800756c <_printf_common+0xa4>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	68e5      	ldr	r5, [r4, #12]
 8007532:	6832      	ldr	r2, [r6, #0]
 8007534:	f003 0306 	and.w	r3, r3, #6
 8007538:	2b04      	cmp	r3, #4
 800753a:	bf08      	it	eq
 800753c:	1aad      	subeq	r5, r5, r2
 800753e:	68a3      	ldr	r3, [r4, #8]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	bf0c      	ite	eq
 8007544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007548:	2500      	movne	r5, #0
 800754a:	4293      	cmp	r3, r2
 800754c:	bfc4      	itt	gt
 800754e:	1a9b      	subgt	r3, r3, r2
 8007550:	18ed      	addgt	r5, r5, r3
 8007552:	2600      	movs	r6, #0
 8007554:	341a      	adds	r4, #26
 8007556:	42b5      	cmp	r5, r6
 8007558:	d11a      	bne.n	8007590 <_printf_common+0xc8>
 800755a:	2000      	movs	r0, #0
 800755c:	e008      	b.n	8007570 <_printf_common+0xa8>
 800755e:	2301      	movs	r3, #1
 8007560:	4652      	mov	r2, sl
 8007562:	4649      	mov	r1, r9
 8007564:	4638      	mov	r0, r7
 8007566:	47c0      	blx	r8
 8007568:	3001      	adds	r0, #1
 800756a:	d103      	bne.n	8007574 <_printf_common+0xac>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	3501      	adds	r5, #1
 8007576:	e7c6      	b.n	8007506 <_printf_common+0x3e>
 8007578:	18e1      	adds	r1, r4, r3
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	2030      	movs	r0, #48	; 0x30
 800757e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007582:	4422      	add	r2, r4
 8007584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800758c:	3302      	adds	r3, #2
 800758e:	e7c7      	b.n	8007520 <_printf_common+0x58>
 8007590:	2301      	movs	r3, #1
 8007592:	4622      	mov	r2, r4
 8007594:	4649      	mov	r1, r9
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d0e6      	beq.n	800756c <_printf_common+0xa4>
 800759e:	3601      	adds	r6, #1
 80075a0:	e7d9      	b.n	8007556 <_printf_common+0x8e>
	...

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	7e0f      	ldrb	r7, [r1, #24]
 80075aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075ac:	2f78      	cmp	r7, #120	; 0x78
 80075ae:	4691      	mov	r9, r2
 80075b0:	4680      	mov	r8, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	469a      	mov	sl, r3
 80075b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	; 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d8 	beq.w	8007776 <_printf_i+0x1d2>
 80075c6:	2f58      	cmp	r7, #88	; 0x58
 80075c8:	f000 80a3 	beq.w	8007712 <_printf_i+0x16e>
 80075cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a101      	add	r1, pc, #4	; (adr r1, 80075e4 <_printf_i+0x40>)
 80075e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	0800775d 	.word	0x0800775d
 8007614:	08007681 	.word	0x08007681
 8007618:	0800773f 	.word	0x0800773f
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	0800777f 	.word	0x0800777f
 8007628:	080075cd 	.word	0x080075cd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007747 	.word	0x08007747
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e0a3      	b.n	8007798 <_printf_i+0x1f4>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	6829      	ldr	r1, [r5, #0]
 8007654:	0606      	lsls	r6, r0, #24
 8007656:	f101 0304 	add.w	r3, r1, #4
 800765a:	d50a      	bpl.n	8007672 <_printf_i+0xce>
 800765c:	680e      	ldr	r6, [r1, #0]
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	2e00      	cmp	r6, #0
 8007662:	da03      	bge.n	800766c <_printf_i+0xc8>
 8007664:	232d      	movs	r3, #45	; 0x2d
 8007666:	4276      	negs	r6, r6
 8007668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766c:	485e      	ldr	r0, [pc, #376]	; (80077e8 <_printf_i+0x244>)
 800766e:	230a      	movs	r3, #10
 8007670:	e019      	b.n	80076a6 <_printf_i+0x102>
 8007672:	680e      	ldr	r6, [r1, #0]
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800767a:	bf18      	it	ne
 800767c:	b236      	sxthne	r6, r6
 800767e:	e7ef      	b.n	8007660 <_printf_i+0xbc>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	1d19      	adds	r1, r3, #4
 8007686:	6029      	str	r1, [r5, #0]
 8007688:	0601      	lsls	r1, r0, #24
 800768a:	d501      	bpl.n	8007690 <_printf_i+0xec>
 800768c:	681e      	ldr	r6, [r3, #0]
 800768e:	e002      	b.n	8007696 <_printf_i+0xf2>
 8007690:	0646      	lsls	r6, r0, #25
 8007692:	d5fb      	bpl.n	800768c <_printf_i+0xe8>
 8007694:	881e      	ldrh	r6, [r3, #0]
 8007696:	4854      	ldr	r0, [pc, #336]	; (80077e8 <_printf_i+0x244>)
 8007698:	2f6f      	cmp	r7, #111	; 0x6f
 800769a:	bf0c      	ite	eq
 800769c:	2308      	moveq	r3, #8
 800769e:	230a      	movne	r3, #10
 80076a0:	2100      	movs	r1, #0
 80076a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076a6:	6865      	ldr	r5, [r4, #4]
 80076a8:	60a5      	str	r5, [r4, #8]
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	bfa2      	ittt	ge
 80076ae:	6821      	ldrge	r1, [r4, #0]
 80076b0:	f021 0104 	bicge.w	r1, r1, #4
 80076b4:	6021      	strge	r1, [r4, #0]
 80076b6:	b90e      	cbnz	r6, 80076bc <_printf_i+0x118>
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	d04d      	beq.n	8007758 <_printf_i+0x1b4>
 80076bc:	4615      	mov	r5, r2
 80076be:	fbb6 f1f3 	udiv	r1, r6, r3
 80076c2:	fb03 6711 	mls	r7, r3, r1, r6
 80076c6:	5dc7      	ldrb	r7, [r0, r7]
 80076c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076cc:	4637      	mov	r7, r6
 80076ce:	42bb      	cmp	r3, r7
 80076d0:	460e      	mov	r6, r1
 80076d2:	d9f4      	bls.n	80076be <_printf_i+0x11a>
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d10b      	bne.n	80076f0 <_printf_i+0x14c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07de      	lsls	r6, r3, #31
 80076dc:	d508      	bpl.n	80076f0 <_printf_i+0x14c>
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	6861      	ldr	r1, [r4, #4]
 80076e2:	4299      	cmp	r1, r3
 80076e4:	bfde      	ittt	le
 80076e6:	2330      	movle	r3, #48	; 0x30
 80076e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076f0:	1b52      	subs	r2, r2, r5
 80076f2:	6122      	str	r2, [r4, #16]
 80076f4:	f8cd a000 	str.w	sl, [sp]
 80076f8:	464b      	mov	r3, r9
 80076fa:	aa03      	add	r2, sp, #12
 80076fc:	4621      	mov	r1, r4
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff fee2 	bl	80074c8 <_printf_common>
 8007704:	3001      	adds	r0, #1
 8007706:	d14c      	bne.n	80077a2 <_printf_i+0x1fe>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	b004      	add	sp, #16
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	4835      	ldr	r0, [pc, #212]	; (80077e8 <_printf_i+0x244>)
 8007714:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007718:	6829      	ldr	r1, [r5, #0]
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007720:	6029      	str	r1, [r5, #0]
 8007722:	061d      	lsls	r5, r3, #24
 8007724:	d514      	bpl.n	8007750 <_printf_i+0x1ac>
 8007726:	07df      	lsls	r7, r3, #31
 8007728:	bf44      	itt	mi
 800772a:	f043 0320 	orrmi.w	r3, r3, #32
 800772e:	6023      	strmi	r3, [r4, #0]
 8007730:	b91e      	cbnz	r6, 800773a <_printf_i+0x196>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f023 0320 	bic.w	r3, r3, #32
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	2310      	movs	r3, #16
 800773c:	e7b0      	b.n	80076a0 <_printf_i+0xfc>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f043 0320 	orr.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	2378      	movs	r3, #120	; 0x78
 8007748:	4828      	ldr	r0, [pc, #160]	; (80077ec <_printf_i+0x248>)
 800774a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800774e:	e7e3      	b.n	8007718 <_printf_i+0x174>
 8007750:	0659      	lsls	r1, r3, #25
 8007752:	bf48      	it	mi
 8007754:	b2b6      	uxthmi	r6, r6
 8007756:	e7e6      	b.n	8007726 <_printf_i+0x182>
 8007758:	4615      	mov	r5, r2
 800775a:	e7bb      	b.n	80076d4 <_printf_i+0x130>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	6826      	ldr	r6, [r4, #0]
 8007760:	6961      	ldr	r1, [r4, #20]
 8007762:	1d18      	adds	r0, r3, #4
 8007764:	6028      	str	r0, [r5, #0]
 8007766:	0635      	lsls	r5, r6, #24
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	d501      	bpl.n	8007770 <_printf_i+0x1cc>
 800776c:	6019      	str	r1, [r3, #0]
 800776e:	e002      	b.n	8007776 <_printf_i+0x1d2>
 8007770:	0670      	lsls	r0, r6, #25
 8007772:	d5fb      	bpl.n	800776c <_printf_i+0x1c8>
 8007774:	8019      	strh	r1, [r3, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	4615      	mov	r5, r2
 800777c:	e7ba      	b.n	80076f4 <_printf_i+0x150>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	2100      	movs	r1, #0
 800778a:	4628      	mov	r0, r5
 800778c:	f7f8 fd28 	bl	80001e0 <memchr>
 8007790:	b108      	cbz	r0, 8007796 <_printf_i+0x1f2>
 8007792:	1b40      	subs	r0, r0, r5
 8007794:	6060      	str	r0, [r4, #4]
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a0:	e7a8      	b.n	80076f4 <_printf_i+0x150>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	462a      	mov	r2, r5
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0ab      	beq.n	8007708 <_printf_i+0x164>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	079b      	lsls	r3, r3, #30
 80077b4:	d413      	bmi.n	80077de <_printf_i+0x23a>
 80077b6:	68e0      	ldr	r0, [r4, #12]
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	4298      	cmp	r0, r3
 80077bc:	bfb8      	it	lt
 80077be:	4618      	movlt	r0, r3
 80077c0:	e7a4      	b.n	800770c <_printf_i+0x168>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4632      	mov	r2, r6
 80077c6:	4649      	mov	r1, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	47d0      	blx	sl
 80077cc:	3001      	adds	r0, #1
 80077ce:	d09b      	beq.n	8007708 <_printf_i+0x164>
 80077d0:	3501      	adds	r5, #1
 80077d2:	68e3      	ldr	r3, [r4, #12]
 80077d4:	9903      	ldr	r1, [sp, #12]
 80077d6:	1a5b      	subs	r3, r3, r1
 80077d8:	42ab      	cmp	r3, r5
 80077da:	dcf2      	bgt.n	80077c2 <_printf_i+0x21e>
 80077dc:	e7eb      	b.n	80077b6 <_printf_i+0x212>
 80077de:	2500      	movs	r5, #0
 80077e0:	f104 0619 	add.w	r6, r4, #25
 80077e4:	e7f5      	b.n	80077d2 <_printf_i+0x22e>
 80077e6:	bf00      	nop
 80077e8:	08009d4e 	.word	0x08009d4e
 80077ec:	08009d5f 	.word	0x08009d5f

080077f0 <siprintf>:
 80077f0:	b40e      	push	{r1, r2, r3}
 80077f2:	b500      	push	{lr}
 80077f4:	b09c      	sub	sp, #112	; 0x70
 80077f6:	ab1d      	add	r3, sp, #116	; 0x74
 80077f8:	9002      	str	r0, [sp, #8]
 80077fa:	9006      	str	r0, [sp, #24]
 80077fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007800:	4809      	ldr	r0, [pc, #36]	; (8007828 <siprintf+0x38>)
 8007802:	9107      	str	r1, [sp, #28]
 8007804:	9104      	str	r1, [sp, #16]
 8007806:	4909      	ldr	r1, [pc, #36]	; (800782c <siprintf+0x3c>)
 8007808:	f853 2b04 	ldr.w	r2, [r3], #4
 800780c:	9105      	str	r1, [sp, #20]
 800780e:	6800      	ldr	r0, [r0, #0]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	a902      	add	r1, sp, #8
 8007814:	f001 fb76 	bl	8008f04 <_svfiprintf_r>
 8007818:	9b02      	ldr	r3, [sp, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	b01c      	add	sp, #112	; 0x70
 8007820:	f85d eb04 	ldr.w	lr, [sp], #4
 8007824:	b003      	add	sp, #12
 8007826:	4770      	bx	lr
 8007828:	2000000c 	.word	0x2000000c
 800782c:	ffff0208 	.word	0xffff0208

08007830 <quorem>:
 8007830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	6903      	ldr	r3, [r0, #16]
 8007836:	690c      	ldr	r4, [r1, #16]
 8007838:	42a3      	cmp	r3, r4
 800783a:	4607      	mov	r7, r0
 800783c:	f2c0 8081 	blt.w	8007942 <quorem+0x112>
 8007840:	3c01      	subs	r4, #1
 8007842:	f101 0814 	add.w	r8, r1, #20
 8007846:	f100 0514 	add.w	r5, r0, #20
 800784a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007858:	3301      	adds	r3, #1
 800785a:	429a      	cmp	r2, r3
 800785c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007860:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007864:	fbb2 f6f3 	udiv	r6, r2, r3
 8007868:	d331      	bcc.n	80078ce <quorem+0x9e>
 800786a:	f04f 0e00 	mov.w	lr, #0
 800786e:	4640      	mov	r0, r8
 8007870:	46ac      	mov	ip, r5
 8007872:	46f2      	mov	sl, lr
 8007874:	f850 2b04 	ldr.w	r2, [r0], #4
 8007878:	b293      	uxth	r3, r2
 800787a:	fb06 e303 	mla	r3, r6, r3, lr
 800787e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007882:	b29b      	uxth	r3, r3
 8007884:	ebaa 0303 	sub.w	r3, sl, r3
 8007888:	f8dc a000 	ldr.w	sl, [ip]
 800788c:	0c12      	lsrs	r2, r2, #16
 800788e:	fa13 f38a 	uxtah	r3, r3, sl
 8007892:	fb06 e202 	mla	r2, r6, r2, lr
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800789e:	b292      	uxth	r2, r2
 80078a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80078ac:	4581      	cmp	r9, r0
 80078ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b2:	f84c 3b04 	str.w	r3, [ip], #4
 80078b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078ba:	d2db      	bcs.n	8007874 <quorem+0x44>
 80078bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80078c0:	b92b      	cbnz	r3, 80078ce <quorem+0x9e>
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	429d      	cmp	r5, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	d32e      	bcc.n	800792a <quorem+0xfa>
 80078cc:	613c      	str	r4, [r7, #16]
 80078ce:	4638      	mov	r0, r7
 80078d0:	f001 f8c4 	bl	8008a5c <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	db24      	blt.n	8007922 <quorem+0xf2>
 80078d8:	3601      	adds	r6, #1
 80078da:	4628      	mov	r0, r5
 80078dc:	f04f 0c00 	mov.w	ip, #0
 80078e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80078e4:	f8d0 e000 	ldr.w	lr, [r0]
 80078e8:	b293      	uxth	r3, r2
 80078ea:	ebac 0303 	sub.w	r3, ip, r3
 80078ee:	0c12      	lsrs	r2, r2, #16
 80078f0:	fa13 f38e 	uxtah	r3, r3, lr
 80078f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007902:	45c1      	cmp	r9, r8
 8007904:	f840 3b04 	str.w	r3, [r0], #4
 8007908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800790c:	d2e8      	bcs.n	80078e0 <quorem+0xb0>
 800790e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007916:	b922      	cbnz	r2, 8007922 <quorem+0xf2>
 8007918:	3b04      	subs	r3, #4
 800791a:	429d      	cmp	r5, r3
 800791c:	461a      	mov	r2, r3
 800791e:	d30a      	bcc.n	8007936 <quorem+0x106>
 8007920:	613c      	str	r4, [r7, #16]
 8007922:	4630      	mov	r0, r6
 8007924:	b003      	add	sp, #12
 8007926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	3b04      	subs	r3, #4
 800792e:	2a00      	cmp	r2, #0
 8007930:	d1cc      	bne.n	80078cc <quorem+0x9c>
 8007932:	3c01      	subs	r4, #1
 8007934:	e7c7      	b.n	80078c6 <quorem+0x96>
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	3b04      	subs	r3, #4
 800793a:	2a00      	cmp	r2, #0
 800793c:	d1f0      	bne.n	8007920 <quorem+0xf0>
 800793e:	3c01      	subs	r4, #1
 8007940:	e7eb      	b.n	800791a <quorem+0xea>
 8007942:	2000      	movs	r0, #0
 8007944:	e7ee      	b.n	8007924 <quorem+0xf4>
	...

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	ed2d 8b04 	vpush	{d8-d9}
 8007950:	ec57 6b10 	vmov	r6, r7, d0
 8007954:	b093      	sub	sp, #76	; 0x4c
 8007956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800795c:	9106      	str	r1, [sp, #24]
 800795e:	ee10 aa10 	vmov	sl, s0
 8007962:	4604      	mov	r4, r0
 8007964:	9209      	str	r2, [sp, #36]	; 0x24
 8007966:	930c      	str	r3, [sp, #48]	; 0x30
 8007968:	46bb      	mov	fp, r7
 800796a:	b975      	cbnz	r5, 800798a <_dtoa_r+0x42>
 800796c:	2010      	movs	r0, #16
 800796e:	f000 fddd 	bl	800852c <malloc>
 8007972:	4602      	mov	r2, r0
 8007974:	6260      	str	r0, [r4, #36]	; 0x24
 8007976:	b920      	cbnz	r0, 8007982 <_dtoa_r+0x3a>
 8007978:	4ba7      	ldr	r3, [pc, #668]	; (8007c18 <_dtoa_r+0x2d0>)
 800797a:	21ea      	movs	r1, #234	; 0xea
 800797c:	48a7      	ldr	r0, [pc, #668]	; (8007c1c <_dtoa_r+0x2d4>)
 800797e:	f001 fbd1 	bl	8009124 <__assert_func>
 8007982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007986:	6005      	str	r5, [r0, #0]
 8007988:	60c5      	str	r5, [r0, #12]
 800798a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	b151      	cbz	r1, 80079a6 <_dtoa_r+0x5e>
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	604a      	str	r2, [r1, #4]
 8007994:	2301      	movs	r3, #1
 8007996:	4093      	lsls	r3, r2
 8007998:	608b      	str	r3, [r1, #8]
 800799a:	4620      	mov	r0, r4
 800799c:	f000 fe1c 	bl	80085d8 <_Bfree>
 80079a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	1e3b      	subs	r3, r7, #0
 80079a8:	bfaa      	itet	ge
 80079aa:	2300      	movge	r3, #0
 80079ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80079b0:	f8c8 3000 	strge.w	r3, [r8]
 80079b4:	4b9a      	ldr	r3, [pc, #616]	; (8007c20 <_dtoa_r+0x2d8>)
 80079b6:	bfbc      	itt	lt
 80079b8:	2201      	movlt	r2, #1
 80079ba:	f8c8 2000 	strlt.w	r2, [r8]
 80079be:	ea33 030b 	bics.w	r3, r3, fp
 80079c2:	d11b      	bne.n	80079fc <_dtoa_r+0xb4>
 80079c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d0:	4333      	orrs	r3, r6
 80079d2:	f000 8592 	beq.w	80084fa <_dtoa_r+0xbb2>
 80079d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d8:	b963      	cbnz	r3, 80079f4 <_dtoa_r+0xac>
 80079da:	4b92      	ldr	r3, [pc, #584]	; (8007c24 <_dtoa_r+0x2dc>)
 80079dc:	e022      	b.n	8007a24 <_dtoa_r+0xdc>
 80079de:	4b92      	ldr	r3, [pc, #584]	; (8007c28 <_dtoa_r+0x2e0>)
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	3308      	adds	r3, #8
 80079e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	9801      	ldr	r0, [sp, #4]
 80079ea:	b013      	add	sp, #76	; 0x4c
 80079ec:	ecbd 8b04 	vpop	{d8-d9}
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	4b8b      	ldr	r3, [pc, #556]	; (8007c24 <_dtoa_r+0x2dc>)
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	3303      	adds	r3, #3
 80079fa:	e7f3      	b.n	80079e4 <_dtoa_r+0x9c>
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	4650      	mov	r0, sl
 8007a02:	4659      	mov	r1, fp
 8007a04:	f7f9 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a08:	ec4b ab19 	vmov	d9, sl, fp
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	b158      	cbz	r0, 8007a28 <_dtoa_r+0xe0>
 8007a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a12:	2301      	movs	r3, #1
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 856b 	beq.w	80084f4 <_dtoa_r+0xbac>
 8007a1e:	4883      	ldr	r0, [pc, #524]	; (8007c2c <_dtoa_r+0x2e4>)
 8007a20:	6018      	str	r0, [r3, #0]
 8007a22:	1e43      	subs	r3, r0, #1
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	e7df      	b.n	80079e8 <_dtoa_r+0xa0>
 8007a28:	ec4b ab10 	vmov	d0, sl, fp
 8007a2c:	aa10      	add	r2, sp, #64	; 0x40
 8007a2e:	a911      	add	r1, sp, #68	; 0x44
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 f8b9 	bl	8008ba8 <__d2b>
 8007a36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a3a:	ee08 0a10 	vmov	s16, r0
 8007a3e:	2d00      	cmp	r5, #0
 8007a40:	f000 8084 	beq.w	8007b4c <_dtoa_r+0x204>
 8007a44:	ee19 3a90 	vmov	r3, s19
 8007a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a50:	4656      	mov	r6, sl
 8007a52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a5e:	4b74      	ldr	r3, [pc, #464]	; (8007c30 <_dtoa_r+0x2e8>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7f8 fc0f 	bl	8000288 <__aeabi_dsub>
 8007a6a:	a365      	add	r3, pc, #404	; (adr r3, 8007c00 <_dtoa_r+0x2b8>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fdc2 	bl	80005f8 <__aeabi_dmul>
 8007a74:	a364      	add	r3, pc, #400	; (adr r3, 8007c08 <_dtoa_r+0x2c0>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fc07 	bl	800028c <__adddf3>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	4628      	mov	r0, r5
 8007a82:	460f      	mov	r7, r1
 8007a84:	f7f8 fd4e 	bl	8000524 <__aeabi_i2d>
 8007a88:	a361      	add	r3, pc, #388	; (adr r3, 8007c10 <_dtoa_r+0x2c8>)
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f7f8 fdb3 	bl	80005f8 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fbf7 	bl	800028c <__adddf3>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	f7f9 f859 	bl	8000b58 <__aeabi_d2iz>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	9000      	str	r0, [sp, #0]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4630      	mov	r0, r6
 8007aae:	4639      	mov	r1, r7
 8007ab0:	f7f9 f814 	bl	8000adc <__aeabi_dcmplt>
 8007ab4:	b150      	cbz	r0, 8007acc <_dtoa_r+0x184>
 8007ab6:	9800      	ldr	r0, [sp, #0]
 8007ab8:	f7f8 fd34 	bl	8000524 <__aeabi_i2d>
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	f7f9 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac4:	b910      	cbnz	r0, 8007acc <_dtoa_r+0x184>
 8007ac6:	9b00      	ldr	r3, [sp, #0]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	9b00      	ldr	r3, [sp, #0]
 8007ace:	2b16      	cmp	r3, #22
 8007ad0:	d85a      	bhi.n	8007b88 <_dtoa_r+0x240>
 8007ad2:	9a00      	ldr	r2, [sp, #0]
 8007ad4:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <_dtoa_r+0x2ec>)
 8007ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	ec51 0b19 	vmov	r0, r1, d9
 8007ae2:	f7f8 fffb 	bl	8000adc <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d050      	beq.n	8007b8c <_dtoa_r+0x244>
 8007aea:	9b00      	ldr	r3, [sp, #0]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2300      	movs	r3, #0
 8007af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007af6:	1b5d      	subs	r5, r3, r5
 8007af8:	1e6b      	subs	r3, r5, #1
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	bf45      	ittet	mi
 8007afe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b02:	9304      	strmi	r3, [sp, #16]
 8007b04:	2300      	movpl	r3, #0
 8007b06:	2300      	movmi	r3, #0
 8007b08:	bf4c      	ite	mi
 8007b0a:	9305      	strmi	r3, [sp, #20]
 8007b0c:	9304      	strpl	r3, [sp, #16]
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db3d      	blt.n	8007b90 <_dtoa_r+0x248>
 8007b14:	9b05      	ldr	r3, [sp, #20]
 8007b16:	9a00      	ldr	r2, [sp, #0]
 8007b18:	920a      	str	r2, [sp, #40]	; 0x28
 8007b1a:	4413      	add	r3, r2
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9307      	str	r3, [sp, #28]
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	2b09      	cmp	r3, #9
 8007b26:	f200 8089 	bhi.w	8007c3c <_dtoa_r+0x2f4>
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	bfc4      	itt	gt
 8007b2e:	3b04      	subgt	r3, #4
 8007b30:	9306      	strgt	r3, [sp, #24]
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	f1a3 0302 	sub.w	r3, r3, #2
 8007b38:	bfcc      	ite	gt
 8007b3a:	2500      	movgt	r5, #0
 8007b3c:	2501      	movle	r5, #1
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f200 8087 	bhi.w	8007c52 <_dtoa_r+0x30a>
 8007b44:	e8df f003 	tbb	[pc, r3]
 8007b48:	59383a2d 	.word	0x59383a2d
 8007b4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b50:	441d      	add	r5, r3
 8007b52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	bfc1      	itttt	gt
 8007b5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b62:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b6a:	bfda      	itte	le
 8007b6c:	f1c3 0320 	rsble	r3, r3, #32
 8007b70:	fa06 f003 	lslle.w	r0, r6, r3
 8007b74:	4318      	orrgt	r0, r3
 8007b76:	f7f8 fcc5 	bl	8000504 <__aeabi_ui2d>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b82:	3d01      	subs	r5, #1
 8007b84:	930e      	str	r3, [sp, #56]	; 0x38
 8007b86:	e76a      	b.n	8007a5e <_dtoa_r+0x116>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e7b2      	b.n	8007af2 <_dtoa_r+0x1aa>
 8007b8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b8e:	e7b1      	b.n	8007af4 <_dtoa_r+0x1ac>
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	9a00      	ldr	r2, [sp, #0]
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	4253      	negs	r3, r2
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba0:	e7bf      	b.n	8007b22 <_dtoa_r+0x1da>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9308      	str	r3, [sp, #32]
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc55      	bgt.n	8007c58 <_dtoa_r+0x310>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb6:	e00c      	b.n	8007bd2 <_dtoa_r+0x28a>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e7f3      	b.n	8007ba4 <_dtoa_r+0x25c>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc0:	9308      	str	r3, [sp, #32]
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	9303      	str	r3, [sp, #12]
 8007bce:	bfb8      	it	lt
 8007bd0:	2301      	movlt	r3, #1
 8007bd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	6042      	str	r2, [r0, #4]
 8007bd8:	2204      	movs	r2, #4
 8007bda:	f102 0614 	add.w	r6, r2, #20
 8007bde:	429e      	cmp	r6, r3
 8007be0:	6841      	ldr	r1, [r0, #4]
 8007be2:	d93d      	bls.n	8007c60 <_dtoa_r+0x318>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fcb7 	bl	8008558 <_Balloc>
 8007bea:	9001      	str	r0, [sp, #4]
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d13b      	bne.n	8007c68 <_dtoa_r+0x320>
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <_dtoa_r+0x2f0>)
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bf8:	e6c0      	b.n	800797c <_dtoa_r+0x34>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e7df      	b.n	8007bbe <_dtoa_r+0x276>
 8007bfe:	bf00      	nop
 8007c00:	636f4361 	.word	0x636f4361
 8007c04:	3fd287a7 	.word	0x3fd287a7
 8007c08:	8b60c8b3 	.word	0x8b60c8b3
 8007c0c:	3fc68a28 	.word	0x3fc68a28
 8007c10:	509f79fb 	.word	0x509f79fb
 8007c14:	3fd34413 	.word	0x3fd34413
 8007c18:	08009d7d 	.word	0x08009d7d
 8007c1c:	08009d94 	.word	0x08009d94
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	08009d79 	.word	0x08009d79
 8007c28:	08009d70 	.word	0x08009d70
 8007c2c:	08009d4d 	.word	0x08009d4d
 8007c30:	3ff80000 	.word	0x3ff80000
 8007c34:	08009e88 	.word	0x08009e88
 8007c38:	08009def 	.word	0x08009def
 8007c3c:	2501      	movs	r5, #1
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9306      	str	r3, [sp, #24]
 8007c42:	9508      	str	r5, [sp, #32]
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295
 8007c48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2312      	movs	r3, #18
 8007c50:	e7b0      	b.n	8007bb4 <_dtoa_r+0x26c>
 8007c52:	2301      	movs	r3, #1
 8007c54:	9308      	str	r3, [sp, #32]
 8007c56:	e7f5      	b.n	8007c44 <_dtoa_r+0x2fc>
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c5e:	e7b8      	b.n	8007bd2 <_dtoa_r+0x28a>
 8007c60:	3101      	adds	r1, #1
 8007c62:	6041      	str	r1, [r0, #4]
 8007c64:	0052      	lsls	r2, r2, #1
 8007c66:	e7b8      	b.n	8007bda <_dtoa_r+0x292>
 8007c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6a:	9a01      	ldr	r2, [sp, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	2b0e      	cmp	r3, #14
 8007c72:	f200 809d 	bhi.w	8007db0 <_dtoa_r+0x468>
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	f000 809a 	beq.w	8007db0 <_dtoa_r+0x468>
 8007c7c:	9b00      	ldr	r3, [sp, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd32      	ble.n	8007ce8 <_dtoa_r+0x3a0>
 8007c82:	4ab7      	ldr	r2, [pc, #732]	; (8007f60 <_dtoa_r+0x618>)
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	05d8      	lsls	r0, r3, #23
 8007c94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c98:	d516      	bpl.n	8007cc8 <_dtoa_r+0x380>
 8007c9a:	4bb2      	ldr	r3, [pc, #712]	; (8007f64 <_dtoa_r+0x61c>)
 8007c9c:	ec51 0b19 	vmov	r0, r1, d9
 8007ca0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ca4:	f7f8 fdd2 	bl	800084c <__aeabi_ddiv>
 8007ca8:	f007 070f 	and.w	r7, r7, #15
 8007cac:	4682      	mov	sl, r0
 8007cae:	468b      	mov	fp, r1
 8007cb0:	2503      	movs	r5, #3
 8007cb2:	4eac      	ldr	r6, [pc, #688]	; (8007f64 <_dtoa_r+0x61c>)
 8007cb4:	b957      	cbnz	r7, 8007ccc <_dtoa_r+0x384>
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	464b      	mov	r3, r9
 8007cba:	4650      	mov	r0, sl
 8007cbc:	4659      	mov	r1, fp
 8007cbe:	f7f8 fdc5 	bl	800084c <__aeabi_ddiv>
 8007cc2:	4682      	mov	sl, r0
 8007cc4:	468b      	mov	fp, r1
 8007cc6:	e028      	b.n	8007d1a <_dtoa_r+0x3d2>
 8007cc8:	2502      	movs	r5, #2
 8007cca:	e7f2      	b.n	8007cb2 <_dtoa_r+0x36a>
 8007ccc:	07f9      	lsls	r1, r7, #31
 8007cce:	d508      	bpl.n	8007ce2 <_dtoa_r+0x39a>
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	3501      	adds	r5, #1
 8007cde:	4680      	mov	r8, r0
 8007ce0:	4689      	mov	r9, r1
 8007ce2:	107f      	asrs	r7, r7, #1
 8007ce4:	3608      	adds	r6, #8
 8007ce6:	e7e5      	b.n	8007cb4 <_dtoa_r+0x36c>
 8007ce8:	f000 809b 	beq.w	8007e22 <_dtoa_r+0x4da>
 8007cec:	9b00      	ldr	r3, [sp, #0]
 8007cee:	4f9d      	ldr	r7, [pc, #628]	; (8007f64 <_dtoa_r+0x61c>)
 8007cf0:	425e      	negs	r6, r3
 8007cf2:	4b9b      	ldr	r3, [pc, #620]	; (8007f60 <_dtoa_r+0x618>)
 8007cf4:	f006 020f 	and.w	r2, r6, #15
 8007cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	ec51 0b19 	vmov	r0, r1, d9
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	1136      	asrs	r6, r6, #4
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	468b      	mov	fp, r1
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2502      	movs	r5, #2
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	d17a      	bne.n	8007e0c <_dtoa_r+0x4c4>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1d3      	bne.n	8007cc2 <_dtoa_r+0x37a>
 8007d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8082 	beq.w	8007e26 <_dtoa_r+0x4de>
 8007d22:	4b91      	ldr	r3, [pc, #580]	; (8007f68 <_dtoa_r+0x620>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	4650      	mov	r0, sl
 8007d28:	4659      	mov	r1, fp
 8007d2a:	f7f8 fed7 	bl	8000adc <__aeabi_dcmplt>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d079      	beq.n	8007e26 <_dtoa_r+0x4de>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d076      	beq.n	8007e26 <_dtoa_r+0x4de>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dd36      	ble.n	8007dac <_dtoa_r+0x464>
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	4650      	mov	r0, sl
 8007d42:	4659      	mov	r1, fp
 8007d44:	1e5f      	subs	r7, r3, #1
 8007d46:	2200      	movs	r2, #0
 8007d48:	4b88      	ldr	r3, [pc, #544]	; (8007f6c <_dtoa_r+0x624>)
 8007d4a:	f7f8 fc55 	bl	80005f8 <__aeabi_dmul>
 8007d4e:	9e02      	ldr	r6, [sp, #8]
 8007d50:	4682      	mov	sl, r0
 8007d52:	468b      	mov	fp, r1
 8007d54:	3501      	adds	r5, #1
 8007d56:	4628      	mov	r0, r5
 8007d58:	f7f8 fbe4 	bl	8000524 <__aeabi_i2d>
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	465b      	mov	r3, fp
 8007d60:	f7f8 fc4a 	bl	80005f8 <__aeabi_dmul>
 8007d64:	4b82      	ldr	r3, [pc, #520]	; (8007f70 <_dtoa_r+0x628>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7f8 fa90 	bl	800028c <__adddf3>
 8007d6c:	46d0      	mov	r8, sl
 8007d6e:	46d9      	mov	r9, fp
 8007d70:	4682      	mov	sl, r0
 8007d72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	d158      	bne.n	8007e2c <_dtoa_r+0x4e4>
 8007d7a:	4b7e      	ldr	r3, [pc, #504]	; (8007f74 <_dtoa_r+0x62c>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 fa81 	bl	8000288 <__aeabi_dsub>
 8007d86:	4652      	mov	r2, sl
 8007d88:	465b      	mov	r3, fp
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	f7f8 fec3 	bl	8000b18 <__aeabi_dcmpgt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f040 8295 	bne.w	80082c2 <_dtoa_r+0x97a>
 8007d98:	4652      	mov	r2, sl
 8007d9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fe9b 	bl	8000adc <__aeabi_dcmplt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	f040 8289 	bne.w	80082be <_dtoa_r+0x976>
 8007dac:	ec5b ab19 	vmov	sl, fp, d9
 8007db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f2c0 8148 	blt.w	8008048 <_dtoa_r+0x700>
 8007db8:	9a00      	ldr	r2, [sp, #0]
 8007dba:	2a0e      	cmp	r2, #14
 8007dbc:	f300 8144 	bgt.w	8008048 <_dtoa_r+0x700>
 8007dc0:	4b67      	ldr	r3, [pc, #412]	; (8007f60 <_dtoa_r+0x618>)
 8007dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f280 80d5 	bge.w	8007f7c <_dtoa_r+0x634>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f300 80d1 	bgt.w	8007f7c <_dtoa_r+0x634>
 8007dda:	f040 826f 	bne.w	80082bc <_dtoa_r+0x974>
 8007dde:	4b65      	ldr	r3, [pc, #404]	; (8007f74 <_dtoa_r+0x62c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fc07 	bl	80005f8 <__aeabi_dmul>
 8007dea:	4652      	mov	r2, sl
 8007dec:	465b      	mov	r3, fp
 8007dee:	f7f8 fe89 	bl	8000b04 <__aeabi_dcmpge>
 8007df2:	9e03      	ldr	r6, [sp, #12]
 8007df4:	4637      	mov	r7, r6
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f040 8245 	bne.w	8008286 <_dtoa_r+0x93e>
 8007dfc:	9d01      	ldr	r5, [sp, #4]
 8007dfe:	2331      	movs	r3, #49	; 0x31
 8007e00:	f805 3b01 	strb.w	r3, [r5], #1
 8007e04:	9b00      	ldr	r3, [sp, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	e240      	b.n	800828e <_dtoa_r+0x946>
 8007e0c:	07f2      	lsls	r2, r6, #31
 8007e0e:	d505      	bpl.n	8007e1c <_dtoa_r+0x4d4>
 8007e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e14:	f7f8 fbf0 	bl	80005f8 <__aeabi_dmul>
 8007e18:	3501      	adds	r5, #1
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	1076      	asrs	r6, r6, #1
 8007e1e:	3708      	adds	r7, #8
 8007e20:	e777      	b.n	8007d12 <_dtoa_r+0x3ca>
 8007e22:	2502      	movs	r5, #2
 8007e24:	e779      	b.n	8007d1a <_dtoa_r+0x3d2>
 8007e26:	9f00      	ldr	r7, [sp, #0]
 8007e28:	9e03      	ldr	r6, [sp, #12]
 8007e2a:	e794      	b.n	8007d56 <_dtoa_r+0x40e>
 8007e2c:	9901      	ldr	r1, [sp, #4]
 8007e2e:	4b4c      	ldr	r3, [pc, #304]	; (8007f60 <_dtoa_r+0x618>)
 8007e30:	4431      	add	r1, r6
 8007e32:	910d      	str	r1, [sp, #52]	; 0x34
 8007e34:	9908      	ldr	r1, [sp, #32]
 8007e36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d043      	beq.n	8007eca <_dtoa_r+0x582>
 8007e42:	494d      	ldr	r1, [pc, #308]	; (8007f78 <_dtoa_r+0x630>)
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7f8 fd01 	bl	800084c <__aeabi_ddiv>
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	f7f8 fa1b 	bl	8000288 <__aeabi_dsub>
 8007e52:	9d01      	ldr	r5, [sp, #4]
 8007e54:	4682      	mov	sl, r0
 8007e56:	468b      	mov	fp, r1
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7f8 fe7c 	bl	8000b58 <__aeabi_d2iz>
 8007e60:	4606      	mov	r6, r0
 8007e62:	f7f8 fb5f 	bl	8000524 <__aeabi_i2d>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	f7f8 fa0b 	bl	8000288 <__aeabi_dsub>
 8007e72:	3630      	adds	r6, #48	; 0x30
 8007e74:	f805 6b01 	strb.w	r6, [r5], #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	465b      	mov	r3, fp
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4689      	mov	r9, r1
 8007e80:	f7f8 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d163      	bne.n	8007f50 <_dtoa_r+0x608>
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	4936      	ldr	r1, [pc, #216]	; (8007f68 <_dtoa_r+0x620>)
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f7f8 f9fa 	bl	8000288 <__aeabi_dsub>
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	f7f8 fe20 	bl	8000adc <__aeabi_dcmplt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 80b5 	bne.w	800800c <_dtoa_r+0x6c4>
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	d081      	beq.n	8007dac <_dtoa_r+0x464>
 8007ea8:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <_dtoa_r+0x624>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4650      	mov	r0, sl
 8007eae:	4659      	mov	r1, fp
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <_dtoa_r+0x624>)
 8007eb6:	4682      	mov	sl, r0
 8007eb8:	468b      	mov	fp, r1
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	e7c6      	b.n	8007e58 <_dtoa_r+0x510>
 8007eca:	4650      	mov	r0, sl
 8007ecc:	4659      	mov	r1, fp
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed4:	9d01      	ldr	r5, [sp, #4]
 8007ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed8:	4682      	mov	sl, r0
 8007eda:	468b      	mov	fp, r1
 8007edc:	4649      	mov	r1, r9
 8007ede:	4640      	mov	r0, r8
 8007ee0:	f7f8 fe3a 	bl	8000b58 <__aeabi_d2iz>
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	f7f8 fb1d 	bl	8000524 <__aeabi_i2d>
 8007eea:	3630      	adds	r6, #48	; 0x30
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 f9c8 	bl	8000288 <__aeabi_dsub>
 8007ef8:	f805 6b01 	strb.w	r6, [r5], #1
 8007efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efe:	429d      	cmp	r5, r3
 8007f00:	4680      	mov	r8, r0
 8007f02:	4689      	mov	r9, r1
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	d124      	bne.n	8007f54 <_dtoa_r+0x60c>
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <_dtoa_r+0x630>)
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	4659      	mov	r1, fp
 8007f10:	f7f8 f9bc 	bl	800028c <__adddf3>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d173      	bne.n	800800c <_dtoa_r+0x6c4>
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	4913      	ldr	r1, [pc, #76]	; (8007f78 <_dtoa_r+0x630>)
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	f7f8 f9ac 	bl	8000288 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f43f af35 	beq.w	8007dac <_dtoa_r+0x464>
 8007f42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f44:	1e6b      	subs	r3, r5, #1
 8007f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d0f8      	beq.n	8007f42 <_dtoa_r+0x5fa>
 8007f50:	9700      	str	r7, [sp, #0]
 8007f52:	e049      	b.n	8007fe8 <_dtoa_r+0x6a0>
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <_dtoa_r+0x624>)
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4680      	mov	r8, r0
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	e7bd      	b.n	8007edc <_dtoa_r+0x594>
 8007f60:	08009e88 	.word	0x08009e88
 8007f64:	08009e60 	.word	0x08009e60
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	40240000 	.word	0x40240000
 8007f70:	401c0000 	.word	0x401c0000
 8007f74:	40140000 	.word	0x40140000
 8007f78:	3fe00000 	.word	0x3fe00000
 8007f7c:	9d01      	ldr	r5, [sp, #4]
 8007f7e:	4656      	mov	r6, sl
 8007f80:	465f      	mov	r7, fp
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 fc5f 	bl	800084c <__aeabi_ddiv>
 8007f8e:	f7f8 fde3 	bl	8000b58 <__aeabi_d2iz>
 8007f92:	4682      	mov	sl, r0
 8007f94:	f7f8 fac6 	bl	8000524 <__aeabi_i2d>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	f7f8 fb2c 	bl	80005f8 <__aeabi_dmul>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007fac:	f7f8 f96c 	bl	8000288 <__aeabi_dsub>
 8007fb0:	f805 6b01 	strb.w	r6, [r5], #1
 8007fb4:	9e01      	ldr	r6, [sp, #4]
 8007fb6:	9f03      	ldr	r7, [sp, #12]
 8007fb8:	1bae      	subs	r6, r5, r6
 8007fba:	42b7      	cmp	r7, r6
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	d135      	bne.n	800802e <_dtoa_r+0x6e6>
 8007fc2:	f7f8 f963 	bl	800028c <__adddf3>
 8007fc6:	4642      	mov	r2, r8
 8007fc8:	464b      	mov	r3, r9
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460f      	mov	r7, r1
 8007fce:	f7f8 fda3 	bl	8000b18 <__aeabi_dcmpgt>
 8007fd2:	b9d0      	cbnz	r0, 800800a <_dtoa_r+0x6c2>
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fe0:	b110      	cbz	r0, 8007fe8 <_dtoa_r+0x6a0>
 8007fe2:	f01a 0f01 	tst.w	sl, #1
 8007fe6:	d110      	bne.n	800800a <_dtoa_r+0x6c2>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	ee18 1a10 	vmov	r1, s16
 8007fee:	f000 faf3 	bl	80085d8 <_Bfree>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9800      	ldr	r0, [sp, #0]
 8007ff6:	702b      	strb	r3, [r5, #0]
 8007ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	6018      	str	r0, [r3, #0]
 8007ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008000:	2b00      	cmp	r3, #0
 8008002:	f43f acf1 	beq.w	80079e8 <_dtoa_r+0xa0>
 8008006:	601d      	str	r5, [r3, #0]
 8008008:	e4ee      	b.n	80079e8 <_dtoa_r+0xa0>
 800800a:	9f00      	ldr	r7, [sp, #0]
 800800c:	462b      	mov	r3, r5
 800800e:	461d      	mov	r5, r3
 8008010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008014:	2a39      	cmp	r2, #57	; 0x39
 8008016:	d106      	bne.n	8008026 <_dtoa_r+0x6de>
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d1f7      	bne.n	800800e <_dtoa_r+0x6c6>
 800801e:	9901      	ldr	r1, [sp, #4]
 8008020:	2230      	movs	r2, #48	; 0x30
 8008022:	3701      	adds	r7, #1
 8008024:	700a      	strb	r2, [r1, #0]
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	3201      	adds	r2, #1
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e790      	b.n	8007f50 <_dtoa_r+0x608>
 800802e:	4ba6      	ldr	r3, [pc, #664]	; (80082c8 <_dtoa_r+0x980>)
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fae1 	bl	80005f8 <__aeabi_dmul>
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	4606      	mov	r6, r0
 800803c:	460f      	mov	r7, r1
 800803e:	f7f8 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008042:	2800      	cmp	r0, #0
 8008044:	d09d      	beq.n	8007f82 <_dtoa_r+0x63a>
 8008046:	e7cf      	b.n	8007fe8 <_dtoa_r+0x6a0>
 8008048:	9a08      	ldr	r2, [sp, #32]
 800804a:	2a00      	cmp	r2, #0
 800804c:	f000 80d7 	beq.w	80081fe <_dtoa_r+0x8b6>
 8008050:	9a06      	ldr	r2, [sp, #24]
 8008052:	2a01      	cmp	r2, #1
 8008054:	f300 80ba 	bgt.w	80081cc <_dtoa_r+0x884>
 8008058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800805a:	2a00      	cmp	r2, #0
 800805c:	f000 80b2 	beq.w	80081c4 <_dtoa_r+0x87c>
 8008060:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008064:	9e07      	ldr	r6, [sp, #28]
 8008066:	9d04      	ldr	r5, [sp, #16]
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	441a      	add	r2, r3
 800806c:	9204      	str	r2, [sp, #16]
 800806e:	9a05      	ldr	r2, [sp, #20]
 8008070:	2101      	movs	r1, #1
 8008072:	441a      	add	r2, r3
 8008074:	4620      	mov	r0, r4
 8008076:	9205      	str	r2, [sp, #20]
 8008078:	f000 fb66 	bl	8008748 <__i2b>
 800807c:	4607      	mov	r7, r0
 800807e:	2d00      	cmp	r5, #0
 8008080:	dd0c      	ble.n	800809c <_dtoa_r+0x754>
 8008082:	9b05      	ldr	r3, [sp, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	dd09      	ble.n	800809c <_dtoa_r+0x754>
 8008088:	42ab      	cmp	r3, r5
 800808a:	9a04      	ldr	r2, [sp, #16]
 800808c:	bfa8      	it	ge
 800808e:	462b      	movge	r3, r5
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	9204      	str	r2, [sp, #16]
 8008094:	9a05      	ldr	r2, [sp, #20]
 8008096:	1aed      	subs	r5, r5, r3
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	b31b      	cbz	r3, 80080e8 <_dtoa_r+0x7a0>
 80080a0:	9b08      	ldr	r3, [sp, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80af 	beq.w	8008206 <_dtoa_r+0x8be>
 80080a8:	2e00      	cmp	r6, #0
 80080aa:	dd13      	ble.n	80080d4 <_dtoa_r+0x78c>
 80080ac:	4639      	mov	r1, r7
 80080ae:	4632      	mov	r2, r6
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fc09 	bl	80088c8 <__pow5mult>
 80080b6:	ee18 2a10 	vmov	r2, s16
 80080ba:	4601      	mov	r1, r0
 80080bc:	4607      	mov	r7, r0
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fb58 	bl	8008774 <__multiply>
 80080c4:	ee18 1a10 	vmov	r1, s16
 80080c8:	4680      	mov	r8, r0
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fa84 	bl	80085d8 <_Bfree>
 80080d0:	ee08 8a10 	vmov	s16, r8
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	1b9a      	subs	r2, r3, r6
 80080d8:	d006      	beq.n	80080e8 <_dtoa_r+0x7a0>
 80080da:	ee18 1a10 	vmov	r1, s16
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 fbf2 	bl	80088c8 <__pow5mult>
 80080e4:	ee08 0a10 	vmov	s16, r0
 80080e8:	2101      	movs	r1, #1
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 fb2c 	bl	8008748 <__i2b>
 80080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	4606      	mov	r6, r0
 80080f6:	f340 8088 	ble.w	800820a <_dtoa_r+0x8c2>
 80080fa:	461a      	mov	r2, r3
 80080fc:	4601      	mov	r1, r0
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fbe2 	bl	80088c8 <__pow5mult>
 8008104:	9b06      	ldr	r3, [sp, #24]
 8008106:	2b01      	cmp	r3, #1
 8008108:	4606      	mov	r6, r0
 800810a:	f340 8081 	ble.w	8008210 <_dtoa_r+0x8c8>
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	6933      	ldr	r3, [r6, #16]
 8008114:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008118:	6918      	ldr	r0, [r3, #16]
 800811a:	f000 fac5 	bl	80086a8 <__hi0bits>
 800811e:	f1c0 0020 	rsb	r0, r0, #32
 8008122:	9b05      	ldr	r3, [sp, #20]
 8008124:	4418      	add	r0, r3
 8008126:	f010 001f 	ands.w	r0, r0, #31
 800812a:	f000 8092 	beq.w	8008252 <_dtoa_r+0x90a>
 800812e:	f1c0 0320 	rsb	r3, r0, #32
 8008132:	2b04      	cmp	r3, #4
 8008134:	f340 808a 	ble.w	800824c <_dtoa_r+0x904>
 8008138:	f1c0 001c 	rsb	r0, r0, #28
 800813c:	9b04      	ldr	r3, [sp, #16]
 800813e:	4403      	add	r3, r0
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	9b05      	ldr	r3, [sp, #20]
 8008144:	4403      	add	r3, r0
 8008146:	4405      	add	r5, r0
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dd07      	ble.n	8008160 <_dtoa_r+0x818>
 8008150:	ee18 1a10 	vmov	r1, s16
 8008154:	461a      	mov	r2, r3
 8008156:	4620      	mov	r0, r4
 8008158:	f000 fc10 	bl	800897c <__lshift>
 800815c:	ee08 0a10 	vmov	s16, r0
 8008160:	9b05      	ldr	r3, [sp, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	dd05      	ble.n	8008172 <_dtoa_r+0x82a>
 8008166:	4631      	mov	r1, r6
 8008168:	461a      	mov	r2, r3
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fc06 	bl	800897c <__lshift>
 8008170:	4606      	mov	r6, r0
 8008172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d06e      	beq.n	8008256 <_dtoa_r+0x90e>
 8008178:	ee18 0a10 	vmov	r0, s16
 800817c:	4631      	mov	r1, r6
 800817e:	f000 fc6d 	bl	8008a5c <__mcmp>
 8008182:	2800      	cmp	r0, #0
 8008184:	da67      	bge.n	8008256 <_dtoa_r+0x90e>
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	3b01      	subs	r3, #1
 800818a:	ee18 1a10 	vmov	r1, s16
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	220a      	movs	r2, #10
 8008192:	2300      	movs	r3, #0
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fa41 	bl	800861c <__multadd>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	ee08 0a10 	vmov	s16, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 81b1 	beq.w	8008508 <_dtoa_r+0xbc0>
 80081a6:	2300      	movs	r3, #0
 80081a8:	4639      	mov	r1, r7
 80081aa:	220a      	movs	r2, #10
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fa35 	bl	800861c <__multadd>
 80081b2:	9b02      	ldr	r3, [sp, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	4607      	mov	r7, r0
 80081b8:	f300 808e 	bgt.w	80082d8 <_dtoa_r+0x990>
 80081bc:	9b06      	ldr	r3, [sp, #24]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	dc51      	bgt.n	8008266 <_dtoa_r+0x91e>
 80081c2:	e089      	b.n	80082d8 <_dtoa_r+0x990>
 80081c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081ca:	e74b      	b.n	8008064 <_dtoa_r+0x71c>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1e5e      	subs	r6, r3, #1
 80081d0:	9b07      	ldr	r3, [sp, #28]
 80081d2:	42b3      	cmp	r3, r6
 80081d4:	bfbf      	itttt	lt
 80081d6:	9b07      	ldrlt	r3, [sp, #28]
 80081d8:	9607      	strlt	r6, [sp, #28]
 80081da:	1af2      	sublt	r2, r6, r3
 80081dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081de:	bfb6      	itet	lt
 80081e0:	189b      	addlt	r3, r3, r2
 80081e2:	1b9e      	subge	r6, r3, r6
 80081e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	bfb8      	it	lt
 80081ea:	2600      	movlt	r6, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfb7      	itett	lt
 80081f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80081f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80081f8:	1a9d      	sublt	r5, r3, r2
 80081fa:	2300      	movlt	r3, #0
 80081fc:	e734      	b.n	8008068 <_dtoa_r+0x720>
 80081fe:	9e07      	ldr	r6, [sp, #28]
 8008200:	9d04      	ldr	r5, [sp, #16]
 8008202:	9f08      	ldr	r7, [sp, #32]
 8008204:	e73b      	b.n	800807e <_dtoa_r+0x736>
 8008206:	9a07      	ldr	r2, [sp, #28]
 8008208:	e767      	b.n	80080da <_dtoa_r+0x792>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b01      	cmp	r3, #1
 800820e:	dc18      	bgt.n	8008242 <_dtoa_r+0x8fa>
 8008210:	f1ba 0f00 	cmp.w	sl, #0
 8008214:	d115      	bne.n	8008242 <_dtoa_r+0x8fa>
 8008216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800821a:	b993      	cbnz	r3, 8008242 <_dtoa_r+0x8fa>
 800821c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008220:	0d1b      	lsrs	r3, r3, #20
 8008222:	051b      	lsls	r3, r3, #20
 8008224:	b183      	cbz	r3, 8008248 <_dtoa_r+0x900>
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	3301      	adds	r3, #1
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	3301      	adds	r3, #1
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	f04f 0801 	mov.w	r8, #1
 8008236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f af6a 	bne.w	8008112 <_dtoa_r+0x7ca>
 800823e:	2001      	movs	r0, #1
 8008240:	e76f      	b.n	8008122 <_dtoa_r+0x7da>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	e7f6      	b.n	8008236 <_dtoa_r+0x8ee>
 8008248:	4698      	mov	r8, r3
 800824a:	e7f4      	b.n	8008236 <_dtoa_r+0x8ee>
 800824c:	f43f af7d 	beq.w	800814a <_dtoa_r+0x802>
 8008250:	4618      	mov	r0, r3
 8008252:	301c      	adds	r0, #28
 8008254:	e772      	b.n	800813c <_dtoa_r+0x7f4>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	dc37      	bgt.n	80082cc <_dtoa_r+0x984>
 800825c:	9b06      	ldr	r3, [sp, #24]
 800825e:	2b02      	cmp	r3, #2
 8008260:	dd34      	ble.n	80082cc <_dtoa_r+0x984>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	b96b      	cbnz	r3, 8008286 <_dtoa_r+0x93e>
 800826a:	4631      	mov	r1, r6
 800826c:	2205      	movs	r2, #5
 800826e:	4620      	mov	r0, r4
 8008270:	f000 f9d4 	bl	800861c <__multadd>
 8008274:	4601      	mov	r1, r0
 8008276:	4606      	mov	r6, r0
 8008278:	ee18 0a10 	vmov	r0, s16
 800827c:	f000 fbee 	bl	8008a5c <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	f73f adbb 	bgt.w	8007dfc <_dtoa_r+0x4b4>
 8008286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008288:	9d01      	ldr	r5, [sp, #4]
 800828a:	43db      	mvns	r3, r3
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	f04f 0800 	mov.w	r8, #0
 8008292:	4631      	mov	r1, r6
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f99f 	bl	80085d8 <_Bfree>
 800829a:	2f00      	cmp	r7, #0
 800829c:	f43f aea4 	beq.w	8007fe8 <_dtoa_r+0x6a0>
 80082a0:	f1b8 0f00 	cmp.w	r8, #0
 80082a4:	d005      	beq.n	80082b2 <_dtoa_r+0x96a>
 80082a6:	45b8      	cmp	r8, r7
 80082a8:	d003      	beq.n	80082b2 <_dtoa_r+0x96a>
 80082aa:	4641      	mov	r1, r8
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 f993 	bl	80085d8 <_Bfree>
 80082b2:	4639      	mov	r1, r7
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 f98f 	bl	80085d8 <_Bfree>
 80082ba:	e695      	b.n	8007fe8 <_dtoa_r+0x6a0>
 80082bc:	2600      	movs	r6, #0
 80082be:	4637      	mov	r7, r6
 80082c0:	e7e1      	b.n	8008286 <_dtoa_r+0x93e>
 80082c2:	9700      	str	r7, [sp, #0]
 80082c4:	4637      	mov	r7, r6
 80082c6:	e599      	b.n	8007dfc <_dtoa_r+0x4b4>
 80082c8:	40240000 	.word	0x40240000
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 80ca 	beq.w	8008468 <_dtoa_r+0xb20>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	2d00      	cmp	r5, #0
 80082da:	dd05      	ble.n	80082e8 <_dtoa_r+0x9a0>
 80082dc:	4639      	mov	r1, r7
 80082de:	462a      	mov	r2, r5
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fb4b 	bl	800897c <__lshift>
 80082e6:	4607      	mov	r7, r0
 80082e8:	f1b8 0f00 	cmp.w	r8, #0
 80082ec:	d05b      	beq.n	80083a6 <_dtoa_r+0xa5e>
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 f931 	bl	8008558 <_Balloc>
 80082f6:	4605      	mov	r5, r0
 80082f8:	b928      	cbnz	r0, 8008306 <_dtoa_r+0x9be>
 80082fa:	4b87      	ldr	r3, [pc, #540]	; (8008518 <_dtoa_r+0xbd0>)
 80082fc:	4602      	mov	r2, r0
 80082fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008302:	f7ff bb3b 	b.w	800797c <_dtoa_r+0x34>
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	3202      	adds	r2, #2
 800830a:	0092      	lsls	r2, r2, #2
 800830c:	f107 010c 	add.w	r1, r7, #12
 8008310:	300c      	adds	r0, #12
 8008312:	f000 f913 	bl	800853c <memcpy>
 8008316:	2201      	movs	r2, #1
 8008318:	4629      	mov	r1, r5
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fb2e 	bl	800897c <__lshift>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	f103 0901 	add.w	r9, r3, #1
 8008326:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800832a:	4413      	add	r3, r2
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	f00a 0301 	and.w	r3, sl, #1
 8008332:	46b8      	mov	r8, r7
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	4607      	mov	r7, r0
 8008338:	4631      	mov	r1, r6
 800833a:	ee18 0a10 	vmov	r0, s16
 800833e:	f7ff fa77 	bl	8007830 <quorem>
 8008342:	4641      	mov	r1, r8
 8008344:	9002      	str	r0, [sp, #8]
 8008346:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800834a:	ee18 0a10 	vmov	r0, s16
 800834e:	f000 fb85 	bl	8008a5c <__mcmp>
 8008352:	463a      	mov	r2, r7
 8008354:	9003      	str	r0, [sp, #12]
 8008356:	4631      	mov	r1, r6
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fb9b 	bl	8008a94 <__mdiff>
 800835e:	68c2      	ldr	r2, [r0, #12]
 8008360:	f109 3bff 	add.w	fp, r9, #4294967295
 8008364:	4605      	mov	r5, r0
 8008366:	bb02      	cbnz	r2, 80083aa <_dtoa_r+0xa62>
 8008368:	4601      	mov	r1, r0
 800836a:	ee18 0a10 	vmov	r0, s16
 800836e:	f000 fb75 	bl	8008a5c <__mcmp>
 8008372:	4602      	mov	r2, r0
 8008374:	4629      	mov	r1, r5
 8008376:	4620      	mov	r0, r4
 8008378:	9207      	str	r2, [sp, #28]
 800837a:	f000 f92d 	bl	80085d8 <_Bfree>
 800837e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008382:	ea43 0102 	orr.w	r1, r3, r2
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	430b      	orrs	r3, r1
 800838a:	464d      	mov	r5, r9
 800838c:	d10f      	bne.n	80083ae <_dtoa_r+0xa66>
 800838e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008392:	d02a      	beq.n	80083ea <_dtoa_r+0xaa2>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd02      	ble.n	80083a0 <_dtoa_r+0xa58>
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80083a0:	f88b a000 	strb.w	sl, [fp]
 80083a4:	e775      	b.n	8008292 <_dtoa_r+0x94a>
 80083a6:	4638      	mov	r0, r7
 80083a8:	e7ba      	b.n	8008320 <_dtoa_r+0x9d8>
 80083aa:	2201      	movs	r2, #1
 80083ac:	e7e2      	b.n	8008374 <_dtoa_r+0xa2c>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	db04      	blt.n	80083be <_dtoa_r+0xa76>
 80083b4:	9906      	ldr	r1, [sp, #24]
 80083b6:	430b      	orrs	r3, r1
 80083b8:	9904      	ldr	r1, [sp, #16]
 80083ba:	430b      	orrs	r3, r1
 80083bc:	d122      	bne.n	8008404 <_dtoa_r+0xabc>
 80083be:	2a00      	cmp	r2, #0
 80083c0:	ddee      	ble.n	80083a0 <_dtoa_r+0xa58>
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	2201      	movs	r2, #1
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fad7 	bl	800897c <__lshift>
 80083ce:	4631      	mov	r1, r6
 80083d0:	ee08 0a10 	vmov	s16, r0
 80083d4:	f000 fb42 	bl	8008a5c <__mcmp>
 80083d8:	2800      	cmp	r0, #0
 80083da:	dc03      	bgt.n	80083e4 <_dtoa_r+0xa9c>
 80083dc:	d1e0      	bne.n	80083a0 <_dtoa_r+0xa58>
 80083de:	f01a 0f01 	tst.w	sl, #1
 80083e2:	d0dd      	beq.n	80083a0 <_dtoa_r+0xa58>
 80083e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083e8:	d1d7      	bne.n	800839a <_dtoa_r+0xa52>
 80083ea:	2339      	movs	r3, #57	; 0x39
 80083ec:	f88b 3000 	strb.w	r3, [fp]
 80083f0:	462b      	mov	r3, r5
 80083f2:	461d      	mov	r5, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083fa:	2a39      	cmp	r2, #57	; 0x39
 80083fc:	d071      	beq.n	80084e2 <_dtoa_r+0xb9a>
 80083fe:	3201      	adds	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	e746      	b.n	8008292 <_dtoa_r+0x94a>
 8008404:	2a00      	cmp	r2, #0
 8008406:	dd07      	ble.n	8008418 <_dtoa_r+0xad0>
 8008408:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800840c:	d0ed      	beq.n	80083ea <_dtoa_r+0xaa2>
 800840e:	f10a 0301 	add.w	r3, sl, #1
 8008412:	f88b 3000 	strb.w	r3, [fp]
 8008416:	e73c      	b.n	8008292 <_dtoa_r+0x94a>
 8008418:	9b05      	ldr	r3, [sp, #20]
 800841a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800841e:	4599      	cmp	r9, r3
 8008420:	d047      	beq.n	80084b2 <_dtoa_r+0xb6a>
 8008422:	ee18 1a10 	vmov	r1, s16
 8008426:	2300      	movs	r3, #0
 8008428:	220a      	movs	r2, #10
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f8f6 	bl	800861c <__multadd>
 8008430:	45b8      	cmp	r8, r7
 8008432:	ee08 0a10 	vmov	s16, r0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	f04f 020a 	mov.w	r2, #10
 800843e:	4641      	mov	r1, r8
 8008440:	4620      	mov	r0, r4
 8008442:	d106      	bne.n	8008452 <_dtoa_r+0xb0a>
 8008444:	f000 f8ea 	bl	800861c <__multadd>
 8008448:	4680      	mov	r8, r0
 800844a:	4607      	mov	r7, r0
 800844c:	f109 0901 	add.w	r9, r9, #1
 8008450:	e772      	b.n	8008338 <_dtoa_r+0x9f0>
 8008452:	f000 f8e3 	bl	800861c <__multadd>
 8008456:	4639      	mov	r1, r7
 8008458:	4680      	mov	r8, r0
 800845a:	2300      	movs	r3, #0
 800845c:	220a      	movs	r2, #10
 800845e:	4620      	mov	r0, r4
 8008460:	f000 f8dc 	bl	800861c <__multadd>
 8008464:	4607      	mov	r7, r0
 8008466:	e7f1      	b.n	800844c <_dtoa_r+0xb04>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	9d01      	ldr	r5, [sp, #4]
 800846e:	ee18 0a10 	vmov	r0, s16
 8008472:	4631      	mov	r1, r6
 8008474:	f7ff f9dc 	bl	8007830 <quorem>
 8008478:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	f805 ab01 	strb.w	sl, [r5], #1
 8008482:	1aea      	subs	r2, r5, r3
 8008484:	9b02      	ldr	r3, [sp, #8]
 8008486:	4293      	cmp	r3, r2
 8008488:	dd09      	ble.n	800849e <_dtoa_r+0xb56>
 800848a:	ee18 1a10 	vmov	r1, s16
 800848e:	2300      	movs	r3, #0
 8008490:	220a      	movs	r2, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f000 f8c2 	bl	800861c <__multadd>
 8008498:	ee08 0a10 	vmov	s16, r0
 800849c:	e7e7      	b.n	800846e <_dtoa_r+0xb26>
 800849e:	9b02      	ldr	r3, [sp, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfc8      	it	gt
 80084a4:	461d      	movgt	r5, r3
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	bfd8      	it	le
 80084aa:	2501      	movle	r5, #1
 80084ac:	441d      	add	r5, r3
 80084ae:	f04f 0800 	mov.w	r8, #0
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	2201      	movs	r2, #1
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fa5f 	bl	800897c <__lshift>
 80084be:	4631      	mov	r1, r6
 80084c0:	ee08 0a10 	vmov	s16, r0
 80084c4:	f000 faca 	bl	8008a5c <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	dc91      	bgt.n	80083f0 <_dtoa_r+0xaa8>
 80084cc:	d102      	bne.n	80084d4 <_dtoa_r+0xb8c>
 80084ce:	f01a 0f01 	tst.w	sl, #1
 80084d2:	d18d      	bne.n	80083f0 <_dtoa_r+0xaa8>
 80084d4:	462b      	mov	r3, r5
 80084d6:	461d      	mov	r5, r3
 80084d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084dc:	2a30      	cmp	r2, #48	; 0x30
 80084de:	d0fa      	beq.n	80084d6 <_dtoa_r+0xb8e>
 80084e0:	e6d7      	b.n	8008292 <_dtoa_r+0x94a>
 80084e2:	9a01      	ldr	r2, [sp, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d184      	bne.n	80083f2 <_dtoa_r+0xaaa>
 80084e8:	9b00      	ldr	r3, [sp, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	2331      	movs	r3, #49	; 0x31
 80084f0:	7013      	strb	r3, [r2, #0]
 80084f2:	e6ce      	b.n	8008292 <_dtoa_r+0x94a>
 80084f4:	4b09      	ldr	r3, [pc, #36]	; (800851c <_dtoa_r+0xbd4>)
 80084f6:	f7ff ba95 	b.w	8007a24 <_dtoa_r+0xdc>
 80084fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f47f aa6e 	bne.w	80079de <_dtoa_r+0x96>
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <_dtoa_r+0xbd8>)
 8008504:	f7ff ba8e 	b.w	8007a24 <_dtoa_r+0xdc>
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dcae      	bgt.n	800846c <_dtoa_r+0xb24>
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	2b02      	cmp	r3, #2
 8008512:	f73f aea8 	bgt.w	8008266 <_dtoa_r+0x91e>
 8008516:	e7a9      	b.n	800846c <_dtoa_r+0xb24>
 8008518:	08009def 	.word	0x08009def
 800851c:	08009d4c 	.word	0x08009d4c
 8008520:	08009d70 	.word	0x08009d70

08008524 <_localeconv_r>:
 8008524:	4800      	ldr	r0, [pc, #0]	; (8008528 <_localeconv_r+0x4>)
 8008526:	4770      	bx	lr
 8008528:	20000160 	.word	0x20000160

0800852c <malloc>:
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <malloc+0xc>)
 800852e:	4601      	mov	r1, r0
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f000 bc17 	b.w	8008d64 <_malloc_r>
 8008536:	bf00      	nop
 8008538:	2000000c 	.word	0x2000000c

0800853c <memcpy>:
 800853c:	440a      	add	r2, r1
 800853e:	4291      	cmp	r1, r2
 8008540:	f100 33ff 	add.w	r3, r0, #4294967295
 8008544:	d100      	bne.n	8008548 <memcpy+0xc>
 8008546:	4770      	bx	lr
 8008548:	b510      	push	{r4, lr}
 800854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008552:	4291      	cmp	r1, r2
 8008554:	d1f9      	bne.n	800854a <memcpy+0xe>
 8008556:	bd10      	pop	{r4, pc}

08008558 <_Balloc>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	b976      	cbnz	r6, 8008580 <_Balloc+0x28>
 8008562:	2010      	movs	r0, #16
 8008564:	f7ff ffe2 	bl	800852c <malloc>
 8008568:	4602      	mov	r2, r0
 800856a:	6260      	str	r0, [r4, #36]	; 0x24
 800856c:	b920      	cbnz	r0, 8008578 <_Balloc+0x20>
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <_Balloc+0x78>)
 8008570:	4818      	ldr	r0, [pc, #96]	; (80085d4 <_Balloc+0x7c>)
 8008572:	2166      	movs	r1, #102	; 0x66
 8008574:	f000 fdd6 	bl	8009124 <__assert_func>
 8008578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800857c:	6006      	str	r6, [r0, #0]
 800857e:	60c6      	str	r6, [r0, #12]
 8008580:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008582:	68f3      	ldr	r3, [r6, #12]
 8008584:	b183      	cbz	r3, 80085a8 <_Balloc+0x50>
 8008586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800858e:	b9b8      	cbnz	r0, 80085c0 <_Balloc+0x68>
 8008590:	2101      	movs	r1, #1
 8008592:	fa01 f605 	lsl.w	r6, r1, r5
 8008596:	1d72      	adds	r2, r6, #5
 8008598:	0092      	lsls	r2, r2, #2
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fb60 	bl	8008c60 <_calloc_r>
 80085a0:	b160      	cbz	r0, 80085bc <_Balloc+0x64>
 80085a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085a6:	e00e      	b.n	80085c6 <_Balloc+0x6e>
 80085a8:	2221      	movs	r2, #33	; 0x21
 80085aa:	2104      	movs	r1, #4
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fb57 	bl	8008c60 <_calloc_r>
 80085b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b4:	60f0      	str	r0, [r6, #12]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e4      	bne.n	8008586 <_Balloc+0x2e>
 80085bc:	2000      	movs	r0, #0
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	6802      	ldr	r2, [r0, #0]
 80085c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085c6:	2300      	movs	r3, #0
 80085c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085cc:	e7f7      	b.n	80085be <_Balloc+0x66>
 80085ce:	bf00      	nop
 80085d0:	08009d7d 	.word	0x08009d7d
 80085d4:	08009e00 	.word	0x08009e00

080085d8 <_Bfree>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	b976      	cbnz	r6, 8008600 <_Bfree+0x28>
 80085e2:	2010      	movs	r0, #16
 80085e4:	f7ff ffa2 	bl	800852c <malloc>
 80085e8:	4602      	mov	r2, r0
 80085ea:	6268      	str	r0, [r5, #36]	; 0x24
 80085ec:	b920      	cbnz	r0, 80085f8 <_Bfree+0x20>
 80085ee:	4b09      	ldr	r3, [pc, #36]	; (8008614 <_Bfree+0x3c>)
 80085f0:	4809      	ldr	r0, [pc, #36]	; (8008618 <_Bfree+0x40>)
 80085f2:	218a      	movs	r1, #138	; 0x8a
 80085f4:	f000 fd96 	bl	8009124 <__assert_func>
 80085f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085fc:	6006      	str	r6, [r0, #0]
 80085fe:	60c6      	str	r6, [r0, #12]
 8008600:	b13c      	cbz	r4, 8008612 <_Bfree+0x3a>
 8008602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008604:	6862      	ldr	r2, [r4, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800860c:	6021      	str	r1, [r4, #0]
 800860e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	08009d7d 	.word	0x08009d7d
 8008618:	08009e00 	.word	0x08009e00

0800861c <__multadd>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	690d      	ldr	r5, [r1, #16]
 8008622:	4607      	mov	r7, r0
 8008624:	460c      	mov	r4, r1
 8008626:	461e      	mov	r6, r3
 8008628:	f101 0c14 	add.w	ip, r1, #20
 800862c:	2000      	movs	r0, #0
 800862e:	f8dc 3000 	ldr.w	r3, [ip]
 8008632:	b299      	uxth	r1, r3
 8008634:	fb02 6101 	mla	r1, r2, r1, r6
 8008638:	0c1e      	lsrs	r6, r3, #16
 800863a:	0c0b      	lsrs	r3, r1, #16
 800863c:	fb02 3306 	mla	r3, r2, r6, r3
 8008640:	b289      	uxth	r1, r1
 8008642:	3001      	adds	r0, #1
 8008644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008648:	4285      	cmp	r5, r0
 800864a:	f84c 1b04 	str.w	r1, [ip], #4
 800864e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008652:	dcec      	bgt.n	800862e <__multadd+0x12>
 8008654:	b30e      	cbz	r6, 800869a <__multadd+0x7e>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	42ab      	cmp	r3, r5
 800865a:	dc19      	bgt.n	8008690 <__multadd+0x74>
 800865c:	6861      	ldr	r1, [r4, #4]
 800865e:	4638      	mov	r0, r7
 8008660:	3101      	adds	r1, #1
 8008662:	f7ff ff79 	bl	8008558 <_Balloc>
 8008666:	4680      	mov	r8, r0
 8008668:	b928      	cbnz	r0, 8008676 <__multadd+0x5a>
 800866a:	4602      	mov	r2, r0
 800866c:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <__multadd+0x84>)
 800866e:	480d      	ldr	r0, [pc, #52]	; (80086a4 <__multadd+0x88>)
 8008670:	21b5      	movs	r1, #181	; 0xb5
 8008672:	f000 fd57 	bl	8009124 <__assert_func>
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	f104 010c 	add.w	r1, r4, #12
 800867e:	0092      	lsls	r2, r2, #2
 8008680:	300c      	adds	r0, #12
 8008682:	f7ff ff5b 	bl	800853c <memcpy>
 8008686:	4621      	mov	r1, r4
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ffa5 	bl	80085d8 <_Bfree>
 800868e:	4644      	mov	r4, r8
 8008690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008694:	3501      	adds	r5, #1
 8008696:	615e      	str	r6, [r3, #20]
 8008698:	6125      	str	r5, [r4, #16]
 800869a:	4620      	mov	r0, r4
 800869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a0:	08009def 	.word	0x08009def
 80086a4:	08009e00 	.word	0x08009e00

080086a8 <__hi0bits>:
 80086a8:	0c03      	lsrs	r3, r0, #16
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	b9d3      	cbnz	r3, 80086e4 <__hi0bits+0x3c>
 80086ae:	0400      	lsls	r0, r0, #16
 80086b0:	2310      	movs	r3, #16
 80086b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086b6:	bf04      	itt	eq
 80086b8:	0200      	lsleq	r0, r0, #8
 80086ba:	3308      	addeq	r3, #8
 80086bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086c0:	bf04      	itt	eq
 80086c2:	0100      	lsleq	r0, r0, #4
 80086c4:	3304      	addeq	r3, #4
 80086c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086ca:	bf04      	itt	eq
 80086cc:	0080      	lsleq	r0, r0, #2
 80086ce:	3302      	addeq	r3, #2
 80086d0:	2800      	cmp	r0, #0
 80086d2:	db05      	blt.n	80086e0 <__hi0bits+0x38>
 80086d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086d8:	f103 0301 	add.w	r3, r3, #1
 80086dc:	bf08      	it	eq
 80086de:	2320      	moveq	r3, #32
 80086e0:	4618      	mov	r0, r3
 80086e2:	4770      	bx	lr
 80086e4:	2300      	movs	r3, #0
 80086e6:	e7e4      	b.n	80086b2 <__hi0bits+0xa>

080086e8 <__lo0bits>:
 80086e8:	6803      	ldr	r3, [r0, #0]
 80086ea:	f013 0207 	ands.w	r2, r3, #7
 80086ee:	4601      	mov	r1, r0
 80086f0:	d00b      	beq.n	800870a <__lo0bits+0x22>
 80086f2:	07da      	lsls	r2, r3, #31
 80086f4:	d423      	bmi.n	800873e <__lo0bits+0x56>
 80086f6:	0798      	lsls	r0, r3, #30
 80086f8:	bf49      	itett	mi
 80086fa:	085b      	lsrmi	r3, r3, #1
 80086fc:	089b      	lsrpl	r3, r3, #2
 80086fe:	2001      	movmi	r0, #1
 8008700:	600b      	strmi	r3, [r1, #0]
 8008702:	bf5c      	itt	pl
 8008704:	600b      	strpl	r3, [r1, #0]
 8008706:	2002      	movpl	r0, #2
 8008708:	4770      	bx	lr
 800870a:	b298      	uxth	r0, r3
 800870c:	b9a8      	cbnz	r0, 800873a <__lo0bits+0x52>
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	2010      	movs	r0, #16
 8008712:	b2da      	uxtb	r2, r3
 8008714:	b90a      	cbnz	r2, 800871a <__lo0bits+0x32>
 8008716:	3008      	adds	r0, #8
 8008718:	0a1b      	lsrs	r3, r3, #8
 800871a:	071a      	lsls	r2, r3, #28
 800871c:	bf04      	itt	eq
 800871e:	091b      	lsreq	r3, r3, #4
 8008720:	3004      	addeq	r0, #4
 8008722:	079a      	lsls	r2, r3, #30
 8008724:	bf04      	itt	eq
 8008726:	089b      	lsreq	r3, r3, #2
 8008728:	3002      	addeq	r0, #2
 800872a:	07da      	lsls	r2, r3, #31
 800872c:	d403      	bmi.n	8008736 <__lo0bits+0x4e>
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	f100 0001 	add.w	r0, r0, #1
 8008734:	d005      	beq.n	8008742 <__lo0bits+0x5a>
 8008736:	600b      	str	r3, [r1, #0]
 8008738:	4770      	bx	lr
 800873a:	4610      	mov	r0, r2
 800873c:	e7e9      	b.n	8008712 <__lo0bits+0x2a>
 800873e:	2000      	movs	r0, #0
 8008740:	4770      	bx	lr
 8008742:	2020      	movs	r0, #32
 8008744:	4770      	bx	lr
	...

08008748 <__i2b>:
 8008748:	b510      	push	{r4, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	2101      	movs	r1, #1
 800874e:	f7ff ff03 	bl	8008558 <_Balloc>
 8008752:	4602      	mov	r2, r0
 8008754:	b928      	cbnz	r0, 8008762 <__i2b+0x1a>
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <__i2b+0x24>)
 8008758:	4805      	ldr	r0, [pc, #20]	; (8008770 <__i2b+0x28>)
 800875a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800875e:	f000 fce1 	bl	8009124 <__assert_func>
 8008762:	2301      	movs	r3, #1
 8008764:	6144      	str	r4, [r0, #20]
 8008766:	6103      	str	r3, [r0, #16]
 8008768:	bd10      	pop	{r4, pc}
 800876a:	bf00      	nop
 800876c:	08009def 	.word	0x08009def
 8008770:	08009e00 	.word	0x08009e00

08008774 <__multiply>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	4691      	mov	r9, r2
 800877a:	690a      	ldr	r2, [r1, #16]
 800877c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	bfb8      	it	lt
 8008784:	460b      	movlt	r3, r1
 8008786:	460c      	mov	r4, r1
 8008788:	bfbc      	itt	lt
 800878a:	464c      	movlt	r4, r9
 800878c:	4699      	movlt	r9, r3
 800878e:	6927      	ldr	r7, [r4, #16]
 8008790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	6861      	ldr	r1, [r4, #4]
 8008798:	eb07 060a 	add.w	r6, r7, sl
 800879c:	42b3      	cmp	r3, r6
 800879e:	b085      	sub	sp, #20
 80087a0:	bfb8      	it	lt
 80087a2:	3101      	addlt	r1, #1
 80087a4:	f7ff fed8 	bl	8008558 <_Balloc>
 80087a8:	b930      	cbnz	r0, 80087b8 <__multiply+0x44>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b44      	ldr	r3, [pc, #272]	; (80088c0 <__multiply+0x14c>)
 80087ae:	4845      	ldr	r0, [pc, #276]	; (80088c4 <__multiply+0x150>)
 80087b0:	f240 115d 	movw	r1, #349	; 0x15d
 80087b4:	f000 fcb6 	bl	8009124 <__assert_func>
 80087b8:	f100 0514 	add.w	r5, r0, #20
 80087bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c0:	462b      	mov	r3, r5
 80087c2:	2200      	movs	r2, #0
 80087c4:	4543      	cmp	r3, r8
 80087c6:	d321      	bcc.n	800880c <__multiply+0x98>
 80087c8:	f104 0314 	add.w	r3, r4, #20
 80087cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087d0:	f109 0314 	add.w	r3, r9, #20
 80087d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	1b3a      	subs	r2, r7, r4
 80087dc:	3a15      	subs	r2, #21
 80087de:	f022 0203 	bic.w	r2, r2, #3
 80087e2:	3204      	adds	r2, #4
 80087e4:	f104 0115 	add.w	r1, r4, #21
 80087e8:	428f      	cmp	r7, r1
 80087ea:	bf38      	it	cc
 80087ec:	2204      	movcc	r2, #4
 80087ee:	9201      	str	r2, [sp, #4]
 80087f0:	9a02      	ldr	r2, [sp, #8]
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d80c      	bhi.n	8008812 <__multiply+0x9e>
 80087f8:	2e00      	cmp	r6, #0
 80087fa:	dd03      	ble.n	8008804 <__multiply+0x90>
 80087fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008800:	2b00      	cmp	r3, #0
 8008802:	d05a      	beq.n	80088ba <__multiply+0x146>
 8008804:	6106      	str	r6, [r0, #16]
 8008806:	b005      	add	sp, #20
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	f843 2b04 	str.w	r2, [r3], #4
 8008810:	e7d8      	b.n	80087c4 <__multiply+0x50>
 8008812:	f8b3 a000 	ldrh.w	sl, [r3]
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	d024      	beq.n	8008866 <__multiply+0xf2>
 800881c:	f104 0e14 	add.w	lr, r4, #20
 8008820:	46a9      	mov	r9, r5
 8008822:	f04f 0c00 	mov.w	ip, #0
 8008826:	f85e 2b04 	ldr.w	r2, [lr], #4
 800882a:	f8d9 1000 	ldr.w	r1, [r9]
 800882e:	fa1f fb82 	uxth.w	fp, r2
 8008832:	b289      	uxth	r1, r1
 8008834:	fb0a 110b 	mla	r1, sl, fp, r1
 8008838:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800883c:	f8d9 2000 	ldr.w	r2, [r9]
 8008840:	4461      	add	r1, ip
 8008842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008846:	fb0a c20b 	mla	r2, sl, fp, ip
 800884a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008854:	4577      	cmp	r7, lr
 8008856:	f849 1b04 	str.w	r1, [r9], #4
 800885a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800885e:	d8e2      	bhi.n	8008826 <__multiply+0xb2>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	f845 c002 	str.w	ip, [r5, r2]
 8008866:	9a03      	ldr	r2, [sp, #12]
 8008868:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800886c:	3304      	adds	r3, #4
 800886e:	f1b9 0f00 	cmp.w	r9, #0
 8008872:	d020      	beq.n	80088b6 <__multiply+0x142>
 8008874:	6829      	ldr	r1, [r5, #0]
 8008876:	f104 0c14 	add.w	ip, r4, #20
 800887a:	46ae      	mov	lr, r5
 800887c:	f04f 0a00 	mov.w	sl, #0
 8008880:	f8bc b000 	ldrh.w	fp, [ip]
 8008884:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008888:	fb09 220b 	mla	r2, r9, fp, r2
 800888c:	4492      	add	sl, r2
 800888e:	b289      	uxth	r1, r1
 8008890:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008894:	f84e 1b04 	str.w	r1, [lr], #4
 8008898:	f85c 2b04 	ldr.w	r2, [ip], #4
 800889c:	f8be 1000 	ldrh.w	r1, [lr]
 80088a0:	0c12      	lsrs	r2, r2, #16
 80088a2:	fb09 1102 	mla	r1, r9, r2, r1
 80088a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088aa:	4567      	cmp	r7, ip
 80088ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b0:	d8e6      	bhi.n	8008880 <__multiply+0x10c>
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	50a9      	str	r1, [r5, r2]
 80088b6:	3504      	adds	r5, #4
 80088b8:	e79a      	b.n	80087f0 <__multiply+0x7c>
 80088ba:	3e01      	subs	r6, #1
 80088bc:	e79c      	b.n	80087f8 <__multiply+0x84>
 80088be:	bf00      	nop
 80088c0:	08009def 	.word	0x08009def
 80088c4:	08009e00 	.word	0x08009e00

080088c8 <__pow5mult>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4615      	mov	r5, r2
 80088ce:	f012 0203 	ands.w	r2, r2, #3
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	d007      	beq.n	80088e8 <__pow5mult+0x20>
 80088d8:	4c25      	ldr	r4, [pc, #148]	; (8008970 <__pow5mult+0xa8>)
 80088da:	3a01      	subs	r2, #1
 80088dc:	2300      	movs	r3, #0
 80088de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e2:	f7ff fe9b 	bl	800861c <__multadd>
 80088e6:	4607      	mov	r7, r0
 80088e8:	10ad      	asrs	r5, r5, #2
 80088ea:	d03d      	beq.n	8008968 <__pow5mult+0xa0>
 80088ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088ee:	b97c      	cbnz	r4, 8008910 <__pow5mult+0x48>
 80088f0:	2010      	movs	r0, #16
 80088f2:	f7ff fe1b 	bl	800852c <malloc>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6270      	str	r0, [r6, #36]	; 0x24
 80088fa:	b928      	cbnz	r0, 8008908 <__pow5mult+0x40>
 80088fc:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <__pow5mult+0xac>)
 80088fe:	481e      	ldr	r0, [pc, #120]	; (8008978 <__pow5mult+0xb0>)
 8008900:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008904:	f000 fc0e 	bl	8009124 <__assert_func>
 8008908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800890c:	6004      	str	r4, [r0, #0]
 800890e:	60c4      	str	r4, [r0, #12]
 8008910:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008918:	b94c      	cbnz	r4, 800892e <__pow5mult+0x66>
 800891a:	f240 2171 	movw	r1, #625	; 0x271
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff ff12 	bl	8008748 <__i2b>
 8008924:	2300      	movs	r3, #0
 8008926:	f8c8 0008 	str.w	r0, [r8, #8]
 800892a:	4604      	mov	r4, r0
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 0900 	mov.w	r9, #0
 8008932:	07eb      	lsls	r3, r5, #31
 8008934:	d50a      	bpl.n	800894c <__pow5mult+0x84>
 8008936:	4639      	mov	r1, r7
 8008938:	4622      	mov	r2, r4
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ff1a 	bl	8008774 <__multiply>
 8008940:	4639      	mov	r1, r7
 8008942:	4680      	mov	r8, r0
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fe47 	bl	80085d8 <_Bfree>
 800894a:	4647      	mov	r7, r8
 800894c:	106d      	asrs	r5, r5, #1
 800894e:	d00b      	beq.n	8008968 <__pow5mult+0xa0>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	b938      	cbnz	r0, 8008964 <__pow5mult+0x9c>
 8008954:	4622      	mov	r2, r4
 8008956:	4621      	mov	r1, r4
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ff0b 	bl	8008774 <__multiply>
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	f8c0 9000 	str.w	r9, [r0]
 8008964:	4604      	mov	r4, r0
 8008966:	e7e4      	b.n	8008932 <__pow5mult+0x6a>
 8008968:	4638      	mov	r0, r7
 800896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896e:	bf00      	nop
 8008970:	08009f50 	.word	0x08009f50
 8008974:	08009d7d 	.word	0x08009d7d
 8008978:	08009e00 	.word	0x08009e00

0800897c <__lshift>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	460c      	mov	r4, r1
 8008982:	6849      	ldr	r1, [r1, #4]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898a:	68a3      	ldr	r3, [r4, #8]
 800898c:	4607      	mov	r7, r0
 800898e:	4691      	mov	r9, r2
 8008990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008994:	f108 0601 	add.w	r6, r8, #1
 8008998:	42b3      	cmp	r3, r6
 800899a:	db0b      	blt.n	80089b4 <__lshift+0x38>
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fddb 	bl	8008558 <_Balloc>
 80089a2:	4605      	mov	r5, r0
 80089a4:	b948      	cbnz	r0, 80089ba <__lshift+0x3e>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <__lshift+0xd8>)
 80089aa:	482b      	ldr	r0, [pc, #172]	; (8008a58 <__lshift+0xdc>)
 80089ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089b0:	f000 fbb8 	bl	8009124 <__assert_func>
 80089b4:	3101      	adds	r1, #1
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	e7ee      	b.n	8008998 <__lshift+0x1c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f100 0114 	add.w	r1, r0, #20
 80089c0:	f100 0210 	add.w	r2, r0, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	4553      	cmp	r3, sl
 80089c8:	db37      	blt.n	8008a3a <__lshift+0xbe>
 80089ca:	6920      	ldr	r0, [r4, #16]
 80089cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d0:	f104 0314 	add.w	r3, r4, #20
 80089d4:	f019 091f 	ands.w	r9, r9, #31
 80089d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089e0:	d02f      	beq.n	8008a42 <__lshift+0xc6>
 80089e2:	f1c9 0e20 	rsb	lr, r9, #32
 80089e6:	468a      	mov	sl, r1
 80089e8:	f04f 0c00 	mov.w	ip, #0
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	fa02 f209 	lsl.w	r2, r2, r9
 80089f2:	ea42 020c 	orr.w	r2, r2, ip
 80089f6:	f84a 2b04 	str.w	r2, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	4298      	cmp	r0, r3
 8008a00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a04:	d8f2      	bhi.n	80089ec <__lshift+0x70>
 8008a06:	1b03      	subs	r3, r0, r4
 8008a08:	3b15      	subs	r3, #21
 8008a0a:	f023 0303 	bic.w	r3, r3, #3
 8008a0e:	3304      	adds	r3, #4
 8008a10:	f104 0215 	add.w	r2, r4, #21
 8008a14:	4290      	cmp	r0, r2
 8008a16:	bf38      	it	cc
 8008a18:	2304      	movcc	r3, #4
 8008a1a:	f841 c003 	str.w	ip, [r1, r3]
 8008a1e:	f1bc 0f00 	cmp.w	ip, #0
 8008a22:	d001      	beq.n	8008a28 <__lshift+0xac>
 8008a24:	f108 0602 	add.w	r6, r8, #2
 8008a28:	3e01      	subs	r6, #1
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	612e      	str	r6, [r5, #16]
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f7ff fdd2 	bl	80085d8 <_Bfree>
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3e:	3301      	adds	r3, #1
 8008a40:	e7c1      	b.n	80089c6 <__lshift+0x4a>
 8008a42:	3904      	subs	r1, #4
 8008a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	d8f9      	bhi.n	8008a44 <__lshift+0xc8>
 8008a50:	e7ea      	b.n	8008a28 <__lshift+0xac>
 8008a52:	bf00      	nop
 8008a54:	08009def 	.word	0x08009def
 8008a58:	08009e00 	.word	0x08009e00

08008a5c <__mcmp>:
 8008a5c:	b530      	push	{r4, r5, lr}
 8008a5e:	6902      	ldr	r2, [r0, #16]
 8008a60:	690c      	ldr	r4, [r1, #16]
 8008a62:	1b12      	subs	r2, r2, r4
 8008a64:	d10e      	bne.n	8008a84 <__mcmp+0x28>
 8008a66:	f100 0314 	add.w	r3, r0, #20
 8008a6a:	3114      	adds	r1, #20
 8008a6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a7c:	42a5      	cmp	r5, r4
 8008a7e:	d003      	beq.n	8008a88 <__mcmp+0x2c>
 8008a80:	d305      	bcc.n	8008a8e <__mcmp+0x32>
 8008a82:	2201      	movs	r2, #1
 8008a84:	4610      	mov	r0, r2
 8008a86:	bd30      	pop	{r4, r5, pc}
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	d3f3      	bcc.n	8008a74 <__mcmp+0x18>
 8008a8c:	e7fa      	b.n	8008a84 <__mcmp+0x28>
 8008a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a92:	e7f7      	b.n	8008a84 <__mcmp+0x28>

08008a94 <__mdiff>:
 8008a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460c      	mov	r4, r1
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4690      	mov	r8, r2
 8008aa2:	f7ff ffdb 	bl	8008a5c <__mcmp>
 8008aa6:	1e05      	subs	r5, r0, #0
 8008aa8:	d110      	bne.n	8008acc <__mdiff+0x38>
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff fd53 	bl	8008558 <_Balloc>
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__mdiff+0x2e>
 8008ab4:	4b3a      	ldr	r3, [pc, #232]	; (8008ba0 <__mdiff+0x10c>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f240 2132 	movw	r1, #562	; 0x232
 8008abc:	4839      	ldr	r0, [pc, #228]	; (8008ba4 <__mdiff+0x110>)
 8008abe:	f000 fb31 	bl	8009124 <__assert_func>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	bfa4      	itt	ge
 8008ace:	4643      	movge	r3, r8
 8008ad0:	46a0      	movge	r8, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ad8:	bfa6      	itte	ge
 8008ada:	461c      	movge	r4, r3
 8008adc:	2500      	movge	r5, #0
 8008ade:	2501      	movlt	r5, #1
 8008ae0:	f7ff fd3a 	bl	8008558 <_Balloc>
 8008ae4:	b920      	cbnz	r0, 8008af0 <__mdiff+0x5c>
 8008ae6:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <__mdiff+0x10c>)
 8008ae8:	4602      	mov	r2, r0
 8008aea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008aee:	e7e5      	b.n	8008abc <__mdiff+0x28>
 8008af0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008af4:	6926      	ldr	r6, [r4, #16]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	f104 0914 	add.w	r9, r4, #20
 8008afc:	f108 0514 	add.w	r5, r8, #20
 8008b00:	f100 0e14 	add.w	lr, r0, #20
 8008b04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b0c:	f108 0210 	add.w	r2, r8, #16
 8008b10:	46f2      	mov	sl, lr
 8008b12:	2100      	movs	r1, #0
 8008b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b1c:	fa1f f883 	uxth.w	r8, r3
 8008b20:	fa11 f18b 	uxtah	r1, r1, fp
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	eba1 0808 	sub.w	r8, r1, r8
 8008b2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b32:	fa1f f888 	uxth.w	r8, r8
 8008b36:	1419      	asrs	r1, r3, #16
 8008b38:	454e      	cmp	r6, r9
 8008b3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b3e:	f84a 3b04 	str.w	r3, [sl], #4
 8008b42:	d8e7      	bhi.n	8008b14 <__mdiff+0x80>
 8008b44:	1b33      	subs	r3, r6, r4
 8008b46:	3b15      	subs	r3, #21
 8008b48:	f023 0303 	bic.w	r3, r3, #3
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	3415      	adds	r4, #21
 8008b50:	42a6      	cmp	r6, r4
 8008b52:	bf38      	it	cc
 8008b54:	2304      	movcc	r3, #4
 8008b56:	441d      	add	r5, r3
 8008b58:	4473      	add	r3, lr
 8008b5a:	469e      	mov	lr, r3
 8008b5c:	462e      	mov	r6, r5
 8008b5e:	4566      	cmp	r6, ip
 8008b60:	d30e      	bcc.n	8008b80 <__mdiff+0xec>
 8008b62:	f10c 0203 	add.w	r2, ip, #3
 8008b66:	1b52      	subs	r2, r2, r5
 8008b68:	f022 0203 	bic.w	r2, r2, #3
 8008b6c:	3d03      	subs	r5, #3
 8008b6e:	45ac      	cmp	ip, r5
 8008b70:	bf38      	it	cc
 8008b72:	2200      	movcc	r2, #0
 8008b74:	441a      	add	r2, r3
 8008b76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b7a:	b17b      	cbz	r3, 8008b9c <__mdiff+0x108>
 8008b7c:	6107      	str	r7, [r0, #16]
 8008b7e:	e7a3      	b.n	8008ac8 <__mdiff+0x34>
 8008b80:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b84:	fa11 f288 	uxtah	r2, r1, r8
 8008b88:	1414      	asrs	r4, r2, #16
 8008b8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b8e:	b292      	uxth	r2, r2
 8008b90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b94:	f84e 2b04 	str.w	r2, [lr], #4
 8008b98:	1421      	asrs	r1, r4, #16
 8008b9a:	e7e0      	b.n	8008b5e <__mdiff+0xca>
 8008b9c:	3f01      	subs	r7, #1
 8008b9e:	e7ea      	b.n	8008b76 <__mdiff+0xe2>
 8008ba0:	08009def 	.word	0x08009def
 8008ba4:	08009e00 	.word	0x08009e00

08008ba8 <__d2b>:
 8008ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bac:	4689      	mov	r9, r1
 8008bae:	2101      	movs	r1, #1
 8008bb0:	ec57 6b10 	vmov	r6, r7, d0
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	f7ff fccf 	bl	8008558 <_Balloc>
 8008bba:	4604      	mov	r4, r0
 8008bbc:	b930      	cbnz	r0, 8008bcc <__d2b+0x24>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <__d2b+0xb0>)
 8008bc2:	4826      	ldr	r0, [pc, #152]	; (8008c5c <__d2b+0xb4>)
 8008bc4:	f240 310a 	movw	r1, #778	; 0x30a
 8008bc8:	f000 faac 	bl	8009124 <__assert_func>
 8008bcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bd4:	bb35      	cbnz	r5, 8008c24 <__d2b+0x7c>
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	d028      	beq.n	8008c2e <__d2b+0x86>
 8008bdc:	4668      	mov	r0, sp
 8008bde:	9600      	str	r6, [sp, #0]
 8008be0:	f7ff fd82 	bl	80086e8 <__lo0bits>
 8008be4:	9900      	ldr	r1, [sp, #0]
 8008be6:	b300      	cbz	r0, 8008c2a <__d2b+0x82>
 8008be8:	9a01      	ldr	r2, [sp, #4]
 8008bea:	f1c0 0320 	rsb	r3, r0, #32
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	40c2      	lsrs	r2, r0
 8008bf6:	6163      	str	r3, [r4, #20]
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	9b01      	ldr	r3, [sp, #4]
 8008bfc:	61a3      	str	r3, [r4, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bf14      	ite	ne
 8008c02:	2202      	movne	r2, #2
 8008c04:	2201      	moveq	r2, #1
 8008c06:	6122      	str	r2, [r4, #16]
 8008c08:	b1d5      	cbz	r5, 8008c40 <__d2b+0x98>
 8008c0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c0e:	4405      	add	r5, r0
 8008c10:	f8c9 5000 	str.w	r5, [r9]
 8008c14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c18:	f8c8 0000 	str.w	r0, [r8]
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	b003      	add	sp, #12
 8008c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c28:	e7d5      	b.n	8008bd6 <__d2b+0x2e>
 8008c2a:	6161      	str	r1, [r4, #20]
 8008c2c:	e7e5      	b.n	8008bfa <__d2b+0x52>
 8008c2e:	a801      	add	r0, sp, #4
 8008c30:	f7ff fd5a 	bl	80086e8 <__lo0bits>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	6122      	str	r2, [r4, #16]
 8008c3c:	3020      	adds	r0, #32
 8008c3e:	e7e3      	b.n	8008c08 <__d2b+0x60>
 8008c40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c48:	f8c9 0000 	str.w	r0, [r9]
 8008c4c:	6918      	ldr	r0, [r3, #16]
 8008c4e:	f7ff fd2b 	bl	80086a8 <__hi0bits>
 8008c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c56:	e7df      	b.n	8008c18 <__d2b+0x70>
 8008c58:	08009def 	.word	0x08009def
 8008c5c:	08009e00 	.word	0x08009e00

08008c60 <_calloc_r>:
 8008c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c62:	fba1 2402 	umull	r2, r4, r1, r2
 8008c66:	b94c      	cbnz	r4, 8008c7c <_calloc_r+0x1c>
 8008c68:	4611      	mov	r1, r2
 8008c6a:	9201      	str	r2, [sp, #4]
 8008c6c:	f000 f87a 	bl	8008d64 <_malloc_r>
 8008c70:	9a01      	ldr	r2, [sp, #4]
 8008c72:	4605      	mov	r5, r0
 8008c74:	b930      	cbnz	r0, 8008c84 <_calloc_r+0x24>
 8008c76:	4628      	mov	r0, r5
 8008c78:	b003      	add	sp, #12
 8008c7a:	bd30      	pop	{r4, r5, pc}
 8008c7c:	220c      	movs	r2, #12
 8008c7e:	6002      	str	r2, [r0, #0]
 8008c80:	2500      	movs	r5, #0
 8008c82:	e7f8      	b.n	8008c76 <_calloc_r+0x16>
 8008c84:	4621      	mov	r1, r4
 8008c86:	f7fe f941 	bl	8006f0c <memset>
 8008c8a:	e7f4      	b.n	8008c76 <_calloc_r+0x16>

08008c8c <_free_r>:
 8008c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d044      	beq.n	8008d1c <_free_r+0x90>
 8008c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c96:	9001      	str	r0, [sp, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c9e:	bfb8      	it	lt
 8008ca0:	18e4      	addlt	r4, r4, r3
 8008ca2:	f000 fa9b 	bl	80091dc <__malloc_lock>
 8008ca6:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <_free_r+0x94>)
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	b933      	cbnz	r3, 8008cbc <_free_r+0x30>
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	6014      	str	r4, [r2, #0]
 8008cb2:	b003      	add	sp, #12
 8008cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cb8:	f000 ba96 	b.w	80091e8 <__malloc_unlock>
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d908      	bls.n	8008cd2 <_free_r+0x46>
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	1961      	adds	r1, r4, r5
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf01      	itttt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	1949      	addeq	r1, r1, r5
 8008cce:	6021      	streq	r1, [r4, #0]
 8008cd0:	e7ed      	b.n	8008cae <_free_r+0x22>
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b10b      	cbz	r3, 8008cdc <_free_r+0x50>
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d9fa      	bls.n	8008cd2 <_free_r+0x46>
 8008cdc:	6811      	ldr	r1, [r2, #0]
 8008cde:	1855      	adds	r5, r2, r1
 8008ce0:	42a5      	cmp	r5, r4
 8008ce2:	d10b      	bne.n	8008cfc <_free_r+0x70>
 8008ce4:	6824      	ldr	r4, [r4, #0]
 8008ce6:	4421      	add	r1, r4
 8008ce8:	1854      	adds	r4, r2, r1
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	d1e0      	bne.n	8008cb2 <_free_r+0x26>
 8008cf0:	681c      	ldr	r4, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	6053      	str	r3, [r2, #4]
 8008cf6:	4421      	add	r1, r4
 8008cf8:	6011      	str	r1, [r2, #0]
 8008cfa:	e7da      	b.n	8008cb2 <_free_r+0x26>
 8008cfc:	d902      	bls.n	8008d04 <_free_r+0x78>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	e7d6      	b.n	8008cb2 <_free_r+0x26>
 8008d04:	6825      	ldr	r5, [r4, #0]
 8008d06:	1961      	adds	r1, r4, r5
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf04      	itt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	bf04      	itt	eq
 8008d14:	1949      	addeq	r1, r1, r5
 8008d16:	6021      	streq	r1, [r4, #0]
 8008d18:	6054      	str	r4, [r2, #4]
 8008d1a:	e7ca      	b.n	8008cb2 <_free_r+0x26>
 8008d1c:	b003      	add	sp, #12
 8008d1e:	bd30      	pop	{r4, r5, pc}
 8008d20:	20000604 	.word	0x20000604

08008d24 <sbrk_aligned>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	4e0e      	ldr	r6, [pc, #56]	; (8008d60 <sbrk_aligned+0x3c>)
 8008d28:	460c      	mov	r4, r1
 8008d2a:	6831      	ldr	r1, [r6, #0]
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	b911      	cbnz	r1, 8008d36 <sbrk_aligned+0x12>
 8008d30:	f000 f9e8 	bl	8009104 <_sbrk_r>
 8008d34:	6030      	str	r0, [r6, #0]
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f9e3 	bl	8009104 <_sbrk_r>
 8008d3e:	1c43      	adds	r3, r0, #1
 8008d40:	d00a      	beq.n	8008d58 <sbrk_aligned+0x34>
 8008d42:	1cc4      	adds	r4, r0, #3
 8008d44:	f024 0403 	bic.w	r4, r4, #3
 8008d48:	42a0      	cmp	r0, r4
 8008d4a:	d007      	beq.n	8008d5c <sbrk_aligned+0x38>
 8008d4c:	1a21      	subs	r1, r4, r0
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f000 f9d8 	bl	8009104 <_sbrk_r>
 8008d54:	3001      	adds	r0, #1
 8008d56:	d101      	bne.n	8008d5c <sbrk_aligned+0x38>
 8008d58:	f04f 34ff 	mov.w	r4, #4294967295
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	20000608 	.word	0x20000608

08008d64 <_malloc_r>:
 8008d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d68:	1ccd      	adds	r5, r1, #3
 8008d6a:	f025 0503 	bic.w	r5, r5, #3
 8008d6e:	3508      	adds	r5, #8
 8008d70:	2d0c      	cmp	r5, #12
 8008d72:	bf38      	it	cc
 8008d74:	250c      	movcc	r5, #12
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	4607      	mov	r7, r0
 8008d7a:	db01      	blt.n	8008d80 <_malloc_r+0x1c>
 8008d7c:	42a9      	cmp	r1, r5
 8008d7e:	d905      	bls.n	8008d8c <_malloc_r+0x28>
 8008d80:	230c      	movs	r3, #12
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	2600      	movs	r6, #0
 8008d86:	4630      	mov	r0, r6
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	4e2e      	ldr	r6, [pc, #184]	; (8008e48 <_malloc_r+0xe4>)
 8008d8e:	f000 fa25 	bl	80091dc <__malloc_lock>
 8008d92:	6833      	ldr	r3, [r6, #0]
 8008d94:	461c      	mov	r4, r3
 8008d96:	bb34      	cbnz	r4, 8008de6 <_malloc_r+0x82>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f7ff ffc2 	bl	8008d24 <sbrk_aligned>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	4604      	mov	r4, r0
 8008da4:	d14d      	bne.n	8008e42 <_malloc_r+0xde>
 8008da6:	6834      	ldr	r4, [r6, #0]
 8008da8:	4626      	mov	r6, r4
 8008daa:	2e00      	cmp	r6, #0
 8008dac:	d140      	bne.n	8008e30 <_malloc_r+0xcc>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	4631      	mov	r1, r6
 8008db2:	4638      	mov	r0, r7
 8008db4:	eb04 0803 	add.w	r8, r4, r3
 8008db8:	f000 f9a4 	bl	8009104 <_sbrk_r>
 8008dbc:	4580      	cmp	r8, r0
 8008dbe:	d13a      	bne.n	8008e36 <_malloc_r+0xd2>
 8008dc0:	6821      	ldr	r1, [r4, #0]
 8008dc2:	3503      	adds	r5, #3
 8008dc4:	1a6d      	subs	r5, r5, r1
 8008dc6:	f025 0503 	bic.w	r5, r5, #3
 8008dca:	3508      	adds	r5, #8
 8008dcc:	2d0c      	cmp	r5, #12
 8008dce:	bf38      	it	cc
 8008dd0:	250c      	movcc	r5, #12
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ffa5 	bl	8008d24 <sbrk_aligned>
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d02b      	beq.n	8008e36 <_malloc_r+0xd2>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	442b      	add	r3, r5
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	e00e      	b.n	8008e04 <_malloc_r+0xa0>
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	1b52      	subs	r2, r2, r5
 8008dea:	d41e      	bmi.n	8008e2a <_malloc_r+0xc6>
 8008dec:	2a0b      	cmp	r2, #11
 8008dee:	d916      	bls.n	8008e1e <_malloc_r+0xba>
 8008df0:	1961      	adds	r1, r4, r5
 8008df2:	42a3      	cmp	r3, r4
 8008df4:	6025      	str	r5, [r4, #0]
 8008df6:	bf18      	it	ne
 8008df8:	6059      	strne	r1, [r3, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	bf08      	it	eq
 8008dfe:	6031      	streq	r1, [r6, #0]
 8008e00:	5162      	str	r2, [r4, r5]
 8008e02:	604b      	str	r3, [r1, #4]
 8008e04:	4638      	mov	r0, r7
 8008e06:	f104 060b 	add.w	r6, r4, #11
 8008e0a:	f000 f9ed 	bl	80091e8 <__malloc_unlock>
 8008e0e:	f026 0607 	bic.w	r6, r6, #7
 8008e12:	1d23      	adds	r3, r4, #4
 8008e14:	1af2      	subs	r2, r6, r3
 8008e16:	d0b6      	beq.n	8008d86 <_malloc_r+0x22>
 8008e18:	1b9b      	subs	r3, r3, r6
 8008e1a:	50a3      	str	r3, [r4, r2]
 8008e1c:	e7b3      	b.n	8008d86 <_malloc_r+0x22>
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	bf0c      	ite	eq
 8008e24:	6032      	streq	r2, [r6, #0]
 8008e26:	605a      	strne	r2, [r3, #4]
 8008e28:	e7ec      	b.n	8008e04 <_malloc_r+0xa0>
 8008e2a:	4623      	mov	r3, r4
 8008e2c:	6864      	ldr	r4, [r4, #4]
 8008e2e:	e7b2      	b.n	8008d96 <_malloc_r+0x32>
 8008e30:	4634      	mov	r4, r6
 8008e32:	6876      	ldr	r6, [r6, #4]
 8008e34:	e7b9      	b.n	8008daa <_malloc_r+0x46>
 8008e36:	230c      	movs	r3, #12
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f000 f9d4 	bl	80091e8 <__malloc_unlock>
 8008e40:	e7a1      	b.n	8008d86 <_malloc_r+0x22>
 8008e42:	6025      	str	r5, [r4, #0]
 8008e44:	e7de      	b.n	8008e04 <_malloc_r+0xa0>
 8008e46:	bf00      	nop
 8008e48:	20000604 	.word	0x20000604

08008e4c <__ssputs_r>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	688e      	ldr	r6, [r1, #8]
 8008e52:	429e      	cmp	r6, r3
 8008e54:	4682      	mov	sl, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	4690      	mov	r8, r2
 8008e5a:	461f      	mov	r7, r3
 8008e5c:	d838      	bhi.n	8008ed0 <__ssputs_r+0x84>
 8008e5e:	898a      	ldrh	r2, [r1, #12]
 8008e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e64:	d032      	beq.n	8008ecc <__ssputs_r+0x80>
 8008e66:	6825      	ldr	r5, [r4, #0]
 8008e68:	6909      	ldr	r1, [r1, #16]
 8008e6a:	eba5 0901 	sub.w	r9, r5, r1
 8008e6e:	6965      	ldr	r5, [r4, #20]
 8008e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e78:	3301      	adds	r3, #1
 8008e7a:	444b      	add	r3, r9
 8008e7c:	106d      	asrs	r5, r5, #1
 8008e7e:	429d      	cmp	r5, r3
 8008e80:	bf38      	it	cc
 8008e82:	461d      	movcc	r5, r3
 8008e84:	0553      	lsls	r3, r2, #21
 8008e86:	d531      	bpl.n	8008eec <__ssputs_r+0xa0>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f7ff ff6b 	bl	8008d64 <_malloc_r>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	b950      	cbnz	r0, 8008ea8 <__ssputs_r+0x5c>
 8008e92:	230c      	movs	r3, #12
 8008e94:	f8ca 3000 	str.w	r3, [sl]
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	6921      	ldr	r1, [r4, #16]
 8008eaa:	464a      	mov	r2, r9
 8008eac:	f7ff fb46 	bl	800853c <memcpy>
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	6126      	str	r6, [r4, #16]
 8008ebe:	6165      	str	r5, [r4, #20]
 8008ec0:	444e      	add	r6, r9
 8008ec2:	eba5 0509 	sub.w	r5, r5, r9
 8008ec6:	6026      	str	r6, [r4, #0]
 8008ec8:	60a5      	str	r5, [r4, #8]
 8008eca:	463e      	mov	r6, r7
 8008ecc:	42be      	cmp	r6, r7
 8008ece:	d900      	bls.n	8008ed2 <__ssputs_r+0x86>
 8008ed0:	463e      	mov	r6, r7
 8008ed2:	6820      	ldr	r0, [r4, #0]
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	f000 f966 	bl	80091a8 <memmove>
 8008edc:	68a3      	ldr	r3, [r4, #8]
 8008ede:	1b9b      	subs	r3, r3, r6
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	4433      	add	r3, r6
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	2000      	movs	r0, #0
 8008eea:	e7db      	b.n	8008ea4 <__ssputs_r+0x58>
 8008eec:	462a      	mov	r2, r5
 8008eee:	f000 f981 	bl	80091f4 <_realloc_r>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1e1      	bne.n	8008ebc <__ssputs_r+0x70>
 8008ef8:	6921      	ldr	r1, [r4, #16]
 8008efa:	4650      	mov	r0, sl
 8008efc:	f7ff fec6 	bl	8008c8c <_free_r>
 8008f00:	e7c7      	b.n	8008e92 <__ssputs_r+0x46>
	...

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4698      	mov	r8, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4607      	mov	r7, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	d50e      	bpl.n	8008f36 <_svfiprintf_r+0x32>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b963      	cbnz	r3, 8008f36 <_svfiprintf_r+0x32>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7ff ff21 	bl	8008d64 <_malloc_r>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	6128      	str	r0, [r5, #16]
 8008f26:	b920      	cbnz	r0, 8008f32 <_svfiprintf_r+0x2e>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e0d1      	b.n	80090d6 <_svfiprintf_r+0x1d2>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090f0 <_svfiprintf_r+0x1ec>
 8008f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4e:	f04f 0901 	mov.w	r9, #1
 8008f52:	4623      	mov	r3, r4
 8008f54:	469a      	mov	sl, r3
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	b10a      	cbz	r2, 8008f60 <_svfiprintf_r+0x5c>
 8008f5c:	2a25      	cmp	r2, #37	; 0x25
 8008f5e:	d1f9      	bne.n	8008f54 <_svfiprintf_r+0x50>
 8008f60:	ebba 0b04 	subs.w	fp, sl, r4
 8008f64:	d00b      	beq.n	8008f7e <_svfiprintf_r+0x7a>
 8008f66:	465b      	mov	r3, fp
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ff6d 	bl	8008e4c <__ssputs_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	f000 80aa 	beq.w	80090cc <_svfiprintf_r+0x1c8>
 8008f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f7a:	445a      	add	r2, fp
 8008f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a2 	beq.w	80090cc <_svfiprintf_r+0x1c8>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f92:	f10a 0a01 	add.w	sl, sl, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa0:	4654      	mov	r4, sl
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	4851      	ldr	r0, [pc, #324]	; (80090f0 <_svfiprintf_r+0x1ec>)
 8008faa:	f7f7 f919 	bl	80001e0 <memchr>
 8008fae:	9a04      	ldr	r2, [sp, #16]
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_svfiprintf_r+0xe6>
 8008fb2:	06d0      	lsls	r0, r2, #27
 8008fb4:	bf44      	itt	mi
 8008fb6:	2320      	movmi	r3, #32
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	0711      	lsls	r1, r2, #28
 8008fbe:	bf44      	itt	mi
 8008fc0:	232b      	movmi	r3, #43	; 0x2b
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b2a      	cmp	r3, #42	; 0x2a
 8008fcc:	d015      	beq.n	8008ffa <_svfiprintf_r+0xf6>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	4654      	mov	r4, sl
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f04f 0c0a 	mov.w	ip, #10
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d94e      	bls.n	8009082 <_svfiprintf_r+0x17e>
 8008fe4:	b1b0      	cbz	r0, 8009014 <_svfiprintf_r+0x110>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e014      	b.n	8009014 <_svfiprintf_r+0x110>
 8008fea:	eba0 0308 	sub.w	r3, r0, r8
 8008fee:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	46a2      	mov	sl, r4
 8008ff8:	e7d2      	b.n	8008fa0 <_svfiprintf_r+0x9c>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbb      	ittet	lt
 8009006:	425b      	neglt	r3, r3
 8009008:	f042 0202 	orrlt.w	r2, r2, #2
 800900c:	9307      	strge	r3, [sp, #28]
 800900e:	9307      	strlt	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	9204      	strlt	r2, [sp, #16]
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	2b2e      	cmp	r3, #46	; 0x2e
 8009018:	d10c      	bne.n	8009034 <_svfiprintf_r+0x130>
 800901a:	7863      	ldrb	r3, [r4, #1]
 800901c:	2b2a      	cmp	r3, #42	; 0x2a
 800901e:	d135      	bne.n	800908c <_svfiprintf_r+0x188>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9203      	str	r2, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb8      	it	lt
 800902c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009030:	3402      	adds	r4, #2
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009100 <_svfiprintf_r+0x1fc>
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	2203      	movs	r2, #3
 800903c:	4650      	mov	r0, sl
 800903e:	f7f7 f8cf 	bl	80001e0 <memchr>
 8009042:	b140      	cbz	r0, 8009056 <_svfiprintf_r+0x152>
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	eba0 000a 	sub.w	r0, r0, sl
 800904a:	fa03 f000 	lsl.w	r0, r3, r0
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	4303      	orrs	r3, r0
 8009052:	3401      	adds	r4, #1
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	4826      	ldr	r0, [pc, #152]	; (80090f4 <_svfiprintf_r+0x1f0>)
 800905c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009060:	2206      	movs	r2, #6
 8009062:	f7f7 f8bd 	bl	80001e0 <memchr>
 8009066:	2800      	cmp	r0, #0
 8009068:	d038      	beq.n	80090dc <_svfiprintf_r+0x1d8>
 800906a:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <_svfiprintf_r+0x1f4>)
 800906c:	bb1b      	cbnz	r3, 80090b6 <_svfiprintf_r+0x1b2>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	3308      	adds	r3, #8
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	4433      	add	r3, r6
 800907e:	9309      	str	r3, [sp, #36]	; 0x24
 8009080:	e767      	b.n	8008f52 <_svfiprintf_r+0x4e>
 8009082:	fb0c 3202 	mla	r2, ip, r2, r3
 8009086:	460c      	mov	r4, r1
 8009088:	2001      	movs	r0, #1
 800908a:	e7a5      	b.n	8008fd8 <_svfiprintf_r+0xd4>
 800908c:	2300      	movs	r3, #0
 800908e:	3401      	adds	r4, #1
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	4619      	mov	r1, r3
 8009094:	f04f 0c0a 	mov.w	ip, #10
 8009098:	4620      	mov	r0, r4
 800909a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909e:	3a30      	subs	r2, #48	; 0x30
 80090a0:	2a09      	cmp	r2, #9
 80090a2:	d903      	bls.n	80090ac <_svfiprintf_r+0x1a8>
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0c5      	beq.n	8009034 <_svfiprintf_r+0x130>
 80090a8:	9105      	str	r1, [sp, #20]
 80090aa:	e7c3      	b.n	8009034 <_svfiprintf_r+0x130>
 80090ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80090b0:	4604      	mov	r4, r0
 80090b2:	2301      	movs	r3, #1
 80090b4:	e7f0      	b.n	8009098 <_svfiprintf_r+0x194>
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <_svfiprintf_r+0x1f8>)
 80090be:	a904      	add	r1, sp, #16
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7fd ffcb 	bl	800705c <_printf_float>
 80090c6:	1c42      	adds	r2, r0, #1
 80090c8:	4606      	mov	r6, r0
 80090ca:	d1d6      	bne.n	800907a <_svfiprintf_r+0x176>
 80090cc:	89ab      	ldrh	r3, [r5, #12]
 80090ce:	065b      	lsls	r3, r3, #25
 80090d0:	f53f af2c 	bmi.w	8008f2c <_svfiprintf_r+0x28>
 80090d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d6:	b01d      	add	sp, #116	; 0x74
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	462a      	mov	r2, r5
 80090e2:	4b06      	ldr	r3, [pc, #24]	; (80090fc <_svfiprintf_r+0x1f8>)
 80090e4:	a904      	add	r1, sp, #16
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7fe fa5c 	bl	80075a4 <_printf_i>
 80090ec:	e7eb      	b.n	80090c6 <_svfiprintf_r+0x1c2>
 80090ee:	bf00      	nop
 80090f0:	08009f5c 	.word	0x08009f5c
 80090f4:	08009f66 	.word	0x08009f66
 80090f8:	0800705d 	.word	0x0800705d
 80090fc:	08008e4d 	.word	0x08008e4d
 8009100:	08009f62 	.word	0x08009f62

08009104 <_sbrk_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	; (8009120 <_sbrk_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f8 fbc6 	bl	80018a0 <_sbrk>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_sbrk_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_sbrk_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	2000060c 	.word	0x2000060c

08009124 <__assert_func>:
 8009124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009126:	4614      	mov	r4, r2
 8009128:	461a      	mov	r2, r3
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <__assert_func+0x2c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4605      	mov	r5, r0
 8009130:	68d8      	ldr	r0, [r3, #12]
 8009132:	b14c      	cbz	r4, 8009148 <__assert_func+0x24>
 8009134:	4b07      	ldr	r3, [pc, #28]	; (8009154 <__assert_func+0x30>)
 8009136:	9100      	str	r1, [sp, #0]
 8009138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800913c:	4906      	ldr	r1, [pc, #24]	; (8009158 <__assert_func+0x34>)
 800913e:	462b      	mov	r3, r5
 8009140:	f000 f80e 	bl	8009160 <fiprintf>
 8009144:	f000 faac 	bl	80096a0 <abort>
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <__assert_func+0x38>)
 800914a:	461c      	mov	r4, r3
 800914c:	e7f3      	b.n	8009136 <__assert_func+0x12>
 800914e:	bf00      	nop
 8009150:	2000000c 	.word	0x2000000c
 8009154:	08009f6d 	.word	0x08009f6d
 8009158:	08009f7a 	.word	0x08009f7a
 800915c:	08009fa8 	.word	0x08009fa8

08009160 <fiprintf>:
 8009160:	b40e      	push	{r1, r2, r3}
 8009162:	b503      	push	{r0, r1, lr}
 8009164:	4601      	mov	r1, r0
 8009166:	ab03      	add	r3, sp, #12
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <fiprintf+0x20>)
 800916a:	f853 2b04 	ldr.w	r2, [r3], #4
 800916e:	6800      	ldr	r0, [r0, #0]
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	f000 f897 	bl	80092a4 <_vfiprintf_r>
 8009176:	b002      	add	sp, #8
 8009178:	f85d eb04 	ldr.w	lr, [sp], #4
 800917c:	b003      	add	sp, #12
 800917e:	4770      	bx	lr
 8009180:	2000000c 	.word	0x2000000c

08009184 <__ascii_mbtowc>:
 8009184:	b082      	sub	sp, #8
 8009186:	b901      	cbnz	r1, 800918a <__ascii_mbtowc+0x6>
 8009188:	a901      	add	r1, sp, #4
 800918a:	b142      	cbz	r2, 800919e <__ascii_mbtowc+0x1a>
 800918c:	b14b      	cbz	r3, 80091a2 <__ascii_mbtowc+0x1e>
 800918e:	7813      	ldrb	r3, [r2, #0]
 8009190:	600b      	str	r3, [r1, #0]
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	1e10      	subs	r0, r2, #0
 8009196:	bf18      	it	ne
 8009198:	2001      	movne	r0, #1
 800919a:	b002      	add	sp, #8
 800919c:	4770      	bx	lr
 800919e:	4610      	mov	r0, r2
 80091a0:	e7fb      	b.n	800919a <__ascii_mbtowc+0x16>
 80091a2:	f06f 0001 	mvn.w	r0, #1
 80091a6:	e7f8      	b.n	800919a <__ascii_mbtowc+0x16>

080091a8 <memmove>:
 80091a8:	4288      	cmp	r0, r1
 80091aa:	b510      	push	{r4, lr}
 80091ac:	eb01 0402 	add.w	r4, r1, r2
 80091b0:	d902      	bls.n	80091b8 <memmove+0x10>
 80091b2:	4284      	cmp	r4, r0
 80091b4:	4623      	mov	r3, r4
 80091b6:	d807      	bhi.n	80091c8 <memmove+0x20>
 80091b8:	1e43      	subs	r3, r0, #1
 80091ba:	42a1      	cmp	r1, r4
 80091bc:	d008      	beq.n	80091d0 <memmove+0x28>
 80091be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091c6:	e7f8      	b.n	80091ba <memmove+0x12>
 80091c8:	4402      	add	r2, r0
 80091ca:	4601      	mov	r1, r0
 80091cc:	428a      	cmp	r2, r1
 80091ce:	d100      	bne.n	80091d2 <memmove+0x2a>
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091da:	e7f7      	b.n	80091cc <memmove+0x24>

080091dc <__malloc_lock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_lock+0x8>)
 80091de:	f000 bc1f 	b.w	8009a20 <__retarget_lock_acquire_recursive>
 80091e2:	bf00      	nop
 80091e4:	20000610 	.word	0x20000610

080091e8 <__malloc_unlock>:
 80091e8:	4801      	ldr	r0, [pc, #4]	; (80091f0 <__malloc_unlock+0x8>)
 80091ea:	f000 bc1a 	b.w	8009a22 <__retarget_lock_release_recursive>
 80091ee:	bf00      	nop
 80091f0:	20000610 	.word	0x20000610

080091f4 <_realloc_r>:
 80091f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f8:	4680      	mov	r8, r0
 80091fa:	4614      	mov	r4, r2
 80091fc:	460e      	mov	r6, r1
 80091fe:	b921      	cbnz	r1, 800920a <_realloc_r+0x16>
 8009200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009204:	4611      	mov	r1, r2
 8009206:	f7ff bdad 	b.w	8008d64 <_malloc_r>
 800920a:	b92a      	cbnz	r2, 8009218 <_realloc_r+0x24>
 800920c:	f7ff fd3e 	bl	8008c8c <_free_r>
 8009210:	4625      	mov	r5, r4
 8009212:	4628      	mov	r0, r5
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009218:	f000 fc6a 	bl	8009af0 <_malloc_usable_size_r>
 800921c:	4284      	cmp	r4, r0
 800921e:	4607      	mov	r7, r0
 8009220:	d802      	bhi.n	8009228 <_realloc_r+0x34>
 8009222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009226:	d812      	bhi.n	800924e <_realloc_r+0x5a>
 8009228:	4621      	mov	r1, r4
 800922a:	4640      	mov	r0, r8
 800922c:	f7ff fd9a 	bl	8008d64 <_malloc_r>
 8009230:	4605      	mov	r5, r0
 8009232:	2800      	cmp	r0, #0
 8009234:	d0ed      	beq.n	8009212 <_realloc_r+0x1e>
 8009236:	42bc      	cmp	r4, r7
 8009238:	4622      	mov	r2, r4
 800923a:	4631      	mov	r1, r6
 800923c:	bf28      	it	cs
 800923e:	463a      	movcs	r2, r7
 8009240:	f7ff f97c 	bl	800853c <memcpy>
 8009244:	4631      	mov	r1, r6
 8009246:	4640      	mov	r0, r8
 8009248:	f7ff fd20 	bl	8008c8c <_free_r>
 800924c:	e7e1      	b.n	8009212 <_realloc_r+0x1e>
 800924e:	4635      	mov	r5, r6
 8009250:	e7df      	b.n	8009212 <_realloc_r+0x1e>

08009252 <__sfputc_r>:
 8009252:	6893      	ldr	r3, [r2, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	b410      	push	{r4}
 800925a:	6093      	str	r3, [r2, #8]
 800925c:	da08      	bge.n	8009270 <__sfputc_r+0x1e>
 800925e:	6994      	ldr	r4, [r2, #24]
 8009260:	42a3      	cmp	r3, r4
 8009262:	db01      	blt.n	8009268 <__sfputc_r+0x16>
 8009264:	290a      	cmp	r1, #10
 8009266:	d103      	bne.n	8009270 <__sfputc_r+0x1e>
 8009268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926c:	f000 b94a 	b.w	8009504 <__swbuf_r>
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	1c58      	adds	r0, r3, #1
 8009274:	6010      	str	r0, [r2, #0]
 8009276:	7019      	strb	r1, [r3, #0]
 8009278:	4608      	mov	r0, r1
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	4770      	bx	lr

08009280 <__sfputs_r>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	4614      	mov	r4, r2
 8009288:	18d5      	adds	r5, r2, r3
 800928a:	42ac      	cmp	r4, r5
 800928c:	d101      	bne.n	8009292 <__sfputs_r+0x12>
 800928e:	2000      	movs	r0, #0
 8009290:	e007      	b.n	80092a2 <__sfputs_r+0x22>
 8009292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009296:	463a      	mov	r2, r7
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffda 	bl	8009252 <__sfputc_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d1f3      	bne.n	800928a <__sfputs_r+0xa>
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092a4 <_vfiprintf_r>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	460d      	mov	r5, r1
 80092aa:	b09d      	sub	sp, #116	; 0x74
 80092ac:	4614      	mov	r4, r2
 80092ae:	4698      	mov	r8, r3
 80092b0:	4606      	mov	r6, r0
 80092b2:	b118      	cbz	r0, 80092bc <_vfiprintf_r+0x18>
 80092b4:	6983      	ldr	r3, [r0, #24]
 80092b6:	b90b      	cbnz	r3, 80092bc <_vfiprintf_r+0x18>
 80092b8:	f000 fb14 	bl	80098e4 <__sinit>
 80092bc:	4b89      	ldr	r3, [pc, #548]	; (80094e4 <_vfiprintf_r+0x240>)
 80092be:	429d      	cmp	r5, r3
 80092c0:	d11b      	bne.n	80092fa <_vfiprintf_r+0x56>
 80092c2:	6875      	ldr	r5, [r6, #4]
 80092c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	d405      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	059a      	lsls	r2, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d2:	f000 fba5 	bl	8009a20 <__retarget_lock_acquire_recursive>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	071b      	lsls	r3, r3, #28
 80092da:	d501      	bpl.n	80092e0 <_vfiprintf_r+0x3c>
 80092dc:	692b      	ldr	r3, [r5, #16]
 80092de:	b9eb      	cbnz	r3, 800931c <_vfiprintf_r+0x78>
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f000 f96e 	bl	80095c4 <__swsetup_r>
 80092e8:	b1c0      	cbz	r0, 800931c <_vfiprintf_r+0x78>
 80092ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ec:	07dc      	lsls	r4, r3, #31
 80092ee:	d50e      	bpl.n	800930e <_vfiprintf_r+0x6a>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	b01d      	add	sp, #116	; 0x74
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	4b7b      	ldr	r3, [pc, #492]	; (80094e8 <_vfiprintf_r+0x244>)
 80092fc:	429d      	cmp	r5, r3
 80092fe:	d101      	bne.n	8009304 <_vfiprintf_r+0x60>
 8009300:	68b5      	ldr	r5, [r6, #8]
 8009302:	e7df      	b.n	80092c4 <_vfiprintf_r+0x20>
 8009304:	4b79      	ldr	r3, [pc, #484]	; (80094ec <_vfiprintf_r+0x248>)
 8009306:	429d      	cmp	r5, r3
 8009308:	bf08      	it	eq
 800930a:	68f5      	ldreq	r5, [r6, #12]
 800930c:	e7da      	b.n	80092c4 <_vfiprintf_r+0x20>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	0598      	lsls	r0, r3, #22
 8009312:	d4ed      	bmi.n	80092f0 <_vfiprintf_r+0x4c>
 8009314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009316:	f000 fb84 	bl	8009a22 <__retarget_lock_release_recursive>
 800931a:	e7e9      	b.n	80092f0 <_vfiprintf_r+0x4c>
 800931c:	2300      	movs	r3, #0
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	2320      	movs	r3, #32
 8009322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009326:	f8cd 800c 	str.w	r8, [sp, #12]
 800932a:	2330      	movs	r3, #48	; 0x30
 800932c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094f0 <_vfiprintf_r+0x24c>
 8009330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009334:	f04f 0901 	mov.w	r9, #1
 8009338:	4623      	mov	r3, r4
 800933a:	469a      	mov	sl, r3
 800933c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009340:	b10a      	cbz	r2, 8009346 <_vfiprintf_r+0xa2>
 8009342:	2a25      	cmp	r2, #37	; 0x25
 8009344:	d1f9      	bne.n	800933a <_vfiprintf_r+0x96>
 8009346:	ebba 0b04 	subs.w	fp, sl, r4
 800934a:	d00b      	beq.n	8009364 <_vfiprintf_r+0xc0>
 800934c:	465b      	mov	r3, fp
 800934e:	4622      	mov	r2, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff94 	bl	8009280 <__sfputs_r>
 8009358:	3001      	adds	r0, #1
 800935a:	f000 80aa 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	445a      	add	r2, fp
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80a2 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800936e:	2300      	movs	r3, #0
 8009370:	f04f 32ff 	mov.w	r2, #4294967295
 8009374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	4654      	mov	r4, sl
 8009388:	2205      	movs	r2, #5
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4858      	ldr	r0, [pc, #352]	; (80094f0 <_vfiprintf_r+0x24c>)
 8009390:	f7f6 ff26 	bl	80001e0 <memchr>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	b9d8      	cbnz	r0, 80093d0 <_vfiprintf_r+0x12c>
 8009398:	06d1      	lsls	r1, r2, #27
 800939a:	bf44      	itt	mi
 800939c:	2320      	movmi	r3, #32
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a2:	0713      	lsls	r3, r2, #28
 80093a4:	bf44      	itt	mi
 80093a6:	232b      	movmi	r3, #43	; 0x2b
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b2a      	cmp	r3, #42	; 0x2a
 80093b2:	d015      	beq.n	80093e0 <_vfiprintf_r+0x13c>
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	4654      	mov	r4, sl
 80093b8:	2000      	movs	r0, #0
 80093ba:	f04f 0c0a 	mov.w	ip, #10
 80093be:	4621      	mov	r1, r4
 80093c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c4:	3b30      	subs	r3, #48	; 0x30
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d94e      	bls.n	8009468 <_vfiprintf_r+0x1c4>
 80093ca:	b1b0      	cbz	r0, 80093fa <_vfiprintf_r+0x156>
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	e014      	b.n	80093fa <_vfiprintf_r+0x156>
 80093d0:	eba0 0308 	sub.w	r3, r0, r8
 80093d4:	fa09 f303 	lsl.w	r3, r9, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	46a2      	mov	sl, r4
 80093de:	e7d2      	b.n	8009386 <_vfiprintf_r+0xe2>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	1d19      	adds	r1, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbb      	ittet	lt
 80093ec:	425b      	neglt	r3, r3
 80093ee:	f042 0202 	orrlt.w	r2, r2, #2
 80093f2:	9307      	strge	r3, [sp, #28]
 80093f4:	9307      	strlt	r3, [sp, #28]
 80093f6:	bfb8      	it	lt
 80093f8:	9204      	strlt	r2, [sp, #16]
 80093fa:	7823      	ldrb	r3, [r4, #0]
 80093fc:	2b2e      	cmp	r3, #46	; 0x2e
 80093fe:	d10c      	bne.n	800941a <_vfiprintf_r+0x176>
 8009400:	7863      	ldrb	r3, [r4, #1]
 8009402:	2b2a      	cmp	r3, #42	; 0x2a
 8009404:	d135      	bne.n	8009472 <_vfiprintf_r+0x1ce>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9203      	str	r2, [sp, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb8      	it	lt
 8009412:	f04f 33ff 	movlt.w	r3, #4294967295
 8009416:	3402      	adds	r4, #2
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009500 <_vfiprintf_r+0x25c>
 800941e:	7821      	ldrb	r1, [r4, #0]
 8009420:	2203      	movs	r2, #3
 8009422:	4650      	mov	r0, sl
 8009424:	f7f6 fedc 	bl	80001e0 <memchr>
 8009428:	b140      	cbz	r0, 800943c <_vfiprintf_r+0x198>
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	eba0 000a 	sub.w	r0, r0, sl
 8009430:	fa03 f000 	lsl.w	r0, r3, r0
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	4303      	orrs	r3, r0
 8009438:	3401      	adds	r4, #1
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009440:	482c      	ldr	r0, [pc, #176]	; (80094f4 <_vfiprintf_r+0x250>)
 8009442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009446:	2206      	movs	r2, #6
 8009448:	f7f6 feca 	bl	80001e0 <memchr>
 800944c:	2800      	cmp	r0, #0
 800944e:	d03f      	beq.n	80094d0 <_vfiprintf_r+0x22c>
 8009450:	4b29      	ldr	r3, [pc, #164]	; (80094f8 <_vfiprintf_r+0x254>)
 8009452:	bb1b      	cbnz	r3, 800949c <_vfiprintf_r+0x1f8>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	3307      	adds	r3, #7
 8009458:	f023 0307 	bic.w	r3, r3, #7
 800945c:	3308      	adds	r3, #8
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009462:	443b      	add	r3, r7
 8009464:	9309      	str	r3, [sp, #36]	; 0x24
 8009466:	e767      	b.n	8009338 <_vfiprintf_r+0x94>
 8009468:	fb0c 3202 	mla	r2, ip, r2, r3
 800946c:	460c      	mov	r4, r1
 800946e:	2001      	movs	r0, #1
 8009470:	e7a5      	b.n	80093be <_vfiprintf_r+0x11a>
 8009472:	2300      	movs	r3, #0
 8009474:	3401      	adds	r4, #1
 8009476:	9305      	str	r3, [sp, #20]
 8009478:	4619      	mov	r1, r3
 800947a:	f04f 0c0a 	mov.w	ip, #10
 800947e:	4620      	mov	r0, r4
 8009480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009484:	3a30      	subs	r2, #48	; 0x30
 8009486:	2a09      	cmp	r2, #9
 8009488:	d903      	bls.n	8009492 <_vfiprintf_r+0x1ee>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0c5      	beq.n	800941a <_vfiprintf_r+0x176>
 800948e:	9105      	str	r1, [sp, #20]
 8009490:	e7c3      	b.n	800941a <_vfiprintf_r+0x176>
 8009492:	fb0c 2101 	mla	r1, ip, r1, r2
 8009496:	4604      	mov	r4, r0
 8009498:	2301      	movs	r3, #1
 800949a:	e7f0      	b.n	800947e <_vfiprintf_r+0x1da>
 800949c:	ab03      	add	r3, sp, #12
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	462a      	mov	r2, r5
 80094a2:	4b16      	ldr	r3, [pc, #88]	; (80094fc <_vfiprintf_r+0x258>)
 80094a4:	a904      	add	r1, sp, #16
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7fd fdd8 	bl	800705c <_printf_float>
 80094ac:	4607      	mov	r7, r0
 80094ae:	1c78      	adds	r0, r7, #1
 80094b0:	d1d6      	bne.n	8009460 <_vfiprintf_r+0x1bc>
 80094b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b4:	07d9      	lsls	r1, r3, #31
 80094b6:	d405      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	059a      	lsls	r2, r3, #22
 80094bc:	d402      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c0:	f000 faaf 	bl	8009a22 <__retarget_lock_release_recursive>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	065b      	lsls	r3, r3, #25
 80094c8:	f53f af12 	bmi.w	80092f0 <_vfiprintf_r+0x4c>
 80094cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ce:	e711      	b.n	80092f4 <_vfiprintf_r+0x50>
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <_vfiprintf_r+0x258>)
 80094d8:	a904      	add	r1, sp, #16
 80094da:	4630      	mov	r0, r6
 80094dc:	f7fe f862 	bl	80075a4 <_printf_i>
 80094e0:	e7e4      	b.n	80094ac <_vfiprintf_r+0x208>
 80094e2:	bf00      	nop
 80094e4:	0800a0d4 	.word	0x0800a0d4
 80094e8:	0800a0f4 	.word	0x0800a0f4
 80094ec:	0800a0b4 	.word	0x0800a0b4
 80094f0:	08009f5c 	.word	0x08009f5c
 80094f4:	08009f66 	.word	0x08009f66
 80094f8:	0800705d 	.word	0x0800705d
 80094fc:	08009281 	.word	0x08009281
 8009500:	08009f62 	.word	0x08009f62

08009504 <__swbuf_r>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	460e      	mov	r6, r1
 8009508:	4614      	mov	r4, r2
 800950a:	4605      	mov	r5, r0
 800950c:	b118      	cbz	r0, 8009516 <__swbuf_r+0x12>
 800950e:	6983      	ldr	r3, [r0, #24]
 8009510:	b90b      	cbnz	r3, 8009516 <__swbuf_r+0x12>
 8009512:	f000 f9e7 	bl	80098e4 <__sinit>
 8009516:	4b21      	ldr	r3, [pc, #132]	; (800959c <__swbuf_r+0x98>)
 8009518:	429c      	cmp	r4, r3
 800951a:	d12b      	bne.n	8009574 <__swbuf_r+0x70>
 800951c:	686c      	ldr	r4, [r5, #4]
 800951e:	69a3      	ldr	r3, [r4, #24]
 8009520:	60a3      	str	r3, [r4, #8]
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	071a      	lsls	r2, r3, #28
 8009526:	d52f      	bpl.n	8009588 <__swbuf_r+0x84>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	b36b      	cbz	r3, 8009588 <__swbuf_r+0x84>
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	1ac0      	subs	r0, r0, r3
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	b2f6      	uxtb	r6, r6
 8009536:	4283      	cmp	r3, r0
 8009538:	4637      	mov	r7, r6
 800953a:	dc04      	bgt.n	8009546 <__swbuf_r+0x42>
 800953c:	4621      	mov	r1, r4
 800953e:	4628      	mov	r0, r5
 8009540:	f000 f93c 	bl	80097bc <_fflush_r>
 8009544:	bb30      	cbnz	r0, 8009594 <__swbuf_r+0x90>
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	3b01      	subs	r3, #1
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	701e      	strb	r6, [r3, #0]
 8009554:	6963      	ldr	r3, [r4, #20]
 8009556:	3001      	adds	r0, #1
 8009558:	4283      	cmp	r3, r0
 800955a:	d004      	beq.n	8009566 <__swbuf_r+0x62>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d506      	bpl.n	8009570 <__swbuf_r+0x6c>
 8009562:	2e0a      	cmp	r6, #10
 8009564:	d104      	bne.n	8009570 <__swbuf_r+0x6c>
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 f927 	bl	80097bc <_fflush_r>
 800956e:	b988      	cbnz	r0, 8009594 <__swbuf_r+0x90>
 8009570:	4638      	mov	r0, r7
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <__swbuf_r+0x9c>)
 8009576:	429c      	cmp	r4, r3
 8009578:	d101      	bne.n	800957e <__swbuf_r+0x7a>
 800957a:	68ac      	ldr	r4, [r5, #8]
 800957c:	e7cf      	b.n	800951e <__swbuf_r+0x1a>
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <__swbuf_r+0xa0>)
 8009580:	429c      	cmp	r4, r3
 8009582:	bf08      	it	eq
 8009584:	68ec      	ldreq	r4, [r5, #12]
 8009586:	e7ca      	b.n	800951e <__swbuf_r+0x1a>
 8009588:	4621      	mov	r1, r4
 800958a:	4628      	mov	r0, r5
 800958c:	f000 f81a 	bl	80095c4 <__swsetup_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	d0cb      	beq.n	800952c <__swbuf_r+0x28>
 8009594:	f04f 37ff 	mov.w	r7, #4294967295
 8009598:	e7ea      	b.n	8009570 <__swbuf_r+0x6c>
 800959a:	bf00      	nop
 800959c:	0800a0d4 	.word	0x0800a0d4
 80095a0:	0800a0f4 	.word	0x0800a0f4
 80095a4:	0800a0b4 	.word	0x0800a0b4

080095a8 <__ascii_wctomb>:
 80095a8:	b149      	cbz	r1, 80095be <__ascii_wctomb+0x16>
 80095aa:	2aff      	cmp	r2, #255	; 0xff
 80095ac:	bf85      	ittet	hi
 80095ae:	238a      	movhi	r3, #138	; 0x8a
 80095b0:	6003      	strhi	r3, [r0, #0]
 80095b2:	700a      	strbls	r2, [r1, #0]
 80095b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80095b8:	bf98      	it	ls
 80095ba:	2001      	movls	r0, #1
 80095bc:	4770      	bx	lr
 80095be:	4608      	mov	r0, r1
 80095c0:	4770      	bx	lr
	...

080095c4 <__swsetup_r>:
 80095c4:	4b32      	ldr	r3, [pc, #200]	; (8009690 <__swsetup_r+0xcc>)
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	681d      	ldr	r5, [r3, #0]
 80095ca:	4606      	mov	r6, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	b125      	cbz	r5, 80095da <__swsetup_r+0x16>
 80095d0:	69ab      	ldr	r3, [r5, #24]
 80095d2:	b913      	cbnz	r3, 80095da <__swsetup_r+0x16>
 80095d4:	4628      	mov	r0, r5
 80095d6:	f000 f985 	bl	80098e4 <__sinit>
 80095da:	4b2e      	ldr	r3, [pc, #184]	; (8009694 <__swsetup_r+0xd0>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	d10f      	bne.n	8009600 <__swsetup_r+0x3c>
 80095e0:	686c      	ldr	r4, [r5, #4]
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e8:	0719      	lsls	r1, r3, #28
 80095ea:	d42c      	bmi.n	8009646 <__swsetup_r+0x82>
 80095ec:	06dd      	lsls	r5, r3, #27
 80095ee:	d411      	bmi.n	8009614 <__swsetup_r+0x50>
 80095f0:	2309      	movs	r3, #9
 80095f2:	6033      	str	r3, [r6, #0]
 80095f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	e03e      	b.n	800967e <__swsetup_r+0xba>
 8009600:	4b25      	ldr	r3, [pc, #148]	; (8009698 <__swsetup_r+0xd4>)
 8009602:	429c      	cmp	r4, r3
 8009604:	d101      	bne.n	800960a <__swsetup_r+0x46>
 8009606:	68ac      	ldr	r4, [r5, #8]
 8009608:	e7eb      	b.n	80095e2 <__swsetup_r+0x1e>
 800960a:	4b24      	ldr	r3, [pc, #144]	; (800969c <__swsetup_r+0xd8>)
 800960c:	429c      	cmp	r4, r3
 800960e:	bf08      	it	eq
 8009610:	68ec      	ldreq	r4, [r5, #12]
 8009612:	e7e6      	b.n	80095e2 <__swsetup_r+0x1e>
 8009614:	0758      	lsls	r0, r3, #29
 8009616:	d512      	bpl.n	800963e <__swsetup_r+0x7a>
 8009618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961a:	b141      	cbz	r1, 800962e <__swsetup_r+0x6a>
 800961c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <__swsetup_r+0x66>
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff fb31 	bl	8008c8c <_free_r>
 800962a:	2300      	movs	r3, #0
 800962c:	6363      	str	r3, [r4, #52]	; 0x34
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	2300      	movs	r3, #0
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f043 0308 	orr.w	r3, r3, #8
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	b94b      	cbnz	r3, 800965e <__swsetup_r+0x9a>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009654:	d003      	beq.n	800965e <__swsetup_r+0x9a>
 8009656:	4621      	mov	r1, r4
 8009658:	4630      	mov	r0, r6
 800965a:	f000 fa09 	bl	8009a70 <__smakebuf_r>
 800965e:	89a0      	ldrh	r0, [r4, #12]
 8009660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009664:	f010 0301 	ands.w	r3, r0, #1
 8009668:	d00a      	beq.n	8009680 <__swsetup_r+0xbc>
 800966a:	2300      	movs	r3, #0
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	6963      	ldr	r3, [r4, #20]
 8009670:	425b      	negs	r3, r3
 8009672:	61a3      	str	r3, [r4, #24]
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	b943      	cbnz	r3, 800968a <__swsetup_r+0xc6>
 8009678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800967c:	d1ba      	bne.n	80095f4 <__swsetup_r+0x30>
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	0781      	lsls	r1, r0, #30
 8009682:	bf58      	it	pl
 8009684:	6963      	ldrpl	r3, [r4, #20]
 8009686:	60a3      	str	r3, [r4, #8]
 8009688:	e7f4      	b.n	8009674 <__swsetup_r+0xb0>
 800968a:	2000      	movs	r0, #0
 800968c:	e7f7      	b.n	800967e <__swsetup_r+0xba>
 800968e:	bf00      	nop
 8009690:	2000000c 	.word	0x2000000c
 8009694:	0800a0d4 	.word	0x0800a0d4
 8009698:	0800a0f4 	.word	0x0800a0f4
 800969c:	0800a0b4 	.word	0x0800a0b4

080096a0 <abort>:
 80096a0:	b508      	push	{r3, lr}
 80096a2:	2006      	movs	r0, #6
 80096a4:	f000 fa54 	bl	8009b50 <raise>
 80096a8:	2001      	movs	r0, #1
 80096aa:	f7f8 f881 	bl	80017b0 <_exit>
	...

080096b0 <__sflush_r>:
 80096b0:	898a      	ldrh	r2, [r1, #12]
 80096b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	4605      	mov	r5, r0
 80096b8:	0710      	lsls	r0, r2, #28
 80096ba:	460c      	mov	r4, r1
 80096bc:	d458      	bmi.n	8009770 <__sflush_r+0xc0>
 80096be:	684b      	ldr	r3, [r1, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc05      	bgt.n	80096d0 <__sflush_r+0x20>
 80096c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	dc02      	bgt.n	80096d0 <__sflush_r+0x20>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	d0f9      	beq.n	80096ca <__sflush_r+0x1a>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096dc:	682f      	ldr	r7, [r5, #0]
 80096de:	602b      	str	r3, [r5, #0]
 80096e0:	d032      	beq.n	8009748 <__sflush_r+0x98>
 80096e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	075a      	lsls	r2, r3, #29
 80096e8:	d505      	bpl.n	80096f6 <__sflush_r+0x46>
 80096ea:	6863      	ldr	r3, [r4, #4]
 80096ec:	1ac0      	subs	r0, r0, r3
 80096ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096f0:	b10b      	cbz	r3, 80096f6 <__sflush_r+0x46>
 80096f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096f4:	1ac0      	subs	r0, r0, r3
 80096f6:	2300      	movs	r3, #0
 80096f8:	4602      	mov	r2, r0
 80096fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fc:	6a21      	ldr	r1, [r4, #32]
 80096fe:	4628      	mov	r0, r5
 8009700:	47b0      	blx	r6
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	d106      	bne.n	8009716 <__sflush_r+0x66>
 8009708:	6829      	ldr	r1, [r5, #0]
 800970a:	291d      	cmp	r1, #29
 800970c:	d82c      	bhi.n	8009768 <__sflush_r+0xb8>
 800970e:	4a2a      	ldr	r2, [pc, #168]	; (80097b8 <__sflush_r+0x108>)
 8009710:	40ca      	lsrs	r2, r1
 8009712:	07d6      	lsls	r6, r2, #31
 8009714:	d528      	bpl.n	8009768 <__sflush_r+0xb8>
 8009716:	2200      	movs	r2, #0
 8009718:	6062      	str	r2, [r4, #4]
 800971a:	04d9      	lsls	r1, r3, #19
 800971c:	6922      	ldr	r2, [r4, #16]
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	d504      	bpl.n	800972c <__sflush_r+0x7c>
 8009722:	1c42      	adds	r2, r0, #1
 8009724:	d101      	bne.n	800972a <__sflush_r+0x7a>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	b903      	cbnz	r3, 800972c <__sflush_r+0x7c>
 800972a:	6560      	str	r0, [r4, #84]	; 0x54
 800972c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800972e:	602f      	str	r7, [r5, #0]
 8009730:	2900      	cmp	r1, #0
 8009732:	d0ca      	beq.n	80096ca <__sflush_r+0x1a>
 8009734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009738:	4299      	cmp	r1, r3
 800973a:	d002      	beq.n	8009742 <__sflush_r+0x92>
 800973c:	4628      	mov	r0, r5
 800973e:	f7ff faa5 	bl	8008c8c <_free_r>
 8009742:	2000      	movs	r0, #0
 8009744:	6360      	str	r0, [r4, #52]	; 0x34
 8009746:	e7c1      	b.n	80096cc <__sflush_r+0x1c>
 8009748:	6a21      	ldr	r1, [r4, #32]
 800974a:	2301      	movs	r3, #1
 800974c:	4628      	mov	r0, r5
 800974e:	47b0      	blx	r6
 8009750:	1c41      	adds	r1, r0, #1
 8009752:	d1c7      	bne.n	80096e4 <__sflush_r+0x34>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0c4      	beq.n	80096e4 <__sflush_r+0x34>
 800975a:	2b1d      	cmp	r3, #29
 800975c:	d001      	beq.n	8009762 <__sflush_r+0xb2>
 800975e:	2b16      	cmp	r3, #22
 8009760:	d101      	bne.n	8009766 <__sflush_r+0xb6>
 8009762:	602f      	str	r7, [r5, #0]
 8009764:	e7b1      	b.n	80096ca <__sflush_r+0x1a>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	e7ad      	b.n	80096cc <__sflush_r+0x1c>
 8009770:	690f      	ldr	r7, [r1, #16]
 8009772:	2f00      	cmp	r7, #0
 8009774:	d0a9      	beq.n	80096ca <__sflush_r+0x1a>
 8009776:	0793      	lsls	r3, r2, #30
 8009778:	680e      	ldr	r6, [r1, #0]
 800977a:	bf08      	it	eq
 800977c:	694b      	ldreq	r3, [r1, #20]
 800977e:	600f      	str	r7, [r1, #0]
 8009780:	bf18      	it	ne
 8009782:	2300      	movne	r3, #0
 8009784:	eba6 0807 	sub.w	r8, r6, r7
 8009788:	608b      	str	r3, [r1, #8]
 800978a:	f1b8 0f00 	cmp.w	r8, #0
 800978e:	dd9c      	ble.n	80096ca <__sflush_r+0x1a>
 8009790:	6a21      	ldr	r1, [r4, #32]
 8009792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009794:	4643      	mov	r3, r8
 8009796:	463a      	mov	r2, r7
 8009798:	4628      	mov	r0, r5
 800979a:	47b0      	blx	r6
 800979c:	2800      	cmp	r0, #0
 800979e:	dc06      	bgt.n	80097ae <__sflush_r+0xfe>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	e78e      	b.n	80096cc <__sflush_r+0x1c>
 80097ae:	4407      	add	r7, r0
 80097b0:	eba8 0800 	sub.w	r8, r8, r0
 80097b4:	e7e9      	b.n	800978a <__sflush_r+0xda>
 80097b6:	bf00      	nop
 80097b8:	20400001 	.word	0x20400001

080097bc <_fflush_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	690b      	ldr	r3, [r1, #16]
 80097c0:	4605      	mov	r5, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	b913      	cbnz	r3, 80097cc <_fflush_r+0x10>
 80097c6:	2500      	movs	r5, #0
 80097c8:	4628      	mov	r0, r5
 80097ca:	bd38      	pop	{r3, r4, r5, pc}
 80097cc:	b118      	cbz	r0, 80097d6 <_fflush_r+0x1a>
 80097ce:	6983      	ldr	r3, [r0, #24]
 80097d0:	b90b      	cbnz	r3, 80097d6 <_fflush_r+0x1a>
 80097d2:	f000 f887 	bl	80098e4 <__sinit>
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <_fflush_r+0x6c>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	d11b      	bne.n	8009814 <_fflush_r+0x58>
 80097dc:	686c      	ldr	r4, [r5, #4]
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0ef      	beq.n	80097c6 <_fflush_r+0xa>
 80097e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097e8:	07d0      	lsls	r0, r2, #31
 80097ea:	d404      	bmi.n	80097f6 <_fflush_r+0x3a>
 80097ec:	0599      	lsls	r1, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_fflush_r+0x3a>
 80097f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f2:	f000 f915 	bl	8009a20 <__retarget_lock_acquire_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	4621      	mov	r1, r4
 80097fa:	f7ff ff59 	bl	80096b0 <__sflush_r>
 80097fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009800:	07da      	lsls	r2, r3, #31
 8009802:	4605      	mov	r5, r0
 8009804:	d4e0      	bmi.n	80097c8 <_fflush_r+0xc>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	059b      	lsls	r3, r3, #22
 800980a:	d4dd      	bmi.n	80097c8 <_fflush_r+0xc>
 800980c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800980e:	f000 f908 	bl	8009a22 <__retarget_lock_release_recursive>
 8009812:	e7d9      	b.n	80097c8 <_fflush_r+0xc>
 8009814:	4b05      	ldr	r3, [pc, #20]	; (800982c <_fflush_r+0x70>)
 8009816:	429c      	cmp	r4, r3
 8009818:	d101      	bne.n	800981e <_fflush_r+0x62>
 800981a:	68ac      	ldr	r4, [r5, #8]
 800981c:	e7df      	b.n	80097de <_fflush_r+0x22>
 800981e:	4b04      	ldr	r3, [pc, #16]	; (8009830 <_fflush_r+0x74>)
 8009820:	429c      	cmp	r4, r3
 8009822:	bf08      	it	eq
 8009824:	68ec      	ldreq	r4, [r5, #12]
 8009826:	e7da      	b.n	80097de <_fflush_r+0x22>
 8009828:	0800a0d4 	.word	0x0800a0d4
 800982c:	0800a0f4 	.word	0x0800a0f4
 8009830:	0800a0b4 	.word	0x0800a0b4

08009834 <std>:
 8009834:	2300      	movs	r3, #0
 8009836:	b510      	push	{r4, lr}
 8009838:	4604      	mov	r4, r0
 800983a:	e9c0 3300 	strd	r3, r3, [r0]
 800983e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009842:	6083      	str	r3, [r0, #8]
 8009844:	8181      	strh	r1, [r0, #12]
 8009846:	6643      	str	r3, [r0, #100]	; 0x64
 8009848:	81c2      	strh	r2, [r0, #14]
 800984a:	6183      	str	r3, [r0, #24]
 800984c:	4619      	mov	r1, r3
 800984e:	2208      	movs	r2, #8
 8009850:	305c      	adds	r0, #92	; 0x5c
 8009852:	f7fd fb5b 	bl	8006f0c <memset>
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <std+0x38>)
 8009858:	6263      	str	r3, [r4, #36]	; 0x24
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <std+0x3c>)
 800985c:	62a3      	str	r3, [r4, #40]	; 0x28
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <std+0x40>)
 8009860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009862:	4b05      	ldr	r3, [pc, #20]	; (8009878 <std+0x44>)
 8009864:	6224      	str	r4, [r4, #32]
 8009866:	6323      	str	r3, [r4, #48]	; 0x30
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	08009b89 	.word	0x08009b89
 8009870:	08009bab 	.word	0x08009bab
 8009874:	08009be3 	.word	0x08009be3
 8009878:	08009c07 	.word	0x08009c07

0800987c <_cleanup_r>:
 800987c:	4901      	ldr	r1, [pc, #4]	; (8009884 <_cleanup_r+0x8>)
 800987e:	f000 b8af 	b.w	80099e0 <_fwalk_reent>
 8009882:	bf00      	nop
 8009884:	080097bd 	.word	0x080097bd

08009888 <__sfmoreglue>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	2268      	movs	r2, #104	; 0x68
 800988c:	1e4d      	subs	r5, r1, #1
 800988e:	4355      	muls	r5, r2
 8009890:	460e      	mov	r6, r1
 8009892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009896:	f7ff fa65 	bl	8008d64 <_malloc_r>
 800989a:	4604      	mov	r4, r0
 800989c:	b140      	cbz	r0, 80098b0 <__sfmoreglue+0x28>
 800989e:	2100      	movs	r1, #0
 80098a0:	e9c0 1600 	strd	r1, r6, [r0]
 80098a4:	300c      	adds	r0, #12
 80098a6:	60a0      	str	r0, [r4, #8]
 80098a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098ac:	f7fd fb2e 	bl	8006f0c <memset>
 80098b0:	4620      	mov	r0, r4
 80098b2:	bd70      	pop	{r4, r5, r6, pc}

080098b4 <__sfp_lock_acquire>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sfp_lock_acquire+0x8>)
 80098b6:	f000 b8b3 	b.w	8009a20 <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000611 	.word	0x20000611

080098c0 <__sfp_lock_release>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__sfp_lock_release+0x8>)
 80098c2:	f000 b8ae 	b.w	8009a22 <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	20000611 	.word	0x20000611

080098cc <__sinit_lock_acquire>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__sinit_lock_acquire+0x8>)
 80098ce:	f000 b8a7 	b.w	8009a20 <__retarget_lock_acquire_recursive>
 80098d2:	bf00      	nop
 80098d4:	20000612 	.word	0x20000612

080098d8 <__sinit_lock_release>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__sinit_lock_release+0x8>)
 80098da:	f000 b8a2 	b.w	8009a22 <__retarget_lock_release_recursive>
 80098de:	bf00      	nop
 80098e0:	20000612 	.word	0x20000612

080098e4 <__sinit>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	f7ff fff0 	bl	80098cc <__sinit_lock_acquire>
 80098ec:	69a3      	ldr	r3, [r4, #24]
 80098ee:	b11b      	cbz	r3, 80098f8 <__sinit+0x14>
 80098f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f4:	f7ff bff0 	b.w	80098d8 <__sinit_lock_release>
 80098f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098fc:	6523      	str	r3, [r4, #80]	; 0x50
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <__sinit+0x68>)
 8009900:	4a13      	ldr	r2, [pc, #76]	; (8009950 <__sinit+0x6c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	62a2      	str	r2, [r4, #40]	; 0x28
 8009906:	42a3      	cmp	r3, r4
 8009908:	bf04      	itt	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	61a3      	streq	r3, [r4, #24]
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f820 	bl	8009954 <__sfp>
 8009914:	6060      	str	r0, [r4, #4]
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f81c 	bl	8009954 <__sfp>
 800991c:	60a0      	str	r0, [r4, #8]
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f818 	bl	8009954 <__sfp>
 8009924:	2200      	movs	r2, #0
 8009926:	60e0      	str	r0, [r4, #12]
 8009928:	2104      	movs	r1, #4
 800992a:	6860      	ldr	r0, [r4, #4]
 800992c:	f7ff ff82 	bl	8009834 <std>
 8009930:	68a0      	ldr	r0, [r4, #8]
 8009932:	2201      	movs	r2, #1
 8009934:	2109      	movs	r1, #9
 8009936:	f7ff ff7d 	bl	8009834 <std>
 800993a:	68e0      	ldr	r0, [r4, #12]
 800993c:	2202      	movs	r2, #2
 800993e:	2112      	movs	r1, #18
 8009940:	f7ff ff78 	bl	8009834 <std>
 8009944:	2301      	movs	r3, #1
 8009946:	61a3      	str	r3, [r4, #24]
 8009948:	e7d2      	b.n	80098f0 <__sinit+0xc>
 800994a:	bf00      	nop
 800994c:	08009d38 	.word	0x08009d38
 8009950:	0800987d 	.word	0x0800987d

08009954 <__sfp>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	4607      	mov	r7, r0
 8009958:	f7ff ffac 	bl	80098b4 <__sfp_lock_acquire>
 800995c:	4b1e      	ldr	r3, [pc, #120]	; (80099d8 <__sfp+0x84>)
 800995e:	681e      	ldr	r6, [r3, #0]
 8009960:	69b3      	ldr	r3, [r6, #24]
 8009962:	b913      	cbnz	r3, 800996a <__sfp+0x16>
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff ffbd 	bl	80098e4 <__sinit>
 800996a:	3648      	adds	r6, #72	; 0x48
 800996c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009970:	3b01      	subs	r3, #1
 8009972:	d503      	bpl.n	800997c <__sfp+0x28>
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	b30b      	cbz	r3, 80099bc <__sfp+0x68>
 8009978:	6836      	ldr	r6, [r6, #0]
 800997a:	e7f7      	b.n	800996c <__sfp+0x18>
 800997c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009980:	b9d5      	cbnz	r5, 80099b8 <__sfp+0x64>
 8009982:	4b16      	ldr	r3, [pc, #88]	; (80099dc <__sfp+0x88>)
 8009984:	60e3      	str	r3, [r4, #12]
 8009986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800998a:	6665      	str	r5, [r4, #100]	; 0x64
 800998c:	f000 f847 	bl	8009a1e <__retarget_lock_init_recursive>
 8009990:	f7ff ff96 	bl	80098c0 <__sfp_lock_release>
 8009994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800999c:	6025      	str	r5, [r4, #0]
 800999e:	61a5      	str	r5, [r4, #24]
 80099a0:	2208      	movs	r2, #8
 80099a2:	4629      	mov	r1, r5
 80099a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099a8:	f7fd fab0 	bl	8006f0c <memset>
 80099ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099b4:	4620      	mov	r0, r4
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b8:	3468      	adds	r4, #104	; 0x68
 80099ba:	e7d9      	b.n	8009970 <__sfp+0x1c>
 80099bc:	2104      	movs	r1, #4
 80099be:	4638      	mov	r0, r7
 80099c0:	f7ff ff62 	bl	8009888 <__sfmoreglue>
 80099c4:	4604      	mov	r4, r0
 80099c6:	6030      	str	r0, [r6, #0]
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d1d5      	bne.n	8009978 <__sfp+0x24>
 80099cc:	f7ff ff78 	bl	80098c0 <__sfp_lock_release>
 80099d0:	230c      	movs	r3, #12
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	e7ee      	b.n	80099b4 <__sfp+0x60>
 80099d6:	bf00      	nop
 80099d8:	08009d38 	.word	0x08009d38
 80099dc:	ffff0001 	.word	0xffff0001

080099e0 <_fwalk_reent>:
 80099e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	4606      	mov	r6, r0
 80099e6:	4688      	mov	r8, r1
 80099e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099ec:	2700      	movs	r7, #0
 80099ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099f2:	f1b9 0901 	subs.w	r9, r9, #1
 80099f6:	d505      	bpl.n	8009a04 <_fwalk_reent+0x24>
 80099f8:	6824      	ldr	r4, [r4, #0]
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d1f7      	bne.n	80099ee <_fwalk_reent+0xe>
 80099fe:	4638      	mov	r0, r7
 8009a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a04:	89ab      	ldrh	r3, [r5, #12]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d907      	bls.n	8009a1a <_fwalk_reent+0x3a>
 8009a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	d003      	beq.n	8009a1a <_fwalk_reent+0x3a>
 8009a12:	4629      	mov	r1, r5
 8009a14:	4630      	mov	r0, r6
 8009a16:	47c0      	blx	r8
 8009a18:	4307      	orrs	r7, r0
 8009a1a:	3568      	adds	r5, #104	; 0x68
 8009a1c:	e7e9      	b.n	80099f2 <_fwalk_reent+0x12>

08009a1e <__retarget_lock_init_recursive>:
 8009a1e:	4770      	bx	lr

08009a20 <__retarget_lock_acquire_recursive>:
 8009a20:	4770      	bx	lr

08009a22 <__retarget_lock_release_recursive>:
 8009a22:	4770      	bx	lr

08009a24 <__swhatbuf_r>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	b096      	sub	sp, #88	; 0x58
 8009a30:	4614      	mov	r4, r2
 8009a32:	461d      	mov	r5, r3
 8009a34:	da08      	bge.n	8009a48 <__swhatbuf_r+0x24>
 8009a36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	602a      	str	r2, [r5, #0]
 8009a3e:	061a      	lsls	r2, r3, #24
 8009a40:	d410      	bmi.n	8009a64 <__swhatbuf_r+0x40>
 8009a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a46:	e00e      	b.n	8009a66 <__swhatbuf_r+0x42>
 8009a48:	466a      	mov	r2, sp
 8009a4a:	f000 f903 	bl	8009c54 <_fstat_r>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	dbf1      	blt.n	8009a36 <__swhatbuf_r+0x12>
 8009a52:	9a01      	ldr	r2, [sp, #4]
 8009a54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a5c:	425a      	negs	r2, r3
 8009a5e:	415a      	adcs	r2, r3
 8009a60:	602a      	str	r2, [r5, #0]
 8009a62:	e7ee      	b.n	8009a42 <__swhatbuf_r+0x1e>
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	2000      	movs	r0, #0
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	b016      	add	sp, #88	; 0x58
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a70 <__smakebuf_r>:
 8009a70:	898b      	ldrh	r3, [r1, #12]
 8009a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a74:	079d      	lsls	r5, r3, #30
 8009a76:	4606      	mov	r6, r0
 8009a78:	460c      	mov	r4, r1
 8009a7a:	d507      	bpl.n	8009a8c <__smakebuf_r+0x1c>
 8009a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	6123      	str	r3, [r4, #16]
 8009a84:	2301      	movs	r3, #1
 8009a86:	6163      	str	r3, [r4, #20]
 8009a88:	b002      	add	sp, #8
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	ab01      	add	r3, sp, #4
 8009a8e:	466a      	mov	r2, sp
 8009a90:	f7ff ffc8 	bl	8009a24 <__swhatbuf_r>
 8009a94:	9900      	ldr	r1, [sp, #0]
 8009a96:	4605      	mov	r5, r0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff f963 	bl	8008d64 <_malloc_r>
 8009a9e:	b948      	cbnz	r0, 8009ab4 <__smakebuf_r+0x44>
 8009aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa4:	059a      	lsls	r2, r3, #22
 8009aa6:	d4ef      	bmi.n	8009a88 <__smakebuf_r+0x18>
 8009aa8:	f023 0303 	bic.w	r3, r3, #3
 8009aac:	f043 0302 	orr.w	r3, r3, #2
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	e7e3      	b.n	8009a7c <__smakebuf_r+0xc>
 8009ab4:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <__smakebuf_r+0x7c>)
 8009ab6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	6020      	str	r0, [r4, #0]
 8009abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	6163      	str	r3, [r4, #20]
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	6120      	str	r0, [r4, #16]
 8009aca:	b15b      	cbz	r3, 8009ae4 <__smakebuf_r+0x74>
 8009acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 f8d1 	bl	8009c78 <_isatty_r>
 8009ad6:	b128      	cbz	r0, 8009ae4 <__smakebuf_r+0x74>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f023 0303 	bic.w	r3, r3, #3
 8009ade:	f043 0301 	orr.w	r3, r3, #1
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	89a0      	ldrh	r0, [r4, #12]
 8009ae6:	4305      	orrs	r5, r0
 8009ae8:	81a5      	strh	r5, [r4, #12]
 8009aea:	e7cd      	b.n	8009a88 <__smakebuf_r+0x18>
 8009aec:	0800987d 	.word	0x0800987d

08009af0 <_malloc_usable_size_r>:
 8009af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af4:	1f18      	subs	r0, r3, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfbc      	itt	lt
 8009afa:	580b      	ldrlt	r3, [r1, r0]
 8009afc:	18c0      	addlt	r0, r0, r3
 8009afe:	4770      	bx	lr

08009b00 <_raise_r>:
 8009b00:	291f      	cmp	r1, #31
 8009b02:	b538      	push	{r3, r4, r5, lr}
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	d904      	bls.n	8009b14 <_raise_r+0x14>
 8009b0a:	2316      	movs	r3, #22
 8009b0c:	6003      	str	r3, [r0, #0]
 8009b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b16:	b112      	cbz	r2, 8009b1e <_raise_r+0x1e>
 8009b18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b1c:	b94b      	cbnz	r3, 8009b32 <_raise_r+0x32>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 f830 	bl	8009b84 <_getpid_r>
 8009b24:	462a      	mov	r2, r5
 8009b26:	4601      	mov	r1, r0
 8009b28:	4620      	mov	r0, r4
 8009b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b2e:	f000 b817 	b.w	8009b60 <_kill_r>
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d00a      	beq.n	8009b4c <_raise_r+0x4c>
 8009b36:	1c59      	adds	r1, r3, #1
 8009b38:	d103      	bne.n	8009b42 <_raise_r+0x42>
 8009b3a:	2316      	movs	r3, #22
 8009b3c:	6003      	str	r3, [r0, #0]
 8009b3e:	2001      	movs	r0, #1
 8009b40:	e7e7      	b.n	8009b12 <_raise_r+0x12>
 8009b42:	2400      	movs	r4, #0
 8009b44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b48:	4628      	mov	r0, r5
 8009b4a:	4798      	blx	r3
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	e7e0      	b.n	8009b12 <_raise_r+0x12>

08009b50 <raise>:
 8009b50:	4b02      	ldr	r3, [pc, #8]	; (8009b5c <raise+0xc>)
 8009b52:	4601      	mov	r1, r0
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	f7ff bfd3 	b.w	8009b00 <_raise_r>
 8009b5a:	bf00      	nop
 8009b5c:	2000000c 	.word	0x2000000c

08009b60 <_kill_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	; (8009b80 <_kill_r+0x20>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	f7f7 fe0f 	bl	8001790 <_kill>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d102      	bne.n	8009b7c <_kill_r+0x1c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	b103      	cbz	r3, 8009b7c <_kill_r+0x1c>
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	2000060c 	.word	0x2000060c

08009b84 <_getpid_r>:
 8009b84:	f7f7 bdfc 	b.w	8001780 <_getpid>

08009b88 <__sread>:
 8009b88:	b510      	push	{r4, lr}
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	f000 f894 	bl	8009cbc <_read_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	bfab      	itete	ge
 8009b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b9c:	181b      	addge	r3, r3, r0
 8009b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ba2:	bfac      	ite	ge
 8009ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ba6:	81a3      	strhlt	r3, [r4, #12]
 8009ba8:	bd10      	pop	{r4, pc}

08009baa <__swrite>:
 8009baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	461f      	mov	r7, r3
 8009bb0:	898b      	ldrh	r3, [r1, #12]
 8009bb2:	05db      	lsls	r3, r3, #23
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	4616      	mov	r6, r2
 8009bba:	d505      	bpl.n	8009bc8 <__swrite+0x1e>
 8009bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f000 f868 	bl	8009c98 <_lseek_r>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	4628      	mov	r0, r5
 8009bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bde:	f000 b817 	b.w	8009c10 <_write_r>

08009be2 <__sseek>:
 8009be2:	b510      	push	{r4, lr}
 8009be4:	460c      	mov	r4, r1
 8009be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bea:	f000 f855 	bl	8009c98 <_lseek_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	bf15      	itete	ne
 8009bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bfe:	81a3      	strheq	r3, [r4, #12]
 8009c00:	bf18      	it	ne
 8009c02:	81a3      	strhne	r3, [r4, #12]
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <__sclose>:
 8009c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0a:	f000 b813 	b.w	8009c34 <_close_r>
	...

08009c10 <_write_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	; (8009c30 <_write_r+0x20>)
 8009c14:	4604      	mov	r4, r0
 8009c16:	4608      	mov	r0, r1
 8009c18:	4611      	mov	r1, r2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f7f7 fded 	bl	80017fe <_write>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_write_r+0x1e>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_write_r+0x1e>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	2000060c 	.word	0x2000060c

08009c34 <_close_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_close_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f7 fdf9 	bl	8001836 <_close>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_close_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_close_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	2000060c 	.word	0x2000060c

08009c54 <_fstat_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d07      	ldr	r5, [pc, #28]	; (8009c74 <_fstat_r+0x20>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	4611      	mov	r1, r2
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	f7f7 fdf4 	bl	800184e <_fstat>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	d102      	bne.n	8009c70 <_fstat_r+0x1c>
 8009c6a:	682b      	ldr	r3, [r5, #0]
 8009c6c:	b103      	cbz	r3, 8009c70 <_fstat_r+0x1c>
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	2000060c 	.word	0x2000060c

08009c78 <_isatty_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d06      	ldr	r5, [pc, #24]	; (8009c94 <_isatty_r+0x1c>)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7f7 fdf3 	bl	800186e <_isatty>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_isatty_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_isatty_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	2000060c 	.word	0x2000060c

08009c98 <_lseek_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_lseek_r+0x20>)
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f7 fdec 	bl	8001884 <_lseek>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_lseek_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_lseek_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	2000060c 	.word	0x2000060c

08009cbc <_read_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_read_r+0x20>)
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f7 fd7a 	bl	80017c4 <_read>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_read_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_read_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	2000060c 	.word	0x2000060c

08009ce0 <_init>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr

08009cec <_fini>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr
