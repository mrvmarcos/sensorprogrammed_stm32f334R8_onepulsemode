
One_Pulse_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003554  08003554  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003554  08003554  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003554  08003554  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800355c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009615  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165b  00000000  00000000  00029651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c8  00000000  00000000  0002b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb55  00000000  00000000  0002bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0d4  00000000  00000000  0004aa4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baa12  00000000  00000000  00055b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110533  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000273c  00000000  00000000  00110584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800350c 	.word	0x0800350c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800350c 	.word	0x0800350c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 faa6 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f984 	bl	80004e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f934 	bl	8000444 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001dc:	f000 f86c 	bl	80002b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x28>)
 80001e4:	f002 fa1a 	bl	800261c <HAL_TIM_OnePulse_Start>
  HAL_TIM_Base_Start(&htim2);
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0x2c>)
 80001ea:	f002 f907 	bl	80023fc <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <main+0x26>
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000074 	.word	0x20000074

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b096      	sub	sp, #88	; 0x58
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 f978 	bl	80034fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 031c 	add.w	r3, r7, #28
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]
 800022a:	615a      	str	r2, [r3, #20]
 800022c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022e:	2301      	movs	r3, #1
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000238:	2303      	movs	r3, #3
 800023a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fd1f 	bl	8000c98 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000260:	f000 f962 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800027c:	f107 031c 	add.w	r3, r7, #28
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fd46 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800028e:	f000 f94b 	bl	8000528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000296:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ff1e 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002aa:	f000 f93d 	bl	8000528 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3758      	adds	r7, #88	; 0x58
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b09a      	sub	sp, #104	; 0x68
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ee:	463b      	mov	r3, r7
 80002f0:	222c      	movs	r2, #44	; 0x2c
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f003 f901 	bl	80034fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002fa:	4b50      	ldr	r3, [pc, #320]	; (800043c <MX_TIM1_Init+0x184>)
 80002fc:	4a50      	ldr	r2, [pc, #320]	; (8000440 <MX_TIM1_Init+0x188>)
 80002fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000300:	4b4e      	ldr	r3, [pc, #312]	; (800043c <MX_TIM1_Init+0x184>)
 8000302:	221f      	movs	r2, #31
 8000304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000306:	4b4d      	ldr	r3, [pc, #308]	; (800043c <MX_TIM1_Init+0x184>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800030c:	4b4b      	ldr	r3, [pc, #300]	; (800043c <MX_TIM1_Init+0x184>)
 800030e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b49      	ldr	r3, [pc, #292]	; (800043c <MX_TIM1_Init+0x184>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800031a:	4b48      	ldr	r3, [pc, #288]	; (800043c <MX_TIM1_Init+0x184>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b46      	ldr	r3, [pc, #280]	; (800043c <MX_TIM1_Init+0x184>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000326:	4845      	ldr	r0, [pc, #276]	; (800043c <MX_TIM1_Init+0x184>)
 8000328:	f002 f810 	bl	800234c <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000332:	f000 f8f9 	bl	8000528 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000336:	4841      	ldr	r0, [pc, #260]	; (800043c <MX_TIM1_Init+0x184>)
 8000338:	f002 f8b4 	bl	80024a4 <HAL_TIM_OC_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000342:	f000 f8f1 	bl	8000528 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000346:	2108      	movs	r1, #8
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <MX_TIM1_Init+0x184>)
 800034a:	f002 f90c 	bl	8002566 <HAL_TIM_OnePulse_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000354:	f000 f8e8 	bl	8000528 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000358:	2306      	movs	r3, #6
 800035a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800035c:	2310      	movs	r3, #16
 800035e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000364:	4619      	mov	r1, r3
 8000366:	4835      	ldr	r0, [pc, #212]	; (800043c <MX_TIM1_Init+0x184>)
 8000368:	f002 fb0b 	bl	8002982 <HAL_TIM_SlaveConfigSynchro>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000372:	f000 f8d9 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000376:	2300      	movs	r3, #0
 8000378:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000382:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000386:	4619      	mov	r1, r3
 8000388:	482c      	ldr	r0, [pc, #176]	; (800043c <MX_TIM1_Init+0x184>)
 800038a:	f002 ffad 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000394:	f000 f8c8 	bl	8000528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000398:	2370      	movs	r3, #112	; 0x70
 800039a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse =1;
 800039c:	2301      	movs	r3, #1
 800039e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a0:	2300      	movs	r3, #0
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003a4:	2300      	movs	r3, #0
 80003a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003ac:	2300      	movs	r3, #0
 80003ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003b0:	2300      	movs	r3, #0
 80003b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003b8:	2200      	movs	r2, #0
 80003ba:	4619      	mov	r1, r3
 80003bc:	481f      	ldr	r0, [pc, #124]	; (800043c <MX_TIM1_Init+0x184>)
 80003be:	f002 f99d 	bl	80026fc <HAL_TIM_OC_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80003c8:	f000 f8ae 	bl	8000528 <Error_Handler>
  }
  sConfigOC.Pulse = 30-1;
 80003cc:	231d      	movs	r3, #29
 80003ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003d4:	2204      	movs	r2, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4818      	ldr	r0, [pc, #96]	; (800043c <MX_TIM1_Init+0x184>)
 80003da:	f002 f98f 	bl	80026fc <HAL_TIM_OC_ConfigChannel>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80003e4:	f000 f8a0 	bl	8000528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800040a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800040e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	4619      	mov	r1, r3
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <MX_TIM1_Init+0x184>)
 800041e:	f002 ffd1 	bl	80033c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000428:	f000 f87e 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <MX_TIM1_Init+0x184>)
 800042e:	f000 f8d7 	bl	80005e0 <HAL_TIM_MspPostInit>

}
 8000432:	bf00      	nop
 8000434:	3768      	adds	r7, #104	; 0x68
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40012c00 	.word	0x40012c00

08000444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_TIM2_Init+0x98>)
 8000464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_TIM2_Init+0x98>)
 800046c:	221f      	movs	r2, #31
 800046e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_TIM2_Init+0x98>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <MX_TIM2_Init+0x98>)
 8000478:	f242 720f 	movw	r2, #9999	; 0x270f
 800047c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <MX_TIM2_Init+0x98>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_TIM2_Init+0x98>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048a:	4814      	ldr	r0, [pc, #80]	; (80004dc <MX_TIM2_Init+0x98>)
 800048c:	f001 ff5e 	bl	800234c <HAL_TIM_Base_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000496:	f000 f847 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480d      	ldr	r0, [pc, #52]	; (80004dc <MX_TIM2_Init+0x98>)
 80004a8:	f002 f9a2 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004b2:	f000 f839 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004b6:	2320      	movs	r3, #32
 80004b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <MX_TIM2_Init+0x98>)
 80004c4:	f002 ff10 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004ce:	f000 f82b 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000074 	.word	0x20000074

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_GPIO_Init+0x44>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <MX_GPIO_Init+0x44>)
 80004ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_GPIO_Init+0x44>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_GPIO_Init+0x44>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <MX_GPIO_Init+0x44>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_GPIO_Init+0x44>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <HAL_TIM_Base_MspInit+0x5c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10c      	bne.n	80005a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 8000594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005a6:	e010      	b.n	80005ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b0:	d10b      	bne.n	80005ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40012c00 	.word	0x40012c00
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <HAL_TIM_MspPostInit+0x64>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d11b      	bne.n	800063a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_TIM_MspPostInit+0x68>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <HAL_TIM_MspPostInit+0x68>)
 8000608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_TIM_MspPostInit+0x68>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800061a:	2303      	movs	r3, #3
 800061c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_TIM_MspPostInit+0x6c>)
 8000636:	f000 f9bd 	bl	80009b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40012c00 	.word	0x40012c00
 8000648:	40021000 	.word	0x40021000
 800064c:	48000800 	.word	0x48000800

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f884 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006cc:	f7ff ffea 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f6:	f002 fedd 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fd65 	bl	80001c8 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	200000c4 	.word	0x200000c4

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f90d 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fefc 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f917 	bl	800099a <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f8ed 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	200000c0 	.word	0x200000c0

080007d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	200000c0 	.word	0x200000c0

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff47 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff5c 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb0 	bl	8000908 <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e14e      	b.n	8000c62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8140 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d005      	beq.n	80009f4 <HAL_GPIO_Init+0x40>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d017      	beq.n	8000a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 809a 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d013      	beq.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2d4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d00d      	beq.n	8000b90 <HAL_GPIO_Init+0x1dc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x1d8>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a44      	ldr	r2, [pc, #272]	; (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d101      	bne.n	8000b88 <HAL_GPIO_Init+0x1d4>
 8000b84:	2303      	movs	r3, #3
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b88:	2305      	movs	r3, #5
 8000b8a:	e004      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b94:	2300      	movs	r3, #0
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	f002 0203 	and.w	r2, r2, #3
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4093      	lsls	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba6:	4937      	ldr	r1, [pc, #220]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aea9 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ca8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f001 b823 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 817d 	beq.w	8000fce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd4:	4bbc      	ldr	r3, [pc, #752]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d00c      	beq.n	8000cfa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce0:	4bb9      	ldr	r3, [pc, #740]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d15c      	bne.n	8000da6 <HAL_RCC_OscConfig+0x10e>
 8000cec:	4bb6      	ldr	r3, [pc, #728]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf8:	d155      	bne.n	8000da6 <HAL_RCC_OscConfig+0x10e>
 8000cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	fab3 f383 	clz	r3, r3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d102      	bne.n	8000d2c <HAL_RCC_OscConfig+0x94>
 8000d26:	4ba8      	ldr	r3, [pc, #672]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	e015      	b.n	8000d58 <HAL_RCC_OscConfig+0xc0>
 8000d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d4c:	fa93 f3a3 	rbit	r3, r3
 8000d50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d54:	4b9c      	ldr	r3, [pc, #624]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d64:	fa92 f2a2 	rbit	r2, r2
 8000d68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	f042 0220 	orr.w	r2, r2, #32
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	f002 021f 	and.w	r2, r2, #31
 8000d80:	2101      	movs	r1, #1
 8000d82:	fa01 f202 	lsl.w	r2, r1, r2
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 811f 	beq.w	8000fcc <HAL_RCC_OscConfig+0x334>
 8000d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8116 	bne.w	8000fcc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f000 bfaf 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x12e>
 8000db8:	4b83      	ldr	r3, [pc, #524]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a82      	ldr	r2, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e036      	b.n	8000e34 <HAL_RCC_OscConfig+0x19c>
 8000dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x158>
 8000dd6:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7b      	ldr	r2, [pc, #492]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b79      	ldr	r3, [pc, #484]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a78      	ldr	r2, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e021      	b.n	8000e34 <HAL_RCC_OscConfig+0x19c>
 8000df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x184>
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a70      	ldr	r2, [pc, #448]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a6d      	ldr	r2, [pc, #436]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e00b      	b.n	8000e34 <HAL_RCC_OscConfig+0x19c>
 8000e1c:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a69      	ldr	r2, [pc, #420]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b67      	ldr	r3, [pc, #412]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a66      	ldr	r2, [pc, #408]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	f023 020f 	bic.w	r2, r3, #15
 8000e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	495f      	ldr	r1, [pc, #380]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d059      	beq.n	8000f12 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fcb7 	bl	80007d0 <HAL_GetTick>
 8000e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	e00a      	b.n	8000e7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fcb2 	bl	80007d0 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d902      	bls.n	8000e7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	f000 bf43 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 8000e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	fab3 f383 	clz	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	095b      	lsrs	r3, r3, #5
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d102      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x218>
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	e015      	b.n	8000edc <HAL_RCC_OscConfig+0x244>
 8000eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ecc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ee4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ee8:	fa92 f2a2 	rbit	r2, r2
 8000eec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ef0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ef4:	fab2 f282 	clz	r2, r2
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	f042 0220 	orr.w	r2, r2, #32
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	f002 021f 	and.w	r2, r2, #31
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0ab      	beq.n	8000e68 <HAL_RCC_OscConfig+0x1d0>
 8000f10:	e05d      	b.n	8000fce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fc5d 	bl	80007d0 <HAL_GetTick>
 8000f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e00a      	b.n	8000f32 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc58 	bl	80007d0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d902      	bls.n	8000f32 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f000 bee9 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 8000f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2cc>
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	e015      	b.n	8000f90 <HAL_RCC_OscConfig+0x2f8>
 8000f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f68:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f94:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f9c:	fa92 f2a2 	rbit	r2, r2
 8000fa0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fa4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	f042 0220 	orr.w	r2, r2, #32
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f002 021f 	and.w	r2, r2, #31
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ab      	bne.n	8000f1c <HAL_RCC_OscConfig+0x284>
 8000fc4:	e003      	b.n	8000fce <HAL_RCC_OscConfig+0x336>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 817d 	beq.w	80012de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe4:	4ba6      	ldr	r3, [pc, #664]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ff0:	4ba3      	ldr	r3, [pc, #652]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d172      	bne.n	80010e2 <HAL_RCC_OscConfig+0x44a>
 8000ffc:	4ba0      	ldr	r3, [pc, #640]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d16c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x44a>
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800101a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	fab3 f383 	clz	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	095b      	lsrs	r3, r3, #5
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x3a0>
 8001032:	4b93      	ldr	r3, [pc, #588]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	e013      	b.n	8001060 <HAL_RCC_OscConfig+0x3c8>
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001050:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800105c:	4b88      	ldr	r3, [pc, #544]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2202      	movs	r2, #2
 8001062:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001066:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800106a:	fa92 f2a2 	rbit	r2, r2
 800106e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001072:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001076:	fab2 f282 	clz	r2, r2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f042 0220 	orr.w	r2, r2, #32
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f002 021f 	and.w	r2, r2, #31
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <HAL_RCC_OscConfig+0x410>
 8001092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d002      	beq.n	80010a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 be2e 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b75      	ldr	r3, [pc, #468]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	21f8      	movs	r1, #248	; 0xf8
 80010be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010c6:	fa91 f1a1 	rbit	r1, r1
 80010ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010d2:	fab1 f181 	clz	r1, r1
 80010d6:	b2c9      	uxtb	r1, r1
 80010d8:	408b      	lsls	r3, r1
 80010da:	4969      	ldr	r1, [pc, #420]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e0:	e0fd      	b.n	80012de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8088 	beq.w	8001204 <HAL_RCC_OscConfig+0x56c>
 80010f4:	2301      	movs	r3, #1
 80010f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001106:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	2301      	movs	r3, #1
 800111e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fb56 	bl	80007d0 <HAL_GetTick>
 8001124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112a:	f7ff fb51 	bl	80007d0 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d902      	bls.n	8001140 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	f000 bde2 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001152:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	095b      	lsrs	r3, r3, #5
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d102      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d8>
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	e013      	b.n	8001198 <HAL_RCC_OscConfig+0x500>
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800117a:	fa93 f3a3 	rbit	r3, r3
 800117e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001188:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	2202      	movs	r2, #2
 800119a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800119e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011a2:	fa92 f2a2 	rbit	r2, r2
 80011a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011ae:	fab2 f282 	clz	r2, r2
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	f042 0220 	orr.w	r2, r2, #32
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	f002 021f 	and.w	r2, r2, #31
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0af      	beq.n	800112a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	21f8      	movs	r1, #248	; 0xf8
 80011e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011e8:	fa91 f1a1 	rbit	r1, r1
 80011ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011f4:	fab1 f181 	clz	r1, r1
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	408b      	lsls	r3, r1
 80011fc:	4920      	ldr	r1, [pc, #128]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
 8001202:	e06c      	b.n	80012de <HAL_RCC_OscConfig+0x646>
 8001204:	2301      	movs	r3, #1
 8001206:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001216:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	461a      	mov	r2, r3
 800122c:	2300      	movs	r3, #0
 800122e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff face 	bl	80007d0 <HAL_GetTick>
 8001234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fac9 	bl	80007d0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d902      	bls.n	8001250 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	f000 bd5a 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d104      	bne.n	8001284 <HAL_RCC_OscConfig+0x5ec>
 800127a:	4b01      	ldr	r3, [pc, #4]	; (8001280 <HAL_RCC_OscConfig+0x5e8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	e015      	b.n	80012ac <HAL_RCC_OscConfig+0x614>
 8001280:	40021000 	.word	0x40021000
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800129c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012a8:	4bc8      	ldr	r3, [pc, #800]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	2202      	movs	r2, #2
 80012ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012b6:	fa92 f2a2 	rbit	r2, r2
 80012ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1ad      	bne.n	800123a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8110 	beq.w	8001514 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d079      	beq.n	80013f8 <HAL_RCC_OscConfig+0x760>
 8001304:	2301      	movs	r3, #1
 8001306:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4bab      	ldr	r3, [pc, #684]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	2301      	movs	r3, #1
 800132c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fa4f 	bl	80007d0 <HAL_GetTick>
 8001332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fa4a 	bl	80007d0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d902      	bls.n	800134e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	f000 bcdb 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001364:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001368:	2202      	movs	r2, #2
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f2a3 	rbit	r2, r3
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 80013aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013b4:	2102      	movs	r1, #2
 80013b6:	6019      	str	r1, [r3, #0]
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	fa93 f1a3 	rbit	r1, r3
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ce:	6019      	str	r1, [r3, #0]
  return result;
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0a0      	beq.n	8001338 <HAL_RCC_OscConfig+0x6a0>
 80013f6:	e08d      	b.n	8001514 <HAL_RCC_OscConfig+0x87c>
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001408:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800141a:	601a      	str	r2, [r3, #0]
  return result;
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001424:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x938>)
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	2300      	movs	r3, #0
 8001438:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff f9c9 	bl	80007d0 <HAL_GetTick>
 800143e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff f9c4 	bl	80007d0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d902      	bls.n	800145a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	f000 bc55 	b.w	8001d04 <HAL_RCC_OscConfig+0x106c>
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fa93 f2a3 	rbit	r2, r3
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001482:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001486:	2202      	movs	r2, #2
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fa93 f2a3 	rbit	r2, r3
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014aa:	2202      	movs	r2, #2
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 80014c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014d2:	2102      	movs	r1, #2
 80014d4:	6019      	str	r1, [r3, #0]
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f1a3 	rbit	r1, r3
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ec:	6019      	str	r1, [r3, #0]
  return result;
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2101      	movs	r1, #1
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d197      	bne.n	8001444 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 81a1 	beq.w	800186c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d116      	bne.n	800156a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	61d3      	str	r3, [r2, #28]
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001562:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001564:	2301      	movs	r3, #1
 8001566:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x93c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11a      	bne.n	80015ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_RCC_OscConfig+0x93c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <HAL_RCC_OscConfig+0x93c>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff f925 	bl	80007d0 <HAL_GetTick>
 8001586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	e009      	b.n	80015a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158c:	f7ff f920 	bl	80007d0 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e3b1      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x93c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ef      	beq.n	800158c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10d      	bne.n	80015d8 <HAL_RCC_OscConfig+0x940>
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a02      	ldr	r2, [pc, #8]	; (80015cc <HAL_RCC_OscConfig+0x934>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e03c      	b.n	8001644 <HAL_RCC_OscConfig+0x9ac>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	10908120 	.word	0x10908120
 80015d4:	40007000 	.word	0x40007000
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_OscConfig+0x96a>
 80015e8:	4bc1      	ldr	r3, [pc, #772]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4ac0      	ldr	r2, [pc, #768]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	4bbe      	ldr	r3, [pc, #760]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4abd      	ldr	r2, [pc, #756]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e020      	b.n	8001644 <HAL_RCC_OscConfig+0x9ac>
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x994>
 8001612:	4bb7      	ldr	r3, [pc, #732]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4ab6      	ldr	r2, [pc, #728]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4bb4      	ldr	r3, [pc, #720]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4ab3      	ldr	r2, [pc, #716]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x9ac>
 800162c:	4bb0      	ldr	r3, [pc, #704]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4aaf      	ldr	r2, [pc, #700]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	4bad      	ldr	r3, [pc, #692]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4aac      	ldr	r2, [pc, #688]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8081 	beq.w	8001758 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff f8bb 	bl	80007d0 <HAL_GetTick>
 800165a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff f8b6 	bl	80007d0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e345      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016a4:	2202      	movs	r2, #2
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fa93 f2a3 	rbit	r2, r3
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0xa4c>
 80016de:	4b84      	ldr	r3, [pc, #528]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0xa74>
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001710:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001714:	2102      	movs	r1, #2
 8001716:	6011      	str	r1, [r2, #0]
 8001718:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	fa92 f1a2 	rbit	r1, r2
 8001726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800172a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800172e:	6011      	str	r1, [r2, #0]
  return result;
 8001730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001734:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	fab2 f282 	clz	r2, r2
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f002 021f 	and.w	r2, r2, #31
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d084      	beq.n	8001660 <HAL_RCC_OscConfig+0x9c8>
 8001756:	e07f      	b.n	8001858 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff f83a 	bl	80007d0 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	e00b      	b.n	800177a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff f835 	bl	80007d0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e2c4      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017a6:	2202      	movs	r2, #2
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017c0:	601a      	str	r2, [r3, #0]
  return result;
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0xb4e>
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	e013      	b.n	800180e <HAL_RCC_OscConfig+0xb76>
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001812:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001816:	2102      	movs	r1, #2
 8001818:	6011      	str	r1, [r2, #0]
 800181a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fa92 f1a2 	rbit	r1, r2
 8001828:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800182c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001830:	6011      	str	r1, [r2, #0]
  return result;
 8001832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001836:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d184      	bne.n	8001762 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001858:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8242 	beq.w	8001d02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_RCC_OscConfig+0xc58>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	f000 8213 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b02      	cmp	r3, #2
 800189a:	f040 8162 	bne.w	8001b62 <HAL_RCC_OscConfig+0xeca>
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c2:	601a      	str	r2, [r3, #0]
  return result;
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7fe ff74 	bl	80007d0 <HAL_GetTick>
 80018e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	e00c      	b.n	8001908 <HAL_RCC_OscConfig+0xc70>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7fe ff6c 	bl	80007d0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1fd      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800192c:	601a      	str	r2, [r3, #0]
  return result;
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001936:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0xcba>
 800194c:	4bb0      	ldr	r3, [pc, #704]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e027      	b.n	80019a2 <HAL_RCC_OscConfig+0xd0a>
 8001952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001956:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800195a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4b9c      	ldr	r3, [pc, #624]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ae:	6011      	str	r1, [r2, #0]
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fa92 f1a2 	rbit	r1, r2
 80019be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c6:	6011      	str	r1, [r2, #0]
  return result;
 80019c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	fab2 f282 	clz	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f042 0220 	orr.w	r2, r2, #32
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f002 021f 	and.w	r2, r2, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d182      	bne.n	80018f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ee:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	497f      	ldr	r1, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a3a:	601a      	str	r2, [r3, #0]
  return result;
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	461a      	mov	r2, r3
 8001a58:	2301      	movs	r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7fe feb8 	bl	80007d0 <HAL_GetTick>
 8001a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7fe feb3 	bl	80007d0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e144      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a9e:	601a      	str	r2, [r3, #0]
  return result;
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	095b      	lsrs	r3, r3, #5
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xe2c>
 8001abe:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e027      	b.n	8001b14 <HAL_RCC_OscConfig+0xe7c>
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fa92 f1a2 	rbit	r1, r2
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b38:	6011      	str	r1, [r2, #0]
  return result;
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0220 	orr.w	r2, r2, #32
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d082      	beq.n	8001a66 <HAL_RCC_OscConfig+0xdce>
 8001b60:	e0cf      	b.n	8001d02 <HAL_RCC_OscConfig+0x106a>
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fe12 	bl	80007d0 <HAL_GetTick>
 8001bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe fe0d 	bl	80007d0 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e09e      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <HAL_RCC_OscConfig+0xf7c>
 8001c0a:	4b01      	ldr	r3, [pc, #4]	; (8001c10 <HAL_RCC_OscConfig+0xf78>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e029      	b.n	8001c64 <HAL_RCC_OscConfig+0xfcc>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x1078>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fa92 f1a2 	rbit	r1, r2
 8001c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c88:	6011      	str	r1, [r2, #0]
  return result;
 8001c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0220 	orr.w	r2, r2, #32
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d180      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xf1a>
 8001cb0:	e027      	b.n	8001d02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e01e      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_OscConfig+0x1078>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b09e      	sub	sp, #120	; 0x78
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e162      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	498b      	ldr	r1, [pc, #556]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e14a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	497f      	ldr	r1, [pc, #508]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80dc 	beq.w	8001f40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d13c      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xf6>
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_ClockConfig+0xa6>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e00f      	b.n	8001dda <HAL_RCC_ClockConfig+0xc6>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dde:	65ba      	str	r2, [r7, #88]	; 0x58
 8001de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d17b      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0f3      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d13c      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x178>
 8001e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x128>
 8001e36:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_ClockConfig+0x148>
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e64:	fa92 f2a2 	rbit	r2, r2
 8001e68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13a      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b2      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x1a0>
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e00d      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1bc>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	61ba      	str	r2, [r7, #24]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	617a      	str	r2, [r7, #20]
  return result;
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e079      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	491a      	ldr	r1, [pc, #104]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fc5e 	bl	80007d0 <HAL_GetTick>
 8001f14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f18:	f7fe fc5a 	bl	80007d0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e061      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 020c 	and.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1eb      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d214      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4906      	ldr	r1, [pc, #24]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e040      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb6:	f000 f829 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fba:	4601      	mov	r1, r0
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc4:	22f0      	movs	r2, #240	; 0xf0
 8001fc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	40d3      	lsrs	r3, r2
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x2ec>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCC_ClockConfig+0x2f0>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_RCC_ClockConfig+0x2f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fbac 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3778      	adds	r7, #120	; 0x78
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003524 	.word	0x08003524
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b08b      	sub	sp, #44	; 0x2c
 8002010:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x30>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x36>
 800203a:	e03c      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800203e:	623b      	str	r3, [r7, #32]
      break;
 8002040:	e03c      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002048:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800204c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	fa92 f2a2 	rbit	r2, r2
 8002054:	607a      	str	r2, [r7, #4]
  return result;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	40d3      	lsrs	r3, r2
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	220f      	movs	r2, #15
 8002070:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	60fa      	str	r2, [r7, #12]
  return result;
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	fbb2 f2f3 	udiv	r2, r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	e004      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b8:	623b      	str	r3, [r7, #32]
      break;
 80020ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020bc:	6a3b      	ldr	r3, [r7, #32]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	372c      	adds	r7, #44	; 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	08003534 	.word	0x08003534
 80020d8:	08003544 	.word	0x08003544
 80020dc:	003d0900 	.word	0x003d0900

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b092      	sub	sp, #72	; 0x48
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80cd 	beq.w	800229e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002104:	4b8e      	ldr	r3, [pc, #568]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10e      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b8b      	ldr	r3, [pc, #556]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4a8a      	ldr	r2, [pc, #552]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	61d3      	str	r3, [r2, #28]
 800211c:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a81      	ldr	r2, [pc, #516]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe fb43 	bl	80007d0 <HAL_GetTick>
 800214a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe fb3f 	bl	80007d0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ea      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800216c:	4b74      	ldr	r3, [pc, #464]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d07d      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002186:	429a      	cmp	r2, r3
 8002188:	d076      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	2301      	movs	r3, #1
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	2300      	movs	r3, #0
 80021da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d045      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe faf0 	bl	80007d0 <HAL_GetTick>
 80021f0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe faec 	bl	80007d0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e095      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800220a:	2302      	movs	r3, #2
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	61fb      	str	r3, [r7, #28]
  return result;
 8002222:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d102      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	e007      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2202      	movs	r2, #2
 8002250:	613a      	str	r2, [r7, #16]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	60fa      	str	r2, [r7, #12]
  return result;
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0bd      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	492e      	ldr	r1, [pc, #184]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	4313      	orrs	r3, r2
 8002288:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800228a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4922      	ldr	r1, [pc, #136]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 0210 	bic.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	491a      	ldr	r1, [pc, #104]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	4913      	ldr	r1, [pc, #76]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	490b      	ldr	r1, [pc, #44]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	4313      	orrs	r3, r2
 8002314:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002330:	4313      	orrs	r3, r2
 8002332:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3748      	adds	r7, #72	; 0x48
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	10908100 	.word	0x10908100

0800234c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e049      	b.n	80023f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe f902 	bl	800057c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f000 fb3c 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d001      	beq.n	8002414 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e038      	b.n	8002486 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_TIM_Base_Start+0x98>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d009      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_TIM_Base_Start+0x9c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_TIM_Base_Start+0x48>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_TIM_Base_Start+0xa0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d115      	bne.n	8002470 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_TIM_Base_Start+0xa4>)
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b06      	cmp	r3, #6
 8002454:	d015      	beq.n	8002482 <HAL_TIM_Base_Start+0x86>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d011      	beq.n	8002482 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	e008      	b.n	8002482 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e000      	b.n	8002484 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40014000 	.word	0x40014000
 80024a0:	00010007 	.word	0x00010007

080024a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e049      	b.n	800254a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f841 	bl	8002552 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 fa90 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e041      	b.n	80025fe <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f839 	bl	8002606 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3304      	adds	r3, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f000 fa2e 	bl	8002a08 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0208 	bic.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002634:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800263c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002644:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002652:	7b7b      	ldrb	r3, [r7, #13]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002658:	7b3b      	ldrb	r3, [r7, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <HAL_TIM_OnePulse_Start+0xc6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fe07 	bl	800329e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	2104      	movs	r1, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fe00 	bl	800329e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_TIM_OnePulse_Start+0xd0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_TIM_OnePulse_Start+0xaa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_TIM_OnePulse_Start+0xd4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_TIM_OnePulse_Start+0xaa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_TIM_OnePulse_Start+0xd8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_TIM_OnePulse_Start+0xaa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_TIM_OnePulse_Start+0xdc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_OnePulse_Start+0xae>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_TIM_OnePulse_Start+0xb0>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_OnePulse_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002716:	2302      	movs	r3, #2
 8002718:	e066      	b.n	80027e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b14      	cmp	r3, #20
 8002726:	d857      	bhi.n	80027d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <HAL_TIM_OC_ConfigChannel+0x34>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002785 	.word	0x08002785
 8002734:	080027d9 	.word	0x080027d9
 8002738:	080027d9 	.word	0x080027d9
 800273c:	080027d9 	.word	0x080027d9
 8002740:	08002793 	.word	0x08002793
 8002744:	080027d9 	.word	0x080027d9
 8002748:	080027d9 	.word	0x080027d9
 800274c:	080027d9 	.word	0x080027d9
 8002750:	080027a1 	.word	0x080027a1
 8002754:	080027d9 	.word	0x080027d9
 8002758:	080027d9 	.word	0x080027d9
 800275c:	080027d9 	.word	0x080027d9
 8002760:	080027af 	.word	0x080027af
 8002764:	080027d9 	.word	0x080027d9
 8002768:	080027d9 	.word	0x080027d9
 800276c:	080027d9 	.word	0x080027d9
 8002770:	080027bd 	.word	0x080027bd
 8002774:	080027d9 	.word	0x080027d9
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027d9 	.word	0x080027d9
 8002780:	080027cb 	.word	0x080027cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f9b4 	bl	8002af8 <TIM_OC1_SetConfig>
      break;
 8002790:	e025      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fa33 	bl	8002c04 <TIM_OC2_SetConfig>
      break;
 800279e:	e01e      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 faac 	bl	8002d04 <TIM_OC3_SetConfig>
      break;
 80027ac:	e017      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fb23 	bl	8002e00 <TIM_OC4_SetConfig>
      break;
 80027ba:	e010      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fb80 	bl	8002ec8 <TIM_OC5_SetConfig>
      break;
 80027c8:	e009      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fbd7 	bl	8002f84 <TIM_OC6_SetConfig>
      break;
 80027d6:	e002      	b.n	80027de <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
      break;
 80027dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIM_ConfigClockSource+0x1c>
 8002808:	2302      	movs	r3, #2
 800280a:	e0b6      	b.n	800297a <HAL_TIM_ConfigClockSource+0x18a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d03e      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xd8>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	f200 8087 	bhi.w	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	f000 8086 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x176>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d87f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d01a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xaa>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d87b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002868:	2b60      	cmp	r3, #96	; 0x60
 800286a:	d050      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x11e>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d877      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d03c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xfe>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d873      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d058      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x13e>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d86f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d064      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15e>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d86b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d060      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15e>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d867      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05c      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15e>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d05a      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15e>
 8002898:	e062      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f000 fcd8 	bl	800325e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e04f      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f000 fcc1 	bl	800325e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e03c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 fc35 	bl	800316a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2150      	movs	r1, #80	; 0x50
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fc8e 	bl	8003228 <TIM_ITRx_SetConfig>
      break;
 800290c:	e02c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 fc54 	bl	80031c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fc7e 	bl	8003228 <TIM_ITRx_SetConfig>
      break;
 800292c:	e01c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f000 fc15 	bl	800316a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fc6e 	bl	8003228 <TIM_ITRx_SetConfig>
      break;
 800294c:	e00c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f000 fc65 	bl	8003228 <TIM_ITRx_SetConfig>
      break;
 800295e:	e003      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e000      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_TIM_SlaveConfigSynchro+0x18>
 8002996:	2302      	movs	r3, #2
 8002998:	e031      	b.n	80029fe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fb49 	bl	8003044 <TIM_SlaveTimer_SetConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e018      	b.n	80029fe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029da:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029ea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <TIM_Base_SetConfig+0xdc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0x28>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0x28>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <TIM_Base_SetConfig+0xe0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <TIM_Base_SetConfig+0xdc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <TIM_Base_SetConfig+0x6a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d00f      	beq.n	8002a72 <TIM_Base_SetConfig+0x6a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <TIM_Base_SetConfig+0xe0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0x6a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x6a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x6a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <TIM_Base_SetConfig+0xec>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <TIM_Base_SetConfig+0xdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <TIM_Base_SetConfig+0xc0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <TIM_Base_SetConfig+0xe4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_Base_SetConfig+0xc0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <TIM_Base_SetConfig+0xe8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_Base_SetConfig+0xc0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <TIM_Base_SetConfig+0xec>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d103      	bne.n	8002ad0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0302 	bic.w	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <TIM_OC1_SetConfig+0xfc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <TIM_OC1_SetConfig+0x78>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <TIM_OC1_SetConfig+0x100>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d007      	beq.n	8002b70 <TIM_OC1_SetConfig+0x78>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <TIM_OC1_SetConfig+0x104>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d003      	beq.n	8002b70 <TIM_OC1_SetConfig+0x78>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_OC1_SetConfig+0x108>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10c      	bne.n	8002b8a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0308 	bic.w	r3, r3, #8
 8002b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <TIM_OC1_SetConfig+0xfc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00b      	beq.n	8002baa <TIM_OC1_SetConfig+0xb2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <TIM_OC1_SetConfig+0x100>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <TIM_OC1_SetConfig+0xb2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <TIM_OC1_SetConfig+0x104>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <TIM_OC1_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <TIM_OC1_SetConfig+0x108>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	621a      	str	r2, [r3, #32]
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800

08002c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0210 	bic.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0320 	bic.w	r3, r3, #32
 8002c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <TIM_OC2_SetConfig+0xf0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10d      	bne.n	8002c84 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <TIM_OC2_SetConfig+0xf0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00b      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xa0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <TIM_OC2_SetConfig+0xf4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xa0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <TIM_OC2_SetConfig+0xf8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <TIM_OC2_SetConfig+0xa0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <TIM_OC2_SetConfig+0xfc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d113      	bne.n	8002ccc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002caa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400
 8002d00:	40014800 	.word	0x40014800

08002d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <TIM_OC3_SetConfig+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10d      	bne.n	8002d82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <TIM_OC3_SetConfig+0xec>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_OC3_SetConfig+0x9e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <TIM_OC3_SetConfig+0xf0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_OC3_SetConfig+0x9e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <TIM_OC3_SetConfig+0xf4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_OC3_SetConfig+0x9e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <TIM_OC3_SetConfig+0xf8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d113      	bne.n	8002dca <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	621a      	str	r2, [r3, #32]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800

08002e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <TIM_OC4_SetConfig+0xb8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00b      	beq.n	8002e7c <TIM_OC4_SetConfig+0x7c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <TIM_OC4_SetConfig+0xbc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_OC4_SetConfig+0x7c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <TIM_OC4_SetConfig+0xc0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_OC4_SetConfig+0x7c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <TIM_OC4_SetConfig+0xc4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <TIM_OC5_SetConfig+0xac>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_OC5_SetConfig+0x72>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <TIM_OC5_SetConfig+0xb0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_OC5_SetConfig+0x72>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <TIM_OC5_SetConfig+0xb4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_OC5_SetConfig+0x72>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <TIM_OC5_SetConfig+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d109      	bne.n	8002f4e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800

08002f84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <TIM_OC6_SetConfig+0xb0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <TIM_OC6_SetConfig+0x74>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <TIM_OC6_SetConfig+0xb4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <TIM_OC6_SetConfig+0x74>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <TIM_OC6_SetConfig+0xb8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_OC6_SetConfig+0x74>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <TIM_OC6_SetConfig+0xbc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800

08003044 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	f023 0307 	bic.w	r3, r3, #7
 8003076:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b70      	cmp	r3, #112	; 0x70
 8003090:	d01a      	beq.n	80030c8 <TIM_SlaveTimer_SetConfig+0x84>
 8003092:	2b70      	cmp	r3, #112	; 0x70
 8003094:	d860      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 8003096:	2b60      	cmp	r3, #96	; 0x60
 8003098:	d054      	beq.n	8003144 <TIM_SlaveTimer_SetConfig+0x100>
 800309a:	2b60      	cmp	r3, #96	; 0x60
 800309c:	d85c      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 800309e:	2b50      	cmp	r3, #80	; 0x50
 80030a0:	d046      	beq.n	8003130 <TIM_SlaveTimer_SetConfig+0xec>
 80030a2:	2b50      	cmp	r3, #80	; 0x50
 80030a4:	d858      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d019      	beq.n	80030de <TIM_SlaveTimer_SetConfig+0x9a>
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d854      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 80030ae:	2b30      	cmp	r3, #48	; 0x30
 80030b0:	d055      	beq.n	800315e <TIM_SlaveTimer_SetConfig+0x11a>
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	d850      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d051      	beq.n	800315e <TIM_SlaveTimer_SetConfig+0x11a>
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d84c      	bhi.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04d      	beq.n	800315e <TIM_SlaveTimer_SetConfig+0x11a>
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d04b      	beq.n	800315e <TIM_SlaveTimer_SetConfig+0x11a>
 80030c6:	e047      	b.n	8003158 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68d9      	ldr	r1, [r3, #12]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f000 f8c1 	bl	800325e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80030dc:	e040      	b.n	8003160 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d101      	bne.n	80030ea <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e03b      	b.n	8003162 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
      break;
 800312e:	e017      	b.n	8003160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	461a      	mov	r2, r3
 800313e:	f000 f814 	bl	800316a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003142:	e00d      	b.n	8003160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	461a      	mov	r2, r3
 8003152:	f000 f839 	bl	80031c8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003156:	e003      	b.n	8003160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
      break;
 800315c:	e000      	b.n	8003160 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800315e:	bf00      	nop
  }

  return status;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316a:	b480      	push	{r7}
 800316c:	b087      	sub	sp, #28
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 0201 	bic.w	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 030a 	bic.w	r3, r3, #10
 80031a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f023 0210 	bic.w	r2, r3, #16
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	031b      	lsls	r3, r3, #12
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003204:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	f043 0307 	orr.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b087      	sub	sp, #28
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	431a      	orrs	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	609a      	str	r2, [r3, #8]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800329e:	b480      	push	{r7}
 80032a0:	b087      	sub	sp, #28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1a      	ldr	r2, [r3, #32]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	43db      	mvns	r3, r3
 80032c0:	401a      	ands	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e054      	b.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d009      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40014000 	.word	0x40014000

080033c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033dc:	2302      	movs	r3, #2
 80033de:	e060      	b.n	80034a2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d115      	bne.n	8003490 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	051b      	lsls	r3, r3, #20
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4d0d      	ldr	r5, [pc, #52]	; (80034ec <__libc_init_array+0x38>)
 80034b8:	4c0d      	ldr	r4, [pc, #52]	; (80034f0 <__libc_init_array+0x3c>)
 80034ba:	1b64      	subs	r4, r4, r5
 80034bc:	10a4      	asrs	r4, r4, #2
 80034be:	2600      	movs	r6, #0
 80034c0:	42a6      	cmp	r6, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	4d0b      	ldr	r5, [pc, #44]	; (80034f4 <__libc_init_array+0x40>)
 80034c6:	4c0c      	ldr	r4, [pc, #48]	; (80034f8 <__libc_init_array+0x44>)
 80034c8:	f000 f820 	bl	800350c <_init>
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	2600      	movs	r6, #0
 80034d2:	42a6      	cmp	r6, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034dc:	4798      	blx	r3
 80034de:	3601      	adds	r6, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e6:	4798      	blx	r3
 80034e8:	3601      	adds	r6, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	08003554 	.word	0x08003554
 80034f0:	08003554 	.word	0x08003554
 80034f4:	08003554 	.word	0x08003554
 80034f8:	08003558 	.word	0x08003558

080034fc <memset>:
 80034fc:	4402      	add	r2, r0
 80034fe:	4603      	mov	r3, r0
 8003500:	4293      	cmp	r3, r2
 8003502:	d100      	bne.n	8003506 <memset+0xa>
 8003504:	4770      	bx	lr
 8003506:	f803 1b01 	strb.w	r1, [r3], #1
 800350a:	e7f9      	b.n	8003500 <memset+0x4>

0800350c <_init>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr

08003518 <_fini>:
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351a:	bf00      	nop
 800351c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351e:	bc08      	pop	{r3}
 8003520:	469e      	mov	lr, r3
 8003522:	4770      	bx	lr
