
One_Pulse_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000351c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d4  080036d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036d4  080036d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036d4  080036d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001675  00000000  00000000  00029704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb55  00000000  00000000  0002bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b18a  00000000  00000000  0004ab2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baa25  00000000  00000000  00055cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001106dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002760  00000000  00000000  0011072c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800368c 	.word	0x0800368c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800368c 	.word	0x0800368c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb66 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa00 	bl	80005d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f92c 	bl	8000434 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001dc:	f000 f874 	bl	80002c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80001e0:	f000 f976 	bl	80004d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80001e4:	4805      	ldr	r0, [pc, #20]	; (80001fc <main+0x34>)
 80001e6:	f002 f9c9 	bl	800257c <HAL_TIM_Base_Start>
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x38>)
 80001ee:	f002 fad5 	bl	800279c <HAL_TIM_OnePulse_Start>
  HAL_TIM_OnePulse_Start(&htim3, TIM_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <main+0x3c>)
 80001f6:	f002 fad1 	bl	800279c <HAL_TIM_OnePulse_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x32>
 80001fc:	20000074 	.word	0x20000074
 8000200:	20000028 	.word	0x20000028
 8000204:	200000c0 	.word	0x200000c0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fa30 	bl	800367c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 031c 	add.w	r3, r7, #28
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]
 800023a:	615a      	str	r2, [r3, #20]
 800023c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2301      	movs	r3, #1
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000248:	2303      	movs	r3, #3
 800024a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fdd7 	bl	8000e18 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000270:	f000 f9e2 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2101      	movs	r1, #1
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fdfe 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029e:	f000 f9cb 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ffd6 	bl	8002260 <HAL_RCCEx_PeriphCLKConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002ba:	f000 f9bd 	bl	8000638 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3758      	adds	r7, #88	; 0x58
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b09a      	sub	sp, #104	; 0x68
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]
 80002fa:	615a      	str	r2, [r3, #20]
 80002fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	222c      	movs	r2, #44	; 0x2c
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f003 f9b9 	bl	800367c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800030a:	4b48      	ldr	r3, [pc, #288]	; (800042c <MX_TIM1_Init+0x164>)
 800030c:	4a48      	ldr	r2, [pc, #288]	; (8000430 <MX_TIM1_Init+0x168>)
 800030e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000310:	4b46      	ldr	r3, [pc, #280]	; (800042c <MX_TIM1_Init+0x164>)
 8000312:	221f      	movs	r2, #31
 8000314:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b45      	ldr	r3, [pc, #276]	; (800042c <MX_TIM1_Init+0x164>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30-1;
 800031c:	4b43      	ldr	r3, [pc, #268]	; (800042c <MX_TIM1_Init+0x164>)
 800031e:	221d      	movs	r2, #29
 8000320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	4b42      	ldr	r3, [pc, #264]	; (800042c <MX_TIM1_Init+0x164>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000328:	4b40      	ldr	r3, [pc, #256]	; (800042c <MX_TIM1_Init+0x164>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b3f      	ldr	r3, [pc, #252]	; (800042c <MX_TIM1_Init+0x164>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000334:	483d      	ldr	r0, [pc, #244]	; (800042c <MX_TIM1_Init+0x164>)
 8000336:	f002 f8c9 	bl	80024cc <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000340:	f000 f97a 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000344:	4839      	ldr	r0, [pc, #228]	; (800042c <MX_TIM1_Init+0x164>)
 8000346:	f002 f96d 	bl	8002624 <HAL_TIM_OC_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000350:	f000 f972 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000354:	2108      	movs	r1, #8
 8000356:	4835      	ldr	r0, [pc, #212]	; (800042c <MX_TIM1_Init+0x164>)
 8000358:	f002 f9c5 	bl	80026e6 <HAL_TIM_OnePulse_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000362:	f000 f969 	bl	8000638 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000366:	2306      	movs	r3, #6
 8000368:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800036a:	2310      	movs	r3, #16
 800036c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800036e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000372:	4619      	mov	r1, r3
 8000374:	482d      	ldr	r0, [pc, #180]	; (800042c <MX_TIM1_Init+0x164>)
 8000376:	f002 fbc4 	bl	8002b02 <HAL_TIM_SlaveConfigSynchro>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000380:	f000 f95a 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000390:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000394:	4619      	mov	r1, r3
 8000396:	4825      	ldr	r0, [pc, #148]	; (800042c <MX_TIM1_Init+0x164>)
 8000398:	f003 f866 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80003a2:	f000 f949 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80003a6:	2370      	movs	r3, #112	; 0x70
 80003a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 20-1;
 80003aa:	2313      	movs	r3, #19
 80003ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ae:	2300      	movs	r3, #0
 80003b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b2:	2300      	movs	r3, #0
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003be:	2300      	movs	r3, #0
 80003c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c6:	2200      	movs	r2, #0
 80003c8:	4619      	mov	r1, r3
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <MX_TIM1_Init+0x164>)
 80003cc:	f002 fa56 	bl	800287c <HAL_TIM_OC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80003d6:	f000 f92f 	bl	8000638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000400:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800040a:	463b      	mov	r3, r7
 800040c:	4619      	mov	r1, r3
 800040e:	4807      	ldr	r0, [pc, #28]	; (800042c <MX_TIM1_Init+0x164>)
 8000410:	f003 f898 	bl	8003544 <HAL_TIMEx_ConfigBreakDeadTime>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800041a:	f000 f90d 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <MX_TIM1_Init+0x164>)
 8000420:	f000 f97a 	bl	8000718 <HAL_TIM_MspPostInit>

}
 8000424:	bf00      	nop
 8000426:	3768      	adds	r7, #104	; 0x68
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000028 	.word	0x20000028
 8000430:	40012c00 	.word	0x40012c00

08000434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_TIM2_Init+0x98>)
 8000454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_TIM2_Init+0x98>)
 800045c:	221f      	movs	r2, #31
 800045e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_TIM2_Init+0x98>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_TIM2_Init+0x98>)
 8000468:	f242 720f 	movw	r2, #9999	; 0x270f
 800046c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_TIM2_Init+0x98>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_TIM2_Init+0x98>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <MX_TIM2_Init+0x98>)
 800047c:	f002 f826 	bl	80024cc <HAL_TIM_Base_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000486:	f000 f8d7 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_TIM2_Init+0x98>)
 8000498:	f002 fa6a 	bl	8002970 <HAL_TIM_ConfigClockSource>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004a2:	f000 f8c9 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004a6:	2320      	movs	r3, #32
 80004a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <MX_TIM2_Init+0x98>)
 80004b4:	f002 ffd8 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004be:	f000 f8bb 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000074 	.word	0x20000074

080004d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_TIM3_Init+0x100>)
 8000506:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_TIM3_Init+0x104>)
 8000508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_TIM3_Init+0x100>)
 800050c:	221f      	movs	r2, #31
 800050e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_TIM3_Init+0x100>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_TIM3_Init+0x100>)
 8000518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800051c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_TIM3_Init+0x100>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_TIM3_Init+0x100>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800052a:	4829      	ldr	r0, [pc, #164]	; (80005d0 <MX_TIM3_Init+0x100>)
 800052c:	f001 ffce 	bl	80024cc <HAL_TIM_Base_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000536:	f000 f87f 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800053a:	4825      	ldr	r0, [pc, #148]	; (80005d0 <MX_TIM3_Init+0x100>)
 800053c:	f002 f872 	bl	8002624 <HAL_TIM_OC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000546:	f000 f877 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800054a:	2108      	movs	r1, #8
 800054c:	4820      	ldr	r0, [pc, #128]	; (80005d0 <MX_TIM3_Init+0x100>)
 800054e:	f002 f8ca 	bl	80026e6 <HAL_TIM_OnePulse_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000558:	f000 f86e 	bl	8000638 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800055c:	2306      	movs	r3, #6
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000568:	4619      	mov	r1, r3
 800056a:	4819      	ldr	r0, [pc, #100]	; (80005d0 <MX_TIM3_Init+0x100>)
 800056c:	f002 fac9 	bl	8002b02 <HAL_TIM_SlaveConfigSynchro>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000576:	f000 f85f 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4619      	mov	r1, r3
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_TIM3_Init+0x100>)
 800058a:	f002 ff6d 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000594:	f000 f850 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000598:	2370      	movs	r3, #112	; 0x70
 800059a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 990-1;
 800059c:	f240 33dd 	movw	r3, #989	; 0x3dd
 80005a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <MX_TIM3_Init+0x100>)
 80005b2:	f002 f963 	bl	800287c <HAL_TIM_OC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80005bc:	f000 f83c 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MX_TIM3_Init+0x100>)
 80005c2:	f000 f8a9 	bl	8000718 <HAL_TIM_MspPostInit>

}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	; 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c0 	.word	0x200000c0
 80005d4:	40000400 	.word	0x40000400

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_GPIO_Init+0x5c>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <MX_GPIO_Init+0x5c>)
 80005e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_GPIO_Init+0x5c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_GPIO_Init+0x5c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <MX_GPIO_Init+0x5c>)
 80005fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_GPIO_Init+0x5c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_GPIO_Init+0x5c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <MX_GPIO_Init+0x5c>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_GPIO_Init+0x5c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <HAL_TIM_Base_MspInit+0x80>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10c      	bne.n	80006b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006b6:	e022      	b.n	80006fe <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c0:	d10c      	bne.n	80006dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
}
 80006da:	e010      	b.n	80006fe <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_TIM_Base_MspInit+0x88>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d10b      	bne.n	80006fe <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	bf00      	nop
 8000700:	371c      	adds	r7, #28
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40012c00 	.word	0x40012c00
 8000710:	40021000 	.word	0x40021000
 8000714:	40000400 	.word	0x40000400

08000718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <HAL_TIM_MspPostInit+0xa8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d11c      	bne.n	8000774 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 8000740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000762:	2302      	movs	r3, #2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4816      	ldr	r0, [pc, #88]	; (80007c8 <HAL_TIM_MspPostInit+0xb0>)
 800076e:	f000 f9e1 	bl	8000b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000772:	e021      	b.n	80007b8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_TIM_MspPostInit+0xb4>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d11c      	bne.n	80007b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_TIM_MspPostInit+0xac>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007a6:	2302      	movs	r3, #2
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 f9be 	bl	8000b34 <HAL_GPIO_Init>
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000800 	.word	0x48000800
 80007cc:	40000400 	.word	0x40000400

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f884 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f002 fedd 	bl	8003634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087a:	f7ff fca5 	bl	80001c8 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000880:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	080036dc 	.word	0x080036dc
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	20000110 	.word	0x20000110

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f90d 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff fec4 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f917 	bl	8000b1a <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f8ed 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	2000010c 	.word	0x2000010c

08000950 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;  
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2000010c 	.word	0x2000010c

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff47 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff5c 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff8e 	bl	8000a20 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffb0 	bl	8000a88 <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	e14e      	b.n	8000de2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8140 	beq.w	8000ddc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d005      	beq.n	8000b74 <HAL_GPIO_Init+0x40>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d130      	bne.n	8000bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 0201 	and.w	r2, r3, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d017      	beq.n	8000c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d123      	bne.n	8000c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	6939      	ldr	r1, [r7, #16]
 8000c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0203 	and.w	r2, r3, #3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 809a 	beq.w	8000ddc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HAL_GPIO_Init+0x2cc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a54      	ldr	r2, [pc, #336]	; (8000e00 <HAL_GPIO_Init+0x2cc>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b52      	ldr	r3, [pc, #328]	; (8000e00 <HAL_GPIO_Init+0x2cc>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc0:	4a50      	ldr	r2, [pc, #320]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cea:	d013      	beq.n	8000d14 <HAL_GPIO_Init+0x1e0>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <HAL_GPIO_Init+0x2d4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00d      	beq.n	8000d10 <HAL_GPIO_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_GPIO_Init+0x2d8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x1d8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <HAL_GPIO_Init+0x2dc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_Init+0x1d4>
 8000d04:	2303      	movs	r3, #3
 8000d06:	e006      	b.n	8000d16 <HAL_GPIO_Init+0x1e2>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e004      	b.n	8000d16 <HAL_GPIO_Init+0x1e2>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e002      	b.n	8000d16 <HAL_GPIO_Init+0x1e2>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <HAL_GPIO_Init+0x1e2>
 8000d14:	2300      	movs	r3, #0
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	f002 0203 	and.w	r2, r2, #3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d26:	4937      	ldr	r1, [pc, #220]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f47f aea9 	bne.w	8000b44 <HAL_GPIO_Init+0x10>
  }
}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f001 b823 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 817d 	beq.w	800114e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e54:	4bbc      	ldr	r3, [pc, #752]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4bb9      	ldr	r3, [pc, #740]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d15c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x10e>
 8000e6c:	4bb6      	ldr	r3, [pc, #728]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e78:	d155      	bne.n	8000f26 <HAL_RCC_OscConfig+0x10e>
 8000e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d102      	bne.n	8000eac <HAL_RCC_OscConfig+0x94>
 8000ea6:	4ba8      	ldr	r3, [pc, #672]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	e015      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc0>
 8000eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ec8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ed4:	4b9c      	ldr	r3, [pc, #624]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ee0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	f002 021f 	and.w	r2, r2, #31
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 811f 	beq.w	800114c <HAL_RCC_OscConfig+0x334>
 8000f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8116 	bne.w	800114c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f000 bfaf 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12e>
 8000f38:	4b83      	ldr	r3, [pc, #524]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a82      	ldr	r2, [pc, #520]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e036      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x158>
 8000f56:	4b7c      	ldr	r3, [pc, #496]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7b      	ldr	r2, [pc, #492]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b79      	ldr	r3, [pc, #484]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a78      	ldr	r2, [pc, #480]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e021      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x184>
 8000f82:	4b71      	ldr	r3, [pc, #452]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a70      	ldr	r2, [pc, #448]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b6e      	ldr	r3, [pc, #440]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6d      	ldr	r2, [pc, #436]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a69      	ldr	r2, [pc, #420]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b67      	ldr	r3, [pc, #412]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a66      	ldr	r2, [pc, #408]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb4:	4b64      	ldr	r3, [pc, #400]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	f023 020f 	bic.w	r2, r3, #15
 8000fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	495f      	ldr	r1, [pc, #380]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d059      	beq.n	8001092 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fcb7 	bl	8000950 <HAL_GetTick>
 8000fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcb2 	bl	8000950 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d902      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f000 bf43 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 8000ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001002:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001012:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x218>
 800102a:	4b47      	ldr	r3, [pc, #284]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x244>
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001048:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800104c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001060:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001064:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001068:	fa92 f2a2 	rbit	r2, r2
 800106c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001070:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f002 021f 	and.w	r2, r2, #31
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0ab      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x1d0>
 8001090:	e05d      	b.n	800114e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc5d 	bl	8000950 <HAL_GetTick>
 8001096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fc58 	bl	8000950 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d902      	bls.n	80010b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f000 bee9 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 80010b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2cc>
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <HAL_RCC_OscConfig+0x2f8>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001100:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_RCC_OscConfig+0x330>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001114:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001118:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800111c:	fa92 f2a2 	rbit	r2, r2
 8001120:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001124:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001128:	fab2 f282 	clz	r2, r2
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f042 0220 	orr.w	r2, r2, #32
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ab      	bne.n	800109c <HAL_RCC_OscConfig+0x284>
 8001144:	e003      	b.n	800114e <HAL_RCC_OscConfig+0x336>
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 817d 	beq.w	800145e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001164:	4ba6      	ldr	r3, [pc, #664]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00b      	beq.n	8001188 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001170:	4ba3      	ldr	r3, [pc, #652]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b08      	cmp	r3, #8
 800117a:	d172      	bne.n	8001262 <HAL_RCC_OscConfig+0x44a>
 800117c:	4ba0      	ldr	r3, [pc, #640]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d16c      	bne.n	8001262 <HAL_RCC_OscConfig+0x44a>
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800119a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <HAL_RCC_OscConfig+0x3a0>
 80011b2:	4b93      	ldr	r3, [pc, #588]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e013      	b.n	80011e0 <HAL_RCC_OscConfig+0x3c8>
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011dc:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2202      	movs	r2, #2
 80011e2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011ea:	fa92 f2a2 	rbit	r2, r2
 80011ee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011f6:	fab2 f282 	clz	r2, r2
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	f042 0220 	orr.w	r2, r2, #32
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	f002 021f 	and.w	r2, r2, #31
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_RCC_OscConfig+0x410>
 8001212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f000 be2e 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b75      	ldr	r3, [pc, #468]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	21f8      	movs	r1, #248	; 0xf8
 800123e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001246:	fa91 f1a1 	rbit	r1, r1
 800124a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800124e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001252:	fab1 f181 	clz	r1, r1
 8001256:	b2c9      	uxtb	r1, r1
 8001258:	408b      	lsls	r3, r1
 800125a:	4969      	ldr	r1, [pc, #420]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e0fd      	b.n	800145e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8088 	beq.w	8001384 <HAL_RCC_OscConfig+0x56c>
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001286:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001294:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	461a      	mov	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fb56 	bl	8000950 <HAL_GetTick>
 80012a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fb51 	bl	8000950 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d902      	bls.n	80012c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f000 bde2 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_RCC_OscConfig+0x4d8>
 80012ea:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x500>
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001308:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001314:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2202      	movs	r2, #2
 800131a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800131e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800132a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0af      	beq.n	80012aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	21f8      	movs	r1, #248	; 0xf8
 8001360:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001368:	fa91 f1a1 	rbit	r1, r1
 800136c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001370:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001374:	fab1 f181 	clz	r1, r1
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	408b      	lsls	r3, r1
 800137c:	4920      	ldr	r1, [pc, #128]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
 8001382:	e06c      	b.n	800145e <HAL_RCC_OscConfig+0x646>
 8001384:	2301      	movs	r3, #1
 8001386:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	461a      	mov	r2, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff face 	bl	8000950 <HAL_GetTick>
 80013b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fac9 	bl	8000950 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d902      	bls.n	80013d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	f000 bd5a 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d104      	bne.n	8001404 <HAL_RCC_OscConfig+0x5ec>
 80013fa:	4b01      	ldr	r3, [pc, #4]	; (8001400 <HAL_RCC_OscConfig+0x5e8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	e015      	b.n	800142c <HAL_RCC_OscConfig+0x614>
 8001400:	40021000 	.word	0x40021000
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800141c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001428:	4bc8      	ldr	r3, [pc, #800]	; (800174c <HAL_RCC_OscConfig+0x934>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2202      	movs	r2, #2
 800142e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001432:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800143e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ad      	bne.n	80013ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8110 	beq.w	8001694 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d079      	beq.n	8001578 <HAL_RCC_OscConfig+0x760>
 8001484:	2301      	movs	r3, #1
 8001486:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4bab      	ldr	r3, [pc, #684]	; (8001750 <HAL_RCC_OscConfig+0x938>)
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	2301      	movs	r3, #1
 80014ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa4f 	bl	8000950 <HAL_GetTick>
 80014b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fa4a 	bl	8000950 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 bcdb 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014e8:	2202      	movs	r2, #2
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fa93 f2a3 	rbit	r2, r3
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001526:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001528:	4b88      	ldr	r3, [pc, #544]	; (800174c <HAL_RCC_OscConfig+0x934>)
 800152a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001534:	2102      	movs	r1, #2
 8001536:	6019      	str	r1, [r3, #0]
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f1a3 	rbit	r1, r3
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800154e:	6019      	str	r1, [r3, #0]
  return result;
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	4013      	ands	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0a0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x6a0>
 8001576:	e08d      	b.n	8001694 <HAL_RCC_OscConfig+0x87c>
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800159a:	601a      	str	r2, [r3, #0]
  return result;
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x938>)
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	461a      	mov	r2, r3
 80015b6:	2300      	movs	r3, #0
 80015b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9c9 	bl	8000950 <HAL_GetTick>
 80015be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff f9c4 	bl	8000950 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d902      	bls.n	80015da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f000 bc55 	b.w	8001e84 <HAL_RCC_OscConfig+0x106c>
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f2a3 	rbit	r2, r3
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001644:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_OscConfig+0x934>)
 8001648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001652:	2102      	movs	r1, #2
 8001654:	6019      	str	r1, [r3, #0]
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f1a3 	rbit	r1, r3
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800166c:	6019      	str	r1, [r3, #0]
  return result;
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d197      	bne.n	80015c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 81a1 	beq.w	80019ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_RCC_OscConfig+0x934>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_RCC_OscConfig+0x934>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_RCC_OscConfig+0x934>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_OscConfig+0x934>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <HAL_RCC_OscConfig+0x93c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_RCC_OscConfig+0x93c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_RCC_OscConfig+0x93c>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff f925 	bl	8000950 <HAL_GetTick>
 8001706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	e009      	b.n	8001720 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170c:	f7ff f920 	bl	8000950 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	; 0x64
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e3b1      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_RCC_OscConfig+0x93c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ef      	beq.n	800170c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x940>
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_RCC_OscConfig+0x934>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a02      	ldr	r2, [pc, #8]	; (800174c <HAL_RCC_OscConfig+0x934>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	e03c      	b.n	80017c4 <HAL_RCC_OscConfig+0x9ac>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	10908120 	.word	0x10908120
 8001754:	40007000 	.word	0x40007000
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x96a>
 8001768:	4bc1      	ldr	r3, [pc, #772]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4ac0      	ldr	r2, [pc, #768]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	4bbe      	ldr	r3, [pc, #760]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4abd      	ldr	r2, [pc, #756]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e020      	b.n	80017c4 <HAL_RCC_OscConfig+0x9ac>
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x994>
 8001792:	4bb7      	ldr	r3, [pc, #732]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4ab6      	ldr	r2, [pc, #728]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4bb4      	ldr	r3, [pc, #720]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4ab3      	ldr	r2, [pc, #716]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6213      	str	r3, [r2, #32]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x9ac>
 80017ac:	4bb0      	ldr	r3, [pc, #704]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4aaf      	ldr	r2, [pc, #700]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4bad      	ldr	r3, [pc, #692]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4aac      	ldr	r2, [pc, #688]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8081 	beq.w	80018d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff f8bb 	bl	8000950 <HAL_GetTick>
 80017da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff f8b6 	bl	8000950 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e345      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800183e:	601a      	str	r2, [r3, #0]
  return result;
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001848:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0xa4c>
 800185e:	4b84      	ldr	r3, [pc, #528]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	e013      	b.n	800188c <HAL_RCC_OscConfig+0xa74>
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001890:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001894:	2102      	movs	r1, #2
 8001896:	6011      	str	r1, [r2, #0]
 8001898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	fa92 f1a2 	rbit	r1, r2
 80018a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018ae:	6011      	str	r1, [r2, #0]
  return result;
 80018b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	fab2 f282 	clz	r2, r2
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f002 021f 	and.w	r2, r2, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d084      	beq.n	80017e0 <HAL_RCC_OscConfig+0x9c8>
 80018d6:	e07f      	b.n	80019d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff f83a 	bl	8000950 <HAL_GetTick>
 80018dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff f835 	bl	8000950 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e2c4      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001940:	601a      	str	r2, [r3, #0]
  return result;
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800194a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d102      	bne.n	8001966 <HAL_RCC_OscConfig+0xb4e>
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	e013      	b.n	800198e <HAL_RCC_OscConfig+0xb76>
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001992:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001996:	2102      	movs	r1, #2
 8001998:	6011      	str	r1, [r2, #0]
 800199a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	fa92 f1a2 	rbit	r1, r2
 80019a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019b0:	6011      	str	r1, [r2, #0]
  return result;
 80019b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d184      	bne.n	80018e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8242 	beq.w	8001e82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCC_OscConfig+0xc58>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	f000 8213 	beq.w	8001e32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f040 8162 	bne.w	8001ce2 <HAL_RCC_OscConfig+0xeca>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a42:	601a      	str	r2, [r3, #0]
  return result;
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7fe ff74 	bl	8000950 <HAL_GetTick>
 8001a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e00c      	b.n	8001a88 <HAL_RCC_OscConfig+0xc70>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a74:	f7fe ff6c 	bl	8000950 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1fd      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aac:	601a      	str	r2, [r3, #0]
  return result;
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ab6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0xcba>
 8001acc:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e027      	b.n	8001b22 <HAL_RCC_OscConfig+0xd0a>
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	4b9c      	ldr	r3, [pc, #624]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b2e:	6011      	str	r1, [r2, #0]
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	fa92 f1a2 	rbit	r1, r2
 8001b3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b46:	6011      	str	r1, [r2, #0]
  return result;
 8001b48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d182      	bne.n	8001a74 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	497f      	ldr	r1, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bba:	601a      	str	r2, [r3, #0]
  return result;
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bc4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2301      	movs	r3, #1
 8001bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe feb8 	bl	8000950 <HAL_GetTick>
 8001be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	e009      	b.n	8001bfa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe feb3 	bl	8000950 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e144      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c1e:	601a      	str	r2, [r3, #0]
  return result;
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d102      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe2c>
 8001c3e:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	e027      	b.n	8001c94 <HAL_RCC_OscConfig+0xe7c>
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c98:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca0:	6011      	str	r1, [r2, #0]
 8001ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	fa92 f1a2 	rbit	r1, r2
 8001cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cb8:	6011      	str	r1, [r2, #0]
  return result;
 8001cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d082      	beq.n	8001be6 <HAL_RCC_OscConfig+0xdce>
 8001ce0:	e0cf      	b.n	8001e82 <HAL_RCC_OscConfig+0x106a>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d06:	601a      	str	r2, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe fe12 	bl	8000950 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fe0d 	bl	8000950 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e09e      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d104      	bne.n	8001d94 <HAL_RCC_OscConfig+0xf7c>
 8001d8a:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <HAL_RCC_OscConfig+0xf78>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e029      	b.n	8001de4 <HAL_RCC_OscConfig+0xfcc>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x1078>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df0:	6011      	str	r1, [r2, #0]
 8001df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fa92 f1a2 	rbit	r1, r2
 8001e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e08:	6011      	str	r1, [r2, #0]
  return result;
 8001e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f002 021f 	and.w	r2, r2, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d180      	bne.n	8001d32 <HAL_RCC_OscConfig+0xf1a>
 8001e30:	e027      	b.n	8001e82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01e      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x1078>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b09e      	sub	sp, #120	; 0x78
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e162      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b90      	ldr	r3, [pc, #576]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	498b      	ldr	r1, [pc, #556]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e14a      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	497f      	ldr	r1, [pc, #508]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80dc 	beq.w	80020c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d13c      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xf6>
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xa6>
 8001f34:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e00f      	b.n	8001f5a <HAL_RCC_ClockConfig+0xc6>
 8001f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	667b      	str	r3, [r7, #100]	; 0x64
 8001f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f56:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f62:	fa92 f2a2 	rbit	r2, r2
 8001f66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f6a:	fab2 f282 	clz	r2, r2
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f042 0220 	orr.w	r2, r2, #32
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f002 021f 	and.w	r2, r2, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d17b      	bne.n	800207e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0f3      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d13c      	bne.n	800200c <HAL_RCC_ClockConfig+0x178>
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	095b      	lsrs	r3, r3, #5
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x128>
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_ClockConfig+0x148>
 8001fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f002 021f 	and.w	r2, r2, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d13a      	bne.n	800207e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b2      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
 800200c:	2302      	movs	r3, #2
 800200e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_ClockConfig+0x1a0>
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e00d      	b.n	8002050 <HAL_RCC_ClockConfig+0x1bc>
 8002034:	2302      	movs	r3, #2
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2202      	movs	r2, #2
 8002052:	61ba      	str	r2, [r7, #24]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	fa92 f2a2 	rbit	r2, r2
 800205a:	617a      	str	r2, [r7, #20]
  return result;
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	fab2 f282 	clz	r2, r2
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f002 021f 	and.w	r2, r2, #31
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e079      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	491a      	ldr	r1, [pc, #104]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002090:	f7fe fc5e 	bl	8000950 <HAL_GetTick>
 8002094:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7fe fc5a 	bl	8000950 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e061      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d214      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4906      	ldr	r1, [pc, #24]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e040      	b.n	8002172 <HAL_RCC_ClockConfig+0x2de>
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	491a      	ldr	r1, [pc, #104]	; (800217c <HAL_RCC_ClockConfig+0x2e8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_RCC_ClockConfig+0x2e8>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4912      	ldr	r1, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x2e8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002136:	f000 f829 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800213a:	4601      	mov	r1, r0
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002144:	22f0      	movs	r2, #240	; 0xf0
 8002146:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	60fa      	str	r2, [r7, #12]
  return result;
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	40d3      	lsrs	r3, r2
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x2ec>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	fa21 f303 	lsr.w	r3, r1, r3
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_RCC_ClockConfig+0x2f0>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_ClockConfig+0x2f4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fbac 	bl	80008c8 <HAL_InitTick>
  
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3778      	adds	r7, #120	; 0x78
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	080036a4 	.word	0x080036a4
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e03c      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021be:	623b      	str	r3, [r7, #32]
      break;
 80021c0:	e03c      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	fa92 f2a2 	rbit	r2, r2
 80021d4:	607a      	str	r2, [r7, #4]
  return result;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	40d3      	lsrs	r3, r2
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	220f      	movs	r2, #15
 80021f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	fa92 f2a2 	rbit	r2, r2
 80021f8:	60fa      	str	r2, [r7, #12]
  return result;
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	40d3      	lsrs	r3, r2
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	fbb2 f2f3 	udiv	r2, r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	e004      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_RCC_GetSysClockFreq+0xd0>)
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e002      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002238:	623b      	str	r3, [r7, #32]
      break;
 800223a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223c:	6a3b      	ldr	r3, [r7, #32]
}
 800223e:	4618      	mov	r0, r3
 8002240:	372c      	adds	r7, #44	; 0x2c
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	007a1200 	.word	0x007a1200
 8002254:	080036b4 	.word	0x080036b4
 8002258:	080036c4 	.word	0x080036c4
 800225c:	003d0900 	.word	0x003d0900

08002260 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b092      	sub	sp, #72	; 0x48
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80cd 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002284:	4b8e      	ldr	r3, [pc, #568]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10e      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b8b      	ldr	r3, [pc, #556]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a8a      	ldr	r2, [pc, #552]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	61d3      	str	r3, [r2, #28]
 800229c:	4b88      	ldr	r3, [pc, #544]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a81      	ldr	r2, [pc, #516]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fb43 	bl	8000950 <HAL_GetTick>
 80022ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7fe fb3f 	bl	8000950 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0ea      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ec:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d07d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002306:	429a      	cmp	r2, r3
 8002308:	d076      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2301      	movs	r3, #1
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002360:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d045      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe faf0 	bl	8000950 <HAL_GetTick>
 8002370:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe faec 	bl	8000950 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e095      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800238a:	2302      	movs	r3, #2
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	61fb      	str	r3, [r7, #28]
  return result;
 80023a2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d102      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023b8:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	e007      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	2202      	movs	r2, #2
 80023d0:	613a      	str	r2, [r7, #16]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	60fa      	str	r2, [r7, #12]
  return result;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0bd      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	492e      	ldr	r1, [pc, #184]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	4313      	orrs	r3, r2
 8002408:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f023 0210 	bic.w	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	491a      	ldr	r1, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	4313      	orrs	r3, r2
 8002458:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	4913      	ldr	r1, [pc, #76]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	4313      	orrs	r3, r2
 8002494:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3748      	adds	r7, #72	; 0x48
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
 80024c8:	10908100 	.word	0x10908100

080024cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e049      	b.n	8002572 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f8ca 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f000 fb3c 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e038      	b.n	8002606 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_TIM_Base_Start+0x98>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_TIM_Base_Start+0x48>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ae:	d009      	beq.n	80025c4 <HAL_TIM_Base_Start+0x48>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_TIM_Base_Start+0x9c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_TIM_Base_Start+0x48>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_TIM_Base_Start+0xa0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d115      	bne.n	80025f0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_TIM_Base_Start+0xa4>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d015      	beq.n	8002602 <HAL_TIM_Base_Start+0x86>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d011      	beq.n	8002602 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	e008      	b.n	8002602 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e000      	b.n	8002604 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400
 800261c:	40014000 	.word	0x40014000
 8002620:	00010007 	.word	0x00010007

08002624 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e049      	b.n	80026ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f841 	bl	80026d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f000 fa90 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e041      	b.n	800277e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f839 	bl	8002786 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fa2e 	bl	8002b88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0208 	bic.w	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d108      	bne.n	80027de <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027cc:	7bbb      	ldrb	r3, [r7, #14]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027d2:	7b7b      	ldrb	r3, [r7, #13]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027d8:	7b3b      	ldrb	r3, [r7, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03f      	b.n	8002862 <HAL_TIM_OnePulse_Start+0xc6>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fe07 	bl	800341e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	2104      	movs	r1, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fe00 	bl	800341e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_TIM_OnePulse_Start+0xd0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_TIM_OnePulse_Start+0xaa>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a10      	ldr	r2, [pc, #64]	; (8002870 <HAL_TIM_OnePulse_Start+0xd4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_TIM_OnePulse_Start+0xaa>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_TIM_OnePulse_Start+0xd8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_TIM_OnePulse_Start+0xaa>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <HAL_TIM_OnePulse_Start+0xdc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_TIM_OnePulse_Start+0xae>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_TIM_OnePulse_Start+0xb0>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_TIM_OnePulse_Start+0xc4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40014000 	.word	0x40014000
 8002874:	40014400 	.word	0x40014400
 8002878:	40014800 	.word	0x40014800

0800287c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002896:	2302      	movs	r3, #2
 8002898:	e066      	b.n	8002968 <HAL_TIM_OC_ConfigChannel+0xec>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b14      	cmp	r3, #20
 80028a6:	d857      	bhi.n	8002958 <HAL_TIM_OC_ConfigChannel+0xdc>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	08002905 	.word	0x08002905
 80028b4:	08002959 	.word	0x08002959
 80028b8:	08002959 	.word	0x08002959
 80028bc:	08002959 	.word	0x08002959
 80028c0:	08002913 	.word	0x08002913
 80028c4:	08002959 	.word	0x08002959
 80028c8:	08002959 	.word	0x08002959
 80028cc:	08002959 	.word	0x08002959
 80028d0:	08002921 	.word	0x08002921
 80028d4:	08002959 	.word	0x08002959
 80028d8:	08002959 	.word	0x08002959
 80028dc:	08002959 	.word	0x08002959
 80028e0:	0800292f 	.word	0x0800292f
 80028e4:	08002959 	.word	0x08002959
 80028e8:	08002959 	.word	0x08002959
 80028ec:	08002959 	.word	0x08002959
 80028f0:	0800293d 	.word	0x0800293d
 80028f4:	08002959 	.word	0x08002959
 80028f8:	08002959 	.word	0x08002959
 80028fc:	08002959 	.word	0x08002959
 8002900:	0800294b 	.word	0x0800294b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f9b4 	bl	8002c78 <TIM_OC1_SetConfig>
      break;
 8002910:	e025      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fa33 	bl	8002d84 <TIM_OC2_SetConfig>
      break;
 800291e:	e01e      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 faac 	bl	8002e84 <TIM_OC3_SetConfig>
      break;
 800292c:	e017      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fb23 	bl	8002f80 <TIM_OC4_SetConfig>
      break;
 800293a:	e010      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb80 	bl	8003048 <TIM_OC5_SetConfig>
      break;
 8002948:	e009      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fbd7 	bl	8003104 <TIM_OC6_SetConfig>
      break;
 8002956:	e002      	b.n	800295e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
      break;
 800295c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002966:	7dfb      	ldrb	r3, [r7, #23]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x1c>
 8002988:	2302      	movs	r3, #2
 800298a:	e0b6      	b.n	8002afa <HAL_TIM_ConfigClockSource+0x18a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d03e      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xd8>
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	f200 8087 	bhi.w	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	f000 8086 	beq.w	8002ae6 <HAL_TIM_ConfigClockSource+0x176>
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d87f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d01a      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xaa>
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d87b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d050      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x11e>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d877      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d03c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xfe>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d873      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d058      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x13e>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d86f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d064      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15e>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d86b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d060      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15e>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d867      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05c      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15e>
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d05a      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15e>
 8002a18:	e062      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f000 fcd8 	bl	80033de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	609a      	str	r2, [r3, #8]
      break;
 8002a46:	e04f      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f000 fcc1 	bl	80033de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6a:	609a      	str	r2, [r3, #8]
      break;
 8002a6c:	e03c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 fc35 	bl	80032ea <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2150      	movs	r1, #80	; 0x50
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc8e 	bl	80033a8 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e02c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 fc54 	bl	8003348 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2160      	movs	r1, #96	; 0x60
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fc7e 	bl	80033a8 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 fc15 	bl	80032ea <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	; 0x40
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fc6e 	bl	80033a8 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e00c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f000 fc65 	bl	80033a8 <TIM_ITRx_SetConfig>
      break;
 8002ade:	e003      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_SlaveConfigSynchro+0x18>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e031      	b.n	8002b7e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fb49 	bl	80031c4 <TIM_SlaveTimer_SetConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e018      	b.n	8002b7e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b6a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <TIM_Base_SetConfig+0xdc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x28>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x28>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <TIM_Base_SetConfig+0xe0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <TIM_Base_SetConfig+0xdc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <TIM_Base_SetConfig+0x6a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d00f      	beq.n	8002bf2 <TIM_Base_SetConfig+0x6a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <TIM_Base_SetConfig+0xe0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x6a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <TIM_Base_SetConfig+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_Base_SetConfig+0x6a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x6a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <TIM_Base_SetConfig+0xec>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <TIM_Base_SetConfig+0xdc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0xc0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <TIM_Base_SetConfig+0xe4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0xc0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0xc0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <TIM_Base_SetConfig+0xec>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d103      	bne.n	8002c50 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	615a      	str	r2, [r3, #20]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800

08002c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 0302 	bic.w	r3, r3, #2
 8002cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <TIM_OC1_SetConfig+0xfc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_OC1_SetConfig+0x78>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <TIM_OC1_SetConfig+0x100>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_OC1_SetConfig+0x78>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <TIM_OC1_SetConfig+0x104>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_OC1_SetConfig+0x78>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <TIM_OC1_SetConfig+0x108>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10c      	bne.n	8002d0a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0308 	bic.w	r3, r3, #8
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <TIM_OC1_SetConfig+0xfc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_OC1_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <TIM_OC1_SetConfig+0x100>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_OC1_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <TIM_OC1_SetConfig+0x104>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_OC1_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <TIM_OC1_SetConfig+0x108>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d111      	bne.n	8002d4e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	40014400 	.word	0x40014400
 8002d80:	40014800 	.word	0x40014800

08002d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0210 	bic.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0320 	bic.w	r3, r3, #32
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <TIM_OC2_SetConfig+0xf0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10d      	bne.n	8002e04 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <TIM_OC2_SetConfig+0xf0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_OC2_SetConfig+0xa0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <TIM_OC2_SetConfig+0xf4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_OC2_SetConfig+0xa0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <TIM_OC2_SetConfig+0xf8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_OC2_SetConfig+0xa0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <TIM_OC2_SetConfig+0xfc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d113      	bne.n	8002e4c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e32:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40012c00 	.word	0x40012c00
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_OC3_SetConfig+0xec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10d      	bne.n	8002f02 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f00:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <TIM_OC3_SetConfig+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <TIM_OC3_SetConfig+0x9e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <TIM_OC3_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_OC3_SetConfig+0x9e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <TIM_OC3_SetConfig+0xf4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_OC3_SetConfig+0x9e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <TIM_OC3_SetConfig+0xf8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d113      	bne.n	8002f4a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800

08002f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	031b      	lsls	r3, r3, #12
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a16      	ldr	r2, [pc, #88]	; (8003038 <TIM_OC4_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_OC4_SetConfig+0x7c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <TIM_OC4_SetConfig+0xbc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <TIM_OC4_SetConfig+0x7c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <TIM_OC4_SetConfig+0xc0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_OC4_SetConfig+0x7c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <TIM_OC4_SetConfig+0xc4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d109      	bne.n	8003010 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003002:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40014000 	.word	0x40014000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800

08003048 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800308c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <TIM_OC5_SetConfig+0xac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_OC5_SetConfig+0x72>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <TIM_OC5_SetConfig+0xb0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_OC5_SetConfig+0x72>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <TIM_OC5_SetConfig+0xb4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_OC5_SetConfig+0x72>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a12      	ldr	r2, [pc, #72]	; (8003100 <TIM_OC5_SetConfig+0xb8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d109      	bne.n	80030ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	051b      	lsls	r3, r3, #20
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <TIM_OC6_SetConfig+0xb0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_OC6_SetConfig+0x74>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <TIM_OC6_SetConfig+0xb4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_OC6_SetConfig+0x74>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <TIM_OC6_SetConfig+0xb8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC6_SetConfig+0x74>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <TIM_OC6_SetConfig+0xbc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d109      	bne.n	800318c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	029b      	lsls	r3, r3, #10
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800

080031c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	f023 0307 	bic.w	r3, r3, #7
 80031f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b70      	cmp	r3, #112	; 0x70
 8003210:	d01a      	beq.n	8003248 <TIM_SlaveTimer_SetConfig+0x84>
 8003212:	2b70      	cmp	r3, #112	; 0x70
 8003214:	d860      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 8003216:	2b60      	cmp	r3, #96	; 0x60
 8003218:	d054      	beq.n	80032c4 <TIM_SlaveTimer_SetConfig+0x100>
 800321a:	2b60      	cmp	r3, #96	; 0x60
 800321c:	d85c      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 800321e:	2b50      	cmp	r3, #80	; 0x50
 8003220:	d046      	beq.n	80032b0 <TIM_SlaveTimer_SetConfig+0xec>
 8003222:	2b50      	cmp	r3, #80	; 0x50
 8003224:	d858      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d019      	beq.n	800325e <TIM_SlaveTimer_SetConfig+0x9a>
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d854      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d055      	beq.n	80032de <TIM_SlaveTimer_SetConfig+0x11a>
 8003232:	2b30      	cmp	r3, #48	; 0x30
 8003234:	d850      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 8003236:	2b20      	cmp	r3, #32
 8003238:	d051      	beq.n	80032de <TIM_SlaveTimer_SetConfig+0x11a>
 800323a:	2b20      	cmp	r3, #32
 800323c:	d84c      	bhi.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d04d      	beq.n	80032de <TIM_SlaveTimer_SetConfig+0x11a>
 8003242:	2b10      	cmp	r3, #16
 8003244:	d04b      	beq.n	80032de <TIM_SlaveTimer_SetConfig+0x11a>
 8003246:	e047      	b.n	80032d8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f000 f8c1 	bl	80033de <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800325c:	e040      	b.n	80032e0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b05      	cmp	r3, #5
 8003264:	d101      	bne.n	800326a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e03b      	b.n	80032e2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003290:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4313      	orrs	r3, r2
 800329c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
      break;
 80032ae:	e017      	b.n	80032e0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	461a      	mov	r2, r3
 80032be:	f000 f814 	bl	80032ea <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80032c2:	e00d      	b.n	80032e0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f000 f839 	bl	8003348 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80032d6:	e003      	b.n	80032e0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
      break;
 80032dc:	e000      	b.n	80032e0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80032de:	bf00      	nop
  }

  return status;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b087      	sub	sp, #28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 0201 	bic.w	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 030a 	bic.w	r3, r3, #10
 8003326:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 0210 	bic.w	r2, r3, #16
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f043 0307 	orr.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	021a      	lsls	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	431a      	orrs	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2201      	movs	r2, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	43db      	mvns	r3, r3
 8003440:	401a      	ands	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e054      	b.n	800352a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d009      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10c      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4313      	orrs	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40014000 	.word	0x40014000

08003544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800355c:	2302      	movs	r3, #2
 800355e:	e060      	b.n	8003622 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a14      	ldr	r2, [pc, #80]	; (8003630 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d115      	bne.n	8003610 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	051b      	lsls	r3, r3, #20
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00

08003634 <__libc_init_array>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	4d0d      	ldr	r5, [pc, #52]	; (800366c <__libc_init_array+0x38>)
 8003638:	4c0d      	ldr	r4, [pc, #52]	; (8003670 <__libc_init_array+0x3c>)
 800363a:	1b64      	subs	r4, r4, r5
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	2600      	movs	r6, #0
 8003640:	42a6      	cmp	r6, r4
 8003642:	d109      	bne.n	8003658 <__libc_init_array+0x24>
 8003644:	4d0b      	ldr	r5, [pc, #44]	; (8003674 <__libc_init_array+0x40>)
 8003646:	4c0c      	ldr	r4, [pc, #48]	; (8003678 <__libc_init_array+0x44>)
 8003648:	f000 f820 	bl	800368c <_init>
 800364c:	1b64      	subs	r4, r4, r5
 800364e:	10a4      	asrs	r4, r4, #2
 8003650:	2600      	movs	r6, #0
 8003652:	42a6      	cmp	r6, r4
 8003654:	d105      	bne.n	8003662 <__libc_init_array+0x2e>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	f855 3b04 	ldr.w	r3, [r5], #4
 800365c:	4798      	blx	r3
 800365e:	3601      	adds	r6, #1
 8003660:	e7ee      	b.n	8003640 <__libc_init_array+0xc>
 8003662:	f855 3b04 	ldr.w	r3, [r5], #4
 8003666:	4798      	blx	r3
 8003668:	3601      	adds	r6, #1
 800366a:	e7f2      	b.n	8003652 <__libc_init_array+0x1e>
 800366c:	080036d4 	.word	0x080036d4
 8003670:	080036d4 	.word	0x080036d4
 8003674:	080036d4 	.word	0x080036d4
 8003678:	080036d8 	.word	0x080036d8

0800367c <memset>:
 800367c:	4402      	add	r2, r0
 800367e:	4603      	mov	r3, r0
 8003680:	4293      	cmp	r3, r2
 8003682:	d100      	bne.n	8003686 <memset+0xa>
 8003684:	4770      	bx	lr
 8003686:	f803 1b01 	strb.w	r1, [r3], #1
 800368a:	e7f9      	b.n	8003680 <memset+0x4>

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
